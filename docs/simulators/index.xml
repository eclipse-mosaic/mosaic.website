<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simulators Overview | Eclipse MOSAIC – A Multi-Domain and Multi-Scale Simulation Framework for Connected and Automated Mobility</title>
    <link>https://www.eclipse.dev/mosaic/docs/simulators/</link>
      <atom:link href="https://www.eclipse.dev/mosaic/docs/simulators/index.xml" rel="self" type="application/rss+xml" />
    <description>Simulators Overview</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 05 May 2019 00:00:00 +0100</lastBuildDate>
    <image>
      <url>https://www.eclipse.dev/mosaic/images/logo.svg</url>
      <title>Simulators Overview</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/</link>
    </image>
    
    <item>
      <title>Eclipse MOSAIC Application Simulator</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/application_simulator/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/application_simulator/</guid>
      <description>&lt;p&gt;The &lt;strong&gt;Application Simulator&lt;/strong&gt; plays an important role in the simulation of vehicles and its functions. It provides the capability
to model the application logic for different simulation units (e.g. vehicles, road side units (RSUs), traffic lights, and others)
as well as possible interaction attempts between the units via different communication links.&lt;/p&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Learn more about how to 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/&#34;&gt;develop applications&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;This simulator does not need to be installed. It is delivered as part of the Eclipse MOSAIC installation package.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The Application simulator offers configuration possibilities for several aspects, e.g.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the simulator itself&lt;/li&gt;
&lt;li&gt;the developed and simulated application(s) (depending on the application)&lt;/li&gt;
&lt;li&gt;the mapping.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In terms of the scenario folder structure, the configuration files are located in the folders, as outlined in the overview:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   ├─ application
   |  ├─ application_config.json ............. Configuration file for the application simulator.
   |  ├─ &amp;lt;scenario_name&amp;gt;.db .................. Database file for navigation.
   |  ├─ YourApplication.jar ................. Application(s) to be simulated.
   |  └─ your_application_config.json ........ Optional configuration for application(s).
   └─ mapping
      └─ mapping_config.json ................. Configuration file for the application mapping.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;Application Simulator&lt;/strong&gt; is configured in the file &lt;code&gt;&amp;lt;scenario_name&amp;gt;/application/application_config.json&lt;/code&gt;.
It is not necessary to provide the file, as in this case of a non-existing file, the following default configuration options are used:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;messageCacheTime&amp;quot;: &amp;quot;30s&amp;quot;,
    &amp;quot;encodePayloads&amp;quot;: true,
    &amp;quot;navigationConfiguration&amp;quot; : {
        &amp;quot;type&amp;quot;: &amp;quot;database&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Furthermore, depending on the deployed &lt;strong&gt;Applications&lt;/strong&gt;, the applications itself may offer configuration options
in custom configuration files (e.g. &lt;code&gt;EtsiApplication.json&lt;/code&gt; or &lt;code&gt;EtsiApplication_veh_0.json&lt;/code&gt; - 





  
  

&lt;a href=&#34;#etsi-application-for-vehicles&#34;&gt;see below&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;The &lt;strong&gt;Mapping&lt;/strong&gt; configuration is presented in close detail in 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_mapping/&#34;&gt;Application - Mapping&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;application-architecture&#34;&gt;Application Architecture&lt;/h2&gt;
&lt;p&gt;Each simulation unit (e.g. vehicle, RSU, traffic light ..) can have different applications (depending on their application






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_mapping/&#34;&gt;Mapping&lt;/a&gt;. The applications
for the units are basically compiled JAVA classes, which &lt;strong&gt;extend&lt;/strong&gt; the abstract class &lt;code&gt;AbstractApplication&lt;/code&gt;. Those
classes have to be deployed as pre-compiled JAR files into the &lt;code&gt;application&lt;/code&gt; folder of the simulated scenario.&lt;/p&gt;















&lt;figure id=&#34;figure-overview-of-interaction-between-applications-and-the-units-operating-system-with-its-modules-an-example-v2x-message-propagation-is-presented&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/application_overview.svg&#34; data-caption=&#34;Overview of interaction between applications and the unit&amp;rsquo;s operating system with its modules. An example V2X message propagation is presented.&#34;&gt;


  &lt;img src=&#34;../images/application_overview.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Overview of interaction between applications and the unit&amp;rsquo;s operating system with its modules. An example V2X message propagation is presented.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;application-operating-system&#34;&gt;Application Operating System&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;AbstractApplication&lt;/code&gt; possesses a unit-specific &lt;code&gt;OperatingSystem&lt;/code&gt;, which allows interactions with the simulated parameters.
The operating system provides access to information like the current time or position of the units and could control unit-specific
actions (like &lt;code&gt;slowDown()&lt;/code&gt; for vehicles).&lt;/p&gt;
&lt;p&gt;As the interaction types for navigation (retrieving road network information and calculating routes) and communication (preparing and
sending messages) are more complex, they are separated into the specific modules &lt;code&gt;NavigationModule&lt;/code&gt; (Navigation + Routing for
vehicles) / &lt;code&gt;RoutingModule&lt;/code&gt; (Routing-only for static units) and &lt;code&gt;AdHocModule&lt;/code&gt; / &lt;code&gt;CellModule&lt;/code&gt; with APIs dedicated to their purpose.&lt;/p&gt;
&lt;p&gt;The following table lists all modules a unit&amp;rsquo;s operating system could provide.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NavigationModule&lt;/td&gt;
&lt;td&gt;Full featured access to the central navigation component for vehicles&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RoutingModule&lt;/td&gt;
&lt;td&gt;Access to routing functionalities for static units as RSUs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AdHocModule&lt;/td&gt;
&lt;td&gt;Communication via ad-hoc mode, using WIFI or ITS G5 specific means (e.g. for addressing)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CellModule&lt;/td&gt;
&lt;td&gt;Communication via cellular services (different configuration / addressing modes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PerceptionModule&lt;/td&gt;
&lt;td&gt;Access to perception capabilities via the central perception component&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;The presented communication modules &lt;code&gt;AdHocModule&lt;/code&gt;, &lt;code&gt;CellModule&lt;/code&gt; are used for the sending part of a transmission. The message
reception is realized by Application Interfaces provided by the &lt;code&gt;CommunicationApplication&lt;/code&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;basic-applications&#34;&gt;Basic Applications&lt;/h2&gt;
&lt;p&gt;Eclipse MOSAIC is shipped with several example applications which can be loaded on the vehicles. Next to the applications shipped with
the tutorial scenarios &lt;strong&gt;Barnim&lt;/strong&gt; and &lt;strong&gt;Tiergarten&lt;/strong&gt;, there are further example applications to be found on our website.&lt;/p&gt;
&lt;p&gt;Additionally, we provide an ETSI conform application which implement specific CAM generation rules for vehicles
(&lt;code&gt;org.eclipse.mosaic.fed.application.app.etsi.VehicleCamSendingApp&lt;/code&gt;), which is described in the following:&lt;/p&gt;
&lt;h3 id=&#34;etsi-application-for-vehicles&#34;&gt;ETSI Application for vehicles&lt;/h3&gt;
&lt;p&gt;This application generates ETSI data for its simulation unit (e.g. heading, position, speed and time for
vehicles). According to its configuration, the application then sends out CAMs to other vehicles in range.
Note that the messages are only send when the time lies between the configured minimum and maximum
interval.&lt;/p&gt;
&lt;p&gt;Currently, the default configuration (&lt;code&gt;EtsiApplication.json&lt;/code&gt;) for the ETSI application looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    /* The minimal length in bytes assumed for the payload to be send with each CAM. */
    &amp;quot;minimalPayloadLength&amp;quot;: 200,
    /* The maximum time offset (here 1 second) of sending CA-messages 
     * (the offset will be different for every single vehicle to avoid interference) */
    &amp;quot;maxStartOffset&amp;quot;: &amp;quot;1s&amp;quot;,  
    /* CAMs are sent at most every 1 second */
    &amp;quot;minInterval&amp;quot;: &amp;quot;500ms&amp;quot;,
    /* CAMs are sent at least every 1 second */
    &amp;quot;maxInterval&amp;quot;: &amp;quot;1s&amp;quot;,
    /* CAMs are sent when the position of the vehicle changes at least about 4 meters */
    &amp;quot;positionChange&amp;quot;: 4,
    /* CAMs are sent when the heading of the vehicle changes at least about 4 degrees */
    &amp;quot;headingChange&amp;quot;: 4,
    /* CAMs are sent when the velocity of the vehicle changes at least about 0.5 m/s */
    &amp;quot;velocityChange&amp;quot;: 0.5
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CAMs sent out by this application consist of four parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Header with generic information&lt;/li&gt;
&lt;li&gt;MessageBody&lt;/li&gt;
&lt;li&gt;TaggedValue list&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First of all, generic information like protocol version and creation time stamp are transmitted. Normally
this data set follows a network beacon, already containing data like position and speed. Nevertheless
this functionality must be implemented in the network layer, i.e. in the network simulator. At
the moment this is not supported and is therefore compensated in the next message part, the message
body. The body contains vehicle awareness data, including data like vehicle width, length, position, speed, type and heading.
However, the specification is not completely implemented. Last but not least a message can contain optional data.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simulation Entities and Application Mapping</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/application_mapping/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/application_mapping/</guid>
      <description>&lt;p&gt;Closely related to the Application Simulator, the &lt;strong&gt;Mapping&lt;/strong&gt; Ambassador is used for the initial choreography of a simulation.
It defines two major aspects for the simulation units:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;number, properties, position (e.g. of RSUs, traffic lights) or initial routes (of vehicles, simulated in a traffic/vehicle simulator)&lt;/li&gt;
&lt;li&gt;specific application(s) to be &amp;ldquo;mapped&amp;rdquo; on the simulation units and simulated in the Application Simulation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The JSON based configuration is located in &lt;code&gt;&amp;lt;scenario_name&amp;gt;/mapping/mapping_config.json&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The Mapping configuration is divided into different parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pre Definitions of &lt;code&gt;prototypes&lt;/code&gt; and &lt;code&gt;deviations&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Entity Definitions of &lt;code&gt;vehicles&lt;/code&gt;, &lt;code&gt;rsus&lt;/code&gt;, &lt;code&gt;tls&lt;/code&gt; &lt;code&gt;servers&lt;/code&gt; and &lt;code&gt;tmcs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Advanced Vehicle Definitions (including route generation) in &lt;code&gt;matrixMappers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Common Definitions in &lt;code&gt;config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;prototypes&#34;&gt;Prototypes&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;prototypes&lt;/code&gt; define models for other objects, which can be reused later in the other sections of the Mapping. This allows reusing the
definition of certain entities such as vehicles or the combination of multiple applications, reducing redundancies and resulting in
shorter Mapping configurations.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;prototypes&amp;quot;: [
    {
        &amp;quot;name&amp;quot;: &amp;quot;CamVehicle&amp;quot;,
        &amp;quot;accel&amp;quot;: 2.6,
        &amp;quot;decel&amp;quot;: 4.5,
        &amp;quot;length&amp;quot;: 5.00,
        &amp;quot;maxSpeed&amp;quot;: 70.0,
        &amp;quot;applications&amp;quot;: [ &amp;quot;org.eclipse.mosaic.fed.application.app.etsi.VehicleCamSendingApp&amp;quot; ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Prototypes can be created for all types of entities. Next to the list of &lt;code&gt;applications&lt;/code&gt; which is available for all types of entities,
vehicle types provide various other parameters to be adjusted.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Deviation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vehicleClass&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The class of the vehicle, e.g. &lt;code&gt;Car&lt;/code&gt;, &lt;code&gt;ElectricVehicle&lt;/code&gt;, &lt;code&gt;EmergencyVehicle&lt;/code&gt;, &lt;code&gt;Bicycle&lt;/code&gt;, &lt;code&gt;HeavyGoodsVehicle&lt;/code&gt;, and more.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;accel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The maximum acceleration of the vehicle in $m/s^2$.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;decel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The maximum deceleration of the vehicle in $m/s^2$, e.g. when stopping for traffic lights.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;emergencyDecel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The maximum deceleration of the vehicle in $m/s^2$, in order to avoid accidents.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The length of the vehicle in $m$.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;maxSpeed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The maximum speed of the vehicle in $m/s$.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;minGap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The minimum gap towards the leader in $m$, i.e. the space in front in a traffic jam.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sigma&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The driver&amp;rsquo;s imperfection $[0,1]$.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tau&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The reaction time (or time headway) of the vehicle in $s$.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;speedFactor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This factor is used to determine the speed limit to comply on roads, e.g. &lt;code&gt;1.1&lt;/code&gt; would exceed the speed limit by 10%.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;laneChangeMode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The lane changing behavior of the vehicle: &lt;code&gt;COOPERATIVE&lt;/code&gt;. &lt;code&gt;CAUTIOUS&lt;/code&gt;, &lt;code&gt;AGGRESSIVE&lt;/code&gt;, &lt;code&gt;PASSIVE&lt;/code&gt;, &lt;code&gt;OFF&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;applications&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The list of applications to map onto this vehicle type.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For the majority of the parameters above (see column &amp;ldquo;Deviation&amp;rdquo;), a normal distribution can be created. In that case, each individual
vehicle spawned with this prototype will be loaded with a random value within this distribution. To achieve this, a separate &lt;code&gt;deviations&lt;/code&gt;
attribute must be added to the type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;prototypes&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;Car&amp;quot;,
            &amp;quot;length&amp;quot;: 5.0, 
            &amp;quot;maxSpeed&amp;quot;: 70.0,
            &amp;quot;deviations&amp;quot;: {
                &amp;quot;length&amp;quot;: 1.2,
                &amp;quot;maxSpeed&amp;quot;: 5.0
            }
        }
    ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to the config above, the basic parameter value conforms to the expected value, and the given value in the &lt;code&gt;deviations&lt;/code&gt;
attribute conforms to the $\sigma$ of the Gaussian distribution(meaning for the example of maxSpeed that ~68% of the values will
be located in the interval [65.0, 75.0]). The deviation will be limited to ±2$\sigma$.&lt;/p&gt;
&lt;h3 id=&#34;entities&#34;&gt;Entities&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Vehicles&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;vehicles&lt;/code&gt;-section is the centerpiece of the Mapping configuration. It defines the departures (times and number),
routes, and types of the vehicles.&lt;/p&gt;
&lt;p&gt;Each spawner in this list generates a traffic stream of vehicles on a certain &lt;code&gt;route&lt;/code&gt;. The vehicles stream begins at &lt;code&gt;startingTime&lt;/code&gt; and
generates vehicles until &lt;code&gt;maxNumberVehicles&lt;/code&gt; is reached. The time between two consecutively vehicles is implicitly given by the
&lt;code&gt;targetFlow&lt;/code&gt; property, which defines how many vehicles per hour are going to be spawned.&lt;/p&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;All times (e.g., &lt;code&gt;startingTime&lt;/code&gt;) can be defined as numbers or alternatively using a string and defining a unit (e.g. &lt;code&gt;&amp;quot;5.0 s&amp;quot;&lt;/code&gt;).
As some configurations use nanoseconds and others use seconds you are always on the save side using the string declaration as
MOSAIC will convert values correctly.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Each vehicle spawner must refer to at least one vehicle type (&lt;code&gt;types&lt;/code&gt;). A vehicle type must either refer to a type from the &lt;code&gt;prototypes&lt;/code&gt;
section by using its &lt;code&gt;name&lt;/code&gt;, or be defined as a completely new vehicle type with all necessary parameters. If more than one vehicle type
is referenced in the &lt;code&gt;types&lt;/code&gt; attribute, &lt;code&gt;weight&lt;/code&gt;s can be used to specify the ratios to choose between them when loading an individual
vehicle. If no weights are defined, individual vehicle types are assumed to be distributed equally.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;If at least one vehicle type has a weight defined, all types without a defined weight are ignored.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;vehicles&amp;quot;: [
    {
        &amp;quot;startingTime&amp;quot;: 5.0,
        &amp;quot;targetFlow&amp;quot;: 1800,
        &amp;quot;maxNumberVehicles&amp;quot;: 120,
        &amp;quot;route&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;types&amp;quot;: [
            {
                &amp;quot;name&amp;quot;: &amp;quot;CAMVehicle&amp;quot;,
                &amp;quot;weight&amp;quot;: 0.1
            },
            {
                &amp;quot;name&amp;quot;: &amp;quot;NormalVehicle&amp;quot;, // this vehicle has no applications 
                &amp;quot;applications&amp;quot;: [ ],  
                &amp;quot;weight&amp;quot;: 0.2
            }
        ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additional notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;route&lt;/code&gt; refers to a route usually defined in the scenario database file (&lt;code&gt;*.db&lt;/code&gt;) of the scenario.&lt;/li&gt;
&lt;li&gt;In order to define only one single vehicle to be spawned, the &lt;code&gt;maxNumberVehicles&lt;/code&gt; property can be set to &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;By defining the &lt;code&gt;endingTime&lt;/code&gt; property, the flow is stopped from being generated when the given simulation time is reached.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;fixedOrder&lt;/code&gt; property controls how applications are mapped according to their weighting. More information can be found 





  
  

&lt;a href=&#34;#mapping-order&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;By defining the &lt;code&gt;spawningMode&lt;/code&gt; to one of the following values, the departure time of the individual vehicles can be adjusted:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CONSTANT&lt;/code&gt; - default case, all vehicles have equal time distance to match &lt;code&gt;target_flow&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POISSON&lt;/code&gt; -  vehicles depart within a Poisson distribution, resulting in a more natural traffic flow.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GROW&lt;/code&gt; - the flow of departing vehicles increases linear up to &lt;code&gt;target_flow&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SHRINK&lt;/code&gt; - the flow of departing vehicles decreases linear starting at &lt;code&gt;target_flow&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GROW_AND_SHRINK&lt;/code&gt; - the flow of departing vehicles increases up to &lt;code&gt;target_flow&lt;/code&gt; and decreases afterwards.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;By defining the &lt;code&gt;laneSelectionMode&lt;/code&gt; to one the following values, the selection of the departure lane can be adjusted:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DEFAULT&lt;/code&gt; - selects the lane for the next vehicle based on the list of given &lt;code&gt;lanes&lt;/code&gt; in a roundrobin manner.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ROUNDROBIN_HIGHWAY&lt;/code&gt; - trucks will be spawned on the rightmost lane, all other vehicles according to &lt;code&gt;DEFAULT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HIGHWAY&lt;/code&gt; - trucks will be spawned on the rightmost lane, all other vehicles according to &lt;code&gt;BEST&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RANDOM&lt;/code&gt; - the vehicle will be placed randomly on one of the available lanes of the road.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FREE&lt;/code&gt; - the vehicle will be placed on a free lane of the road.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BEST&lt;/code&gt; - the vehicle will be placed on the best lane of the road, according to the current traffic situation and departure speed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Road Side Units&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;rsus&lt;/code&gt;-section offers the possibility to define instances of application supported Road Side Units (RSU)s and place them on a
defined position (&lt;code&gt;lat&lt;/code&gt;, &lt;code&gt;lon&lt;/code&gt; coordinates). Referring to &lt;code&gt;prototype&lt;/code&gt; definitions with simply specifying its name in the &lt;code&gt;name&lt;/code&gt;
property will automatically fill in relevant properties of the RSU.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;rsus&amp;quot;: [
    {
        &amp;quot;position&amp;quot;: {
            &amp;quot;latiude&amp;quot;: 52.65027,
            &amp;quot;longitude&amp;quot;: 13.54500
        },
        &amp;quot;name&amp;quot;: &amp;quot;WeatherServer&amp;quot;,
        &amp;quot;applications&amp;quot;: [ &amp;quot;org.eclipse.mosaic.app.tutorial.WeatherServerApp&amp;quot; ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Traffic Lights&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;trafficLights&lt;/code&gt;-section, applications can be mapped to traffic light groups. Usually, individual traffic lights are part of
traffic light groups to control a whole junction, whereas the junction possesses a certain position. The traffic light groups and
their positions are defined in the simulator specific configuration file (e.g. the *.net.xml for SUMO and *.ttl.json for PHABMACS).
The &lt;code&gt;tlGroupId&lt;/code&gt;-property allows mapping of applications to the traffic light groups, referring them by Id.&lt;/p&gt;
&lt;p&gt;Alternatively, the definition of the &lt;code&gt;weight&lt;/code&gt;-property leads to a random distribution of the referred applications through ALL traffic lights of the
scenario (Note: The weights do not have to add up to 100 or 1). Consequently, all traffic lights will be mapped using the specified
prototypes as soon as one weight differs from zero. So in case you don’t want all traffic lights to have applications running on them you
have to define one traffic light without any applications and add a weight to it. If neither tlGroupId nor weight are defined for an app, the weight will be set to 1.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;trafficLights&amp;quot;: [
    {
        &amp;quot;tlGroupId&amp;quot;: &amp;quot;26704448&amp;quot;,
        &amp;quot;applications&amp;quot;: [ &amp;quot;org.eclipse.mosaic.app.tutorial.TrafficLightApp&amp;quot; ]
    },
    {
        &amp;quot;tlGroupId&amp;quot;: &amp;quot;252864802&amp;quot;,
        &amp;quot;applications&amp;quot;: [ &amp;quot;org.eclipse.mosaic.app.tutorial.TrafficLightApp&amp;quot; ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more information, explained for detailed examples with different mapping options regarding traffic lights, please refer to






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/#traffic-lights&#34;&gt;Simulation Scenarios - Traffic Lights&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Servers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;servers&lt;/code&gt;-array can be used to specify server units, which can be used to communicate with other units via the cell module.
Capacity configurations for servers should be done when enabling the &lt;code&gt;CellModule&lt;/code&gt;. Delay and transmission models are configured
in the &lt;code&gt;network.json&lt;/code&gt; of the cell module (see 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_cell/&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;The &lt;code&gt;group&lt;/code&gt; parameter in the mapping configuration has to match with the id in the network configuration in order to properly function.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;servers&amp;quot;: [
    {
        &amp;quot;name&amp;quot;: &amp;quot;MyServer&amp;quot;,
        &amp;quot;group&amp;quot;: &amp;quot;TestServers&amp;quot;,
        &amp;quot;applications&amp;quot;: [ &amp;quot;ServerApp1&amp;quot;, &amp;quot;ServerApp2&amp;quot; ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Traffic Management Centers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;tmc&lt;/code&gt;-section offers the possibility to define instances of a Traffic Management Center (TMC). A TMC
provides the possibility to interact with the infrastructure of the road, i.e. retrieving traffic properties
from detectors (e.g. traffic flow), and changing properties from the road (e.g. speed limits).
Additionally, TMCs are an extension of Servers and can be configured in the same way that servers are&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;tmcs&amp;quot;: [
    {
        &amp;quot;name&amp;quot;: &amp;quot;HighwayManagement&amp;quot;,
        &amp;quot;group&amp;quot;: &amp;quot;TestTmcServers&amp;quot;,
        &amp;quot;applications&amp;quot;: [ &amp;quot;org.eclipse.mosaic.app.tutorial.HighwayManagementApp(&#39;3&#39;, 3)&amp;quot; ],
        &amp;quot;inductionLoops&amp;quot;: [ &amp;quot;detector_0&amp;quot;, &amp;quot;detector_1&amp;quot;, &amp;quot;detector_2&amp;quot; ],
        &amp;quot;laneAreaDetectors&amp;quot;: [ ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Charging Stations&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;While you can define Charging Stations in your mapping configuration the necessary &lt;strong&gt;Charging Station and Battery Simulators&lt;/strong&gt;
are part of 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;chargingStations&lt;/code&gt;-section can be used to specify charging stations which handle electric vehicle battery charging.
A charging station is defined by a position, and a collection of charging spots, where each charging spot represents a
possibility for an electric vehicle to dock. The charging spots can be defined separately from each other supporting different
charging types (&lt;code&gt;AC_3_PHASE&lt;/code&gt;, &lt;code&gt;AC_1_PHASE&lt;/code&gt; and &lt;code&gt;DC&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt; &amp;quot;chargingStations&amp;quot;: [
     {
         &amp;quot;position&amp;quot;: {
             &amp;quot;latitude&amp;quot;: 52.51284101639178,
             &amp;quot;longitude&amp;quot;: 13.328037261722278
         },
         &amp;quot;group&amp;quot;: &amp;quot;chargingStation&amp;quot;,
         &amp;quot;chargingSpots&amp;quot;: [
             {
                 &amp;quot;chargingType&amp;quot;: &amp;quot;AC_3_PHASE&amp;quot;,
                 &amp;quot;maxVoltage&amp;quot;: 400,
                 &amp;quot;maxCurrent&amp;quot;: 16
             },
             {
                 &amp;quot;chargingType&amp;quot;: &amp;quot;AC_3_PHASE&amp;quot;,
                 &amp;quot;maxVoltage&amp;quot;: 400,
                 &amp;quot;maxCurrent&amp;quot;: 16
             }
         ],
         &amp;quot;applications&amp;quot;: [
             &amp;quot;&amp;lt;package&amp;gt;.ChargingStationApp&amp;quot;
         ]
     }
 ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;mapping-order&#34;&gt;Mapping Order&lt;/h3&gt;
&lt;p&gt;Vehicle spawners can be configured to map types to their vehicles in two ways. The






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/mapping_ambassador_config/&#34;&gt;Fixed Order Mapping&lt;/a&gt; produces a sequence of mapped vehicles following a
repeating pattern (&lt;code&gt;&amp;quot;fixedOrder&amp;quot; = true&lt;/code&gt;). The type with the highest weight is selected first. All subsequent
selections are done in a way that configured weights are satisfied as fast as possible.
Per default each type is determined by rolling a weighted die (&lt;code&gt;&amp;quot;fixedOrder&amp;quot; = false&lt;/code&gt;). This option can be configured in
the 





  
  

&lt;a href=&#34;#common-configuration&#34;&gt;global configuration&lt;/a&gt; of the mapping.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Demonstration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given the weights: A=20%, B=20%, -=60%, the spawner may produce a mapping like:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;fixedOrder&lt;/th&gt;
&lt;th&gt;Mapped Sequence&lt;/th&gt;
&lt;th&gt;Note&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--AB---AB---AB-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;repeating pattern after 5 assignments&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;A--B-AA---B-B--&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;no repeating pattern&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;use-type-distributions-in-complex-traffic-scenarios&#34;&gt;Use Type Distributions in Complex Traffic Scenarios&lt;/h3&gt;
&lt;p&gt;In the case, you have many vehicle spawners defined, and you want to distribute prototypes on those vehicles equally without defining them
over and over again, you can use &lt;code&gt;typeDistributions&lt;/code&gt;. By doing so, it is very simple to adjust the list of types and weights at only one
place in the configuration file.&lt;/p&gt;
&lt;p&gt;Instead of defining an equal list of types and weights for each single vehicle spawner, like in this example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;config&amp;quot;: {
    &amp;quot;fixedOrder&amp;quot;: true
},
&amp;quot;vehicles&amp;quot;: [
    {
        &amp;quot;startingTime&amp;quot;: 5.0,
        &amp;quot;targetFlow&amp;quot;: 1800,
        &amp;quot;maxNumberVehicles&amp;quot;: 120,
        &amp;quot;route&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;types&amp;quot;: [
            { &amp;quot;name&amp;quot;: &amp;quot;TypeA&amp;quot;, &amp;quot;weight&amp;quot;: 0.1 },
            { &amp;quot;name&amp;quot;: &amp;quot;TypeB&amp;quot;, &amp;quot;weight&amp;quot;: 0.9 }        
        ]
    },
    {
        &amp;quot;startingTime&amp;quot;: 55.0,
        &amp;quot;targetFlow&amp;quot;: 1800,
        &amp;quot;maxNumberVehicles&amp;quot;: 120,
        &amp;quot;route&amp;quot;: &amp;quot;2&amp;quot;,
        &amp;quot;types&amp;quot;: [
            { &amp;quot;name&amp;quot;: &amp;quot;TypeA&amp;quot;, &amp;quot;weight&amp;quot;: 0.1 },
            { &amp;quot;name&amp;quot;: &amp;quot;TypeB&amp;quot;, &amp;quot;weight&amp;quot;: 0.9 }        
        ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;hellip; you can use &lt;code&gt;typeDistributions&lt;/code&gt; to define the distribution of types for each vehicle once and reuse them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;typeDistributions&amp;quot;: {
    &amp;quot;exampleTypeDist&amp;quot; : [
        { &amp;quot;name&amp;quot;: &amp;quot;TypeA&amp;quot;, &amp;quot;weight&amp;quot;: 0.1 },
        { &amp;quot;name&amp;quot;: &amp;quot;TypeB&amp;quot;, &amp;quot;weight&amp;quot;: 0.9 }       
    ]
},
&amp;quot;vehicles&amp;quot;: [
    {
        &amp;quot;startingTime&amp;quot;: 5.0,
        &amp;quot;targetFlow&amp;quot;: 1800,
        &amp;quot;maxNumberVehicles&amp;quot;: 120,
        &amp;quot;route&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;typeDistribution&amp;quot;: &amp;quot;exampleTypeDist&amp;quot;
    },
    {
        &amp;quot;startingTime&amp;quot;: 55.0,
        &amp;quot;targetFlow&amp;quot;: 1800,
        &amp;quot;maxNumberVehicles&amp;quot;: 120,
        &amp;quot;route&amp;quot;: &amp;quot;2&amp;quot;,  
        &amp;quot;typeDistribution&amp;quot;: &amp;quot;exampleTypeDist&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;advanced-vehicle-spawners-with-route-generation&#34;&gt;Advanced vehicle spawners with route generation&lt;/h3&gt;
&lt;p&gt;It is also possible to define and use OD (origin-destination) matrices by adding a ODMatrixMapper to the &lt;code&gt;matrixMappers&lt;/code&gt;-list.
Each MatrixMapper consists of a list of &lt;code&gt;points&lt;/code&gt;, the vehicle-&lt;code&gt;types&lt;/code&gt; to be used and the actual flow-values (&lt;code&gt;odValues&lt;/code&gt;) between each
of the points. It is possible to define multiple matrices using different values for &lt;code&gt;startingTime&lt;/code&gt; and &lt;code&gt;maxTime&lt;/code&gt;.
This way can achieve distinctively different compositions of the vehicle flows.&lt;/p&gt;
&lt;p&gt;The MatrixMapper will be called before the actual execution of the simulation and will generate vehicle-spawners for the flow between
each of the points.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;matrixMappers&amp;quot;: [
    {
        &amp;quot;points&amp;quot;: [ 
            {
                &amp;quot;name&amp;quot;: &amp;quot;CityA&amp;quot;, 
                &amp;quot;position&amp;quot;: {
                    &amp;quot;center&amp;quot;: {
                        &amp;quot;latitude&amp;quot;: 52,
                        &amp;quot;longitude&amp;quot;: 13
                    },
                    &amp;quot;radius&amp;quot;: 1000
                }       
            },
            {
                &amp;quot;name&amp;quot;: &amp;quot;CityB&amp;quot;, 
                &amp;quot;position&amp;quot;: {
                    &amp;quot;center&amp;quot;: {
                        &amp;quot;latitude&amp;quot;: 48,
                        &amp;quot;longitude&amp;quot;: 10
                    },
                    &amp;quot;radius&amp;quot;: 1000
                }       
            }
        ],
        &amp;quot;types&amp;quot;: [
            {
                &amp;quot;name&amp;quot;: &amp;quot;CAMVehicle&amp;quot;
            }
        ],
        &amp;quot;odValues&amp;quot;: [
            [0, 100], //100 vehicles from CityA to CityB
            [200, 0]  //200 vehicles from CityB to CityA
        ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;common-configuration&#34;&gt;Common Configuration&lt;/h2&gt;
&lt;p&gt;Next to the specific configuration of prototypes and simulation entities, some general parameters can be adjusted:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;config&amp;quot;: {
        &amp;quot;scaleTraffic&amp;quot; : 1.0,
        &amp;quot;fixedOrder&amp;quot;: true,
        &amp;quot;start&amp;quot;: 0, 
        &amp;quot;end&amp;quot;: 500,
        &amp;quot;adjustStartingTimes&amp;quot;: false,
        &amp;quot;randomizeFlows&amp;quot;: false,
        &amp;quot;randomizeStartingTimes&amp;quot; : false,
        &amp;quot;randomizeWeights&amp;quot;: false
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;scaleTraffic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Scales the &lt;code&gt;targetFlow&lt;/code&gt; of spawned vehicles per hour as well as the &lt;code&gt;maxNumberVehicles&lt;/code&gt; by the given factor.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;fixedOrder&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Defines, if vehicle types are mapped in fixed sequence or randomly. See 





  
  

&lt;a href=&#34;#mapping-order&#34;&gt;above&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;start&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Adjusts the point in time (in $s$) to start spawning vehicles. Any vehicle spawner with a lower &lt;code&gt;startingTime&lt;/code&gt; will be ignored.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Adjusts the point in time (in $s$) to end spawning vehicles. Any vehicle spawner with a greater &lt;code&gt;startingTime&lt;/code&gt; will be ignored.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;adjustStartingTimes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If set to &lt;code&gt;true&lt;/code&gt;, the starting time of each spawner is reduced by the value in &lt;code&gt;start&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;randomizeFlows&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If set to &lt;code&gt;true&lt;/code&gt;, the departure time of vehicles within a vehicle spawner is slightly randomized.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;randomizeStartingTimes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If set to &lt;code&gt;true&lt;/code&gt;, the starting time of each vehicle spawner is slightly randomized.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;randomizeWeights&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If set to &lt;code&gt;true&lt;/code&gt;, each &lt;code&gt;weight&lt;/code&gt; greater than zero is slightly randomized.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Read the detailed documentation of the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/mapping_ambassador_config/&#34;&gt;Mapping Configuration&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;unit-identifiers&#34;&gt;Unit Identifiers&lt;/h2&gt;
&lt;p&gt;Every traffic object in Eclipse MOSAIC has a globally unique string identifier. These identifiers are used to identify
a traffic object in Eclipse MOSAIC as well as in different ambassadors. From user’s aspect, these identifiers will be seen in the log files
which are generated after a simulation. The following table explains, which identifier belongs to which traffic object.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Traffic Object&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Eclipse MOSAIC Internal ID&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Vehicle&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;veh_&amp;lt;seq_nr&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;RSU&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rsu_&amp;lt;seq_nr&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;TMC&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tmc_&amp;lt;seq_nr&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Traffic Light&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tl_&amp;lt;group_id&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;seq_nr&lt;/code&gt; is the sequence number of simulated vehicles, RSUs, TMCs, each starting from zero.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_id&lt;/code&gt; is the group id of the traffic light.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse SUMO - Simulation of Urban MObility</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/traffic_simulator_sumo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/traffic_simulator_sumo/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Eclipse SUMO&lt;/strong&gt; is a highly portable, microscopic and continuous road traffic
simulation tool. It is designed to handle large road networks faster than real-time and simulates each vehicle
individually.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Operating System&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;GNU/Linux, &lt;em&gt;macOS&lt;/em&gt;, Microsoft Windows&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Written in&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;EPL-2.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;




&lt;a href=&#34;https://www.eclipse.dev/sumo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.eclipse.dev/sumo/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Supported version(s)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Recommended version:&lt;br&gt;Full support:&lt;br&gt;Limited support:&lt;/td&gt;
&lt;td&gt;1.20.0&lt;br&gt;1.9.2 - 1.20.0&lt;br&gt;below 1.9.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;


&lt;a class=&#34;mosaic-btn mosaic-btn-primary&#34; href=&#34;https://sumo.dlr.de/wiki/Downloads&#34; title=&#34;Download Eclipse SUMO&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;Download Eclipse SUMO&lt;/a&gt;

&lt;p&gt;Download the SUMO binary bundle or installer from the SUMO website. Linux users may build SUMO from the source code.
Depending on the distribution, it is even possible to install SUMO as package from a software repository.
Please refer to the SUMO Wiki for further information.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;In order to run SUMO with Eclipse MOSAIC you need to make the SUMO binaries available system wide by adding the SUMO
binary folder to your
&lt;code&gt;PATH&lt;/code&gt; environment variable. Alternatively, the environment variable &lt;code&gt;SUMO_HOME&lt;/code&gt; can be used to
define the installation directory of SUMO.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;We recommend using the 64 bit version of SUMO if you want to simulate scenarios with large traffic networks.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The SUMO ambassador can be configured with a configuration file. The specific path is &lt;code&gt;&amp;lt;scenarioName&amp;gt;/sumo/sumo_config.json&lt;/code&gt;.
If no such file exists, the following default configuration options are used:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ 
    &amp;quot;updateInterval&amp;quot;: 1000, 
    &amp;quot;sumoConfigurationFile&amp;quot;: &amp;quot;&amp;lt;scenarioName&amp;gt;.sumo.cfg&amp;quot;, 
    &amp;quot;exitOnInsertionError&amp;quot;: true, 
    &amp;quot;additionalSumoParameters&amp;quot;: &amp;quot;--time-to-teleport 0  --seed 100000&amp;quot;, 
    &amp;quot;subscriptions&amp;quot;: [ &amp;quot;roadposition&amp;quot;, &amp;quot;signals&amp;quot;, &amp;quot;emissions&amp;quot; ],
    &amp;quot;subscribeToAllVehicles&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Read the detailed documentation of the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/sumo_config/&#34;&gt;SUMO Configuration&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next to &lt;code&gt;sumo_config.json&lt;/code&gt;, the following configuration files are required for every SUMO simulation scenario:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   └─ sumo
      ├─ &amp;lt;scenarioName&amp;gt;.net.xml .............. SUMO Network file
      ├─ &amp;lt;scenarioName&amp;gt;.sumocfg .............. SUMO configuration file
      └─ sumo_config.json .................... Ambassador configuraition file]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The SUMO configuration consists of sumo specific config files and the sumo-ambassador configuration
file. The main configuration file name must end with the suffix *.sumocfg, which needs to refer to the network.
The network file is mandatory and can be generated with the &lt;code&gt;scenario-convert&lt;/code&gt; tool provided with Eclipse MOSAIC.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
&lt;p&gt;When you are coming from SUMO you might notice the missing route file (&lt;code&gt;*.rou.xml&lt;/code&gt;). This is because with Eclipse MOSAIC,
the traffic definition (definition of vehicles, flows, vehicle types) is usually part of the Mapping configuration file. Routes
usually are defined in the Application database. You can however add route files to your scenario and mosaic will handle
all vehicles in coherence.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Vehicle related parameters, such as acceleration, maximum speed, and the like, are configured via the Mapping configuration file. However,
some SUMO specific parameters, like the car following model can only be configured in the &lt;code&gt;sumo_config.json&lt;/code&gt;. For example, if you have
configured a vehicle type called &lt;code&gt;MyVehicle&lt;/code&gt; in the Mapping configuration, you can set specific parameters for this type as following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    ...,
    &amp;quot;additionalVehicleTypeParameters&amp;quot;: {
        &amp;quot;MyVehicle&amp;quot;: {
            &amp;quot;carFollowModel&amp;quot;: &amp;quot;IDM&amp;quot;,
            &amp;quot;lcKeepRight&amp;quot;: &amp;quot;10&amp;quot;
        },
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;All parameters have to be specified as Strings.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Further information about SUMO and its configuration can be found in the official SUMO wiki.&lt;/p&gt;
&lt;h2 id=&#34;using-the-sumo-gui-with-eclipse-mosaic&#34;&gt;Using the SUMO GUI with Eclipse MOSAIC&lt;/h2&gt;
&lt;p&gt;It is also possible to use the graphical interface of SUMO in order to visualize and interact with the simulation.
To
achieve this, Eclipse MOSAIC can be configured to start the GUI process of SUMO as the federate rather than the
command
line interface.&lt;/p&gt;
&lt;p&gt;In order to use the SUMO GUI the file &lt;code&gt;&amp;lt;mosaic&amp;gt;/etc/runtime.json&lt;/code&gt; needs to be edited.
Here, the entry
&lt;code&gt;org.eclipse.mosaic.fed.sumo.ambassador.SumoAmbassador&lt;/code&gt; must be
replaced with
&lt;code&gt;org.eclipse.mosaic.fed.sumo.ambassador.SumoGuiAmbassador&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Keep in mind to launch Eclipse MOSAIC with the argument &lt;code&gt;-w 0&lt;/code&gt; in order to disable the watchdog timer.
Otherwise, it
would shut down Eclipse MOSAIC if the simulation is paused in the SUMO GUI.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;using-libsumo-with-eclipse-mosaic&#34;&gt;Using LibSumo with Eclipse MOSAIC&lt;/h2&gt;
&lt;p&gt;The coupling between MOSAIC and SUMO is implemented in two ways. The default implementation uses
a socket-based API provided by SUMO, short TraCI. This interface has been well-established over the recent years
and integrates very well with MOSAIC. The main disadvantage of this method is, that it uses a socket to
transmit all the simulation data from SUMO to MOSAIC, even if SUMO runs on the very same machine. This
may result in a bottleneck and slows down the simulation especially for large-scale scenarios.&lt;/p&gt;
&lt;p&gt;To overcome this, there is a second method to couple SUMO and MOSAIC with each other. This integrates
SUMO as a dynamic linked library into MOSAIC, which results in a much faster data exchange. In order
to get this running, you need to follow these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure &lt;code&gt;SUMO_HOME&lt;/code&gt; environment variable is set correctly to your SUMO installation.&lt;/li&gt;
&lt;li&gt;Check, if there&amp;rsquo;s a &lt;code&gt;bin/libsumojni.dll&lt;/code&gt; or &lt;code&gt;bin/liblibsumojni.so&lt;/code&gt; file in your SUMO installation directory. If not, you might
need to install the &amp;ldquo;extras&amp;rdquo; release bundle of SUMO (Windows), or you need to re-build SUMO from sources and activate
the build of libsumo (see &lt;a href=&#34;https://sumo.dlr.de/docs/Libsumo.html#building_it)&#34;&gt;https://sumo.dlr.de/docs/Libsumo.html#building_it)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Only the recent SUMO version (1.20.0) is supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If these pre-requisites are met, you can activate this feature editing the file &lt;code&gt;&amp;lt;mosaic&amp;gt;/etc/runtime.json&lt;/code&gt;.
Here, the entry
&lt;code&gt;org.eclipse.mosaic.fed.sumo.ambassador.SumoAmbassador&lt;/code&gt; must be
replaced with
&lt;code&gt;org.eclipse.mosaic.fed.sumo.ambassador.LibSumoAmbassador&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Please be aware that this feature is still experimental. Also, some SUMO commands are not yet supported
(retrieving leader information, partly missing information about traffic lights and induction loops).&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;adding-vehicles&#34;&gt;Adding Vehicles&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;SumoAmbassador&lt;/code&gt; handles vehicles added via Mapping (&lt;em&gt;mapping vehicles&lt;/em&gt;) and via SUMO route files (&lt;em&gt;sumo vehicles&lt;/em&gt;).
There are however some caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Mapping vehicles&lt;/em&gt; can drive on routes specified in route files, however &lt;em&gt;sumo vehicles&lt;/em&gt; can&amp;rsquo;t drive on routes specified in the scenario
database&lt;/li&gt;
&lt;li&gt;In order to configure an application mapping for &lt;em&gt;sumo vehicles&lt;/em&gt;, you can either use the &lt;code&gt;prototypes&lt;/code&gt; sections for single type mapping, or the &lt;code&gt;typeDistribution&lt;/code&gt; section for choosing between multiple mappings by weight. It is currently not possible to map applications on specific vehicles, unless they have a distinctive vehicle type name.&lt;/li&gt;
&lt;li&gt;IDs of your &lt;em&gt;sumo vehicles&lt;/em&gt; will be replaced on MOSAIC side with internal IDs starting with &lt;code&gt;veh_&lt;/code&gt; prefix. Keep this in mind when your applications create log files or during debugging.&lt;/li&gt;
&lt;li&gt;The vehicle types defined in Mapping and defined in route files can&amp;rsquo;t share the same names&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This duality of adding vehicles has some powerful use cases. For example, you can use an existing SUMO scenario and add your own
traffic via MOSAIC and equip all vehicles with applications.&lt;/p&gt;
&lt;h2 id=&#34;deep-dive-route-files--additional-files&#34;&gt;Deep dive: Route Files / Additional Files&lt;/h2&gt;
&lt;p&gt;In SUMO the route files (&lt;code&gt;&amp;lt;..&amp;gt;.rou.xml&lt;/code&gt;) fulfill three main purposes supported by Eclipse MOSAIC:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Define vehicle types.&lt;/li&gt;
&lt;li&gt;Define routes for vehicles.&lt;/li&gt;
&lt;li&gt;Define vehicle departures to spawn vehicles with defined types (1.) on defined routes (2.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These definitions can also be done in additional files (&lt;code&gt;&amp;lt;...&amp;gt;.add.xml&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Route and vehicle departure definitions can also be handled by SUMO&amp;rsquo;s &lt;strong&gt;Tr&lt;/strong&gt;affic &lt;strong&gt;C&lt;/strong&gt;ontrol &lt;strong&gt;I&lt;/strong&gt;nterface (TraCI), which is also
the way Eclipse MOSAIC adds them to the simulation. This has the advantage that it can be done at runtime leading to a smaller overhead
before simulation start. Vehicle types however have to be defined in a route file, or an additional file before simulation start,
additional files have the advantage, that they are loaded before route files, which is helpful for our use case.
We write a new additional file (&lt;code&gt;mosaic_types.add.xml&lt;/code&gt;), which contains types specified in Mapping and merges them
with the aforementioned &lt;code&gt;additionalVehicleTypeParameters&lt;/code&gt; (Note: these are not validated in any form). The image below shows
a schematic view of how the configuration files and RTI components interact with each other.















&lt;figure id=&#34;figure-schematic-overview-of-vehicle-type-handling-in-eclipse-mosaic&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/sumo_route_files.svg&#34; data-caption=&#34;Schematic overview of vehicle type handling in Eclipse MOSAIC&#34;&gt;


  &lt;img src=&#34;../images/sumo_route_files.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Schematic overview of vehicle type handling in Eclipse MOSAIC
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;access-sumo-traci-from-applications&#34;&gt;Access SUMO TraCI From Applications&lt;/h2&gt;
&lt;p&gt;If SUMO is used as a traffic simulator and a special functionality is required, the &lt;code&gt;sendSumoTraciRequest&lt;/code&gt;
function in the &lt;code&gt;OperatingSystem&lt;/code&gt; can be used.&lt;/p&gt;
&lt;p&gt;The function expects a string (a unique identifier which will be assigned to the response) and a byte array
(representing the complete Traffic Control Interface (TraCI) request including the header). The message
identifier can be an empty string.&lt;/p&gt;
&lt;p&gt;In all cases the command will trigger a response. The application can receive the response from the
method &lt;code&gt;onSumoTraciResult&lt;/code&gt;. This method will receive a &lt;code&gt;SumoTraciResult&lt;/code&gt;
object. This response contains the specified identifier. The application must handle the
identification process of the response itself.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Be careful when using this interface and the TraCI commands. The
commands are delivered to TraCI without any prior checks.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;You can find the example application SumoTraciInteractionApp
in the additional examples bundle on the &lt;a href=&#34;https://www.dcaiti.tu-berlin.de/research/simulation/download/&#34; target=&#34;_blank&#34;&gt;DCAITI website&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Variable Message Signs Simulator</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/vms_simulator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/vms_simulator/</guid>
      <description>&lt;p&gt;The VMS Simulator allows to define variable message signs on top of the existing traffic simulation. An additional
application for vehicles allows them to react upon VMS, which can be dynamically controlled.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;The &lt;strong&gt;VMS Simulator&lt;/strong&gt; is part of &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;The VMS Simulator extends simulations with variable message signs (VMS), which could by dynamically controlled. A VMS can be placed anywhere along a road and
has, amongst others, the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Type&lt;/em&gt; for different traffic sign semantics,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Road and lane(s)&lt;/em&gt; it corresponds to,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Visibility&lt;/em&gt; as a value telling how well a sign is visible for road users&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The concept of a flexible sign type allows testing future traffic signs which are not existent at the moment and also common VMS types like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speed limit signs&lt;/li&gt;
&lt;li&gt;Lane assignment signs (assigns a list of allowed vehicle types to a lane - e.g. Busses, Taxis or even Automated Vehicles)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any properties of a VMS, beside its position and type, can be changed during the simulation.&lt;/p&gt;
&lt;p&gt;In each simulation step the VMS Simulator informs vehicles about any VMS that is inside their sight distance. How
vehicles react on VMS can be modeled with the &lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_simulator&#34; title=&#34;Application Simulator&#34;&gt;Application Simulator&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;To enable vehicles to react to VMS in your simulation, your scenario must include the following additional files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;scenario-name&amp;gt;/traffic-signs/traffic_signs_config.json&lt;/code&gt;: General configuration of the ambassador.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;scenario-name&amp;gt;/traffic-signs/signs.xml&lt;/code&gt;: Detailed configuration of all available variable message signs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;scenario-name&amp;gt;/application/TrafficSignsVehicleApp.jar&lt;/code&gt;: The jar file which contains the vehicle application to be able to react on VMS.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;scenario-name&amp;gt;/application/TrafficSignsVehicleApp.json&lt;/code&gt;: Configuration for the vehicle application to react on VMS.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;enable-vms-ambassador&#34;&gt;Enable VMS Ambassador&lt;/h4&gt;
&lt;p&gt;To enable the VMS Ambassador in your simulation activate it in &lt;code&gt;&amp;lt;scenario-name&amp;gt;/scenario_config.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;{
   ...,
    &amp;quot;federates&amp;quot;: {
        &amp;quot;application&amp;quot;: true,
        &amp;quot;sumo&amp;quot;: true,
        &amp;quot;traffic-signs&amp;quot;: true
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;configure-the-vms-ambassador&#34;&gt;Configure the VMS Ambassador&lt;/h4&gt;
&lt;p&gt;Configuring the Traffic Sign Ambassador in &lt;code&gt;&amp;lt;scenario-name&amp;gt;/traffic-signs/traffic_signs_config.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    // Name of the XML file which contains the traffic signs
    &amp;quot;signsFilename&amp;quot;: &amp;quot;signs.xml&amp;quot;,

    // Path to the scenario database
    &amp;quot;database&amp;quot;: &amp;quot;../application/&amp;lt;scenario-name&amp;gt;.db&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;define-vms&#34;&gt;Define VMS&lt;/h4&gt;
&lt;p&gt;Currently implemented traffic signs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lane Assignment Sign&lt;/strong&gt;
Lanes can be assigned to a specific vehicle type (Bus, Taxi, Autonomous Vehicle,&amp;hellip;).
&lt;ul&gt;
&lt;li&gt;Vehicles that are not of the allowed vehicle class will try to change to a different lane as soon as possible.&lt;/li&gt;
&lt;li&gt;If a Taxi drives on the leftmost lane, but the rightmost is assigned to Taxis only, it tries to change to that lane as soon as possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Speed Limit Signs&lt;/strong&gt;
Speed limits can be set for specific streets or even lanes.
&lt;ul&gt;
&lt;li&gt;Vehicles driving on a lane with a speed limit change their maximum speed (SUMO parameter) to the value the sign specifies.&lt;/li&gt;
&lt;li&gt;When vehicles change lane they adapt the new speed limit.&lt;/li&gt;
&lt;li&gt;Vehicles do not prefer faster lanes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Generally, vehicles try to execute these maneuvers as soon as they see the traffic sign.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Signs have a visibility that defines how good the sign is visible to drivers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variable traffic signs can be changed during the simulation, i.e., by a Traffic Management Center (TMC) or other simulation units.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The area of validity of a sign ends as soon another sign is placed downstream on the road and just before any on-ramp or crossing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;x,y&lt;/code&gt; coordinates of signs in the XML definition are SUMO coordinates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The visibility of signs is defined between &lt;code&gt;0.0&lt;/code&gt; (not visible) and &lt;code&gt;1.0&lt;/code&gt; (very good visible).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A vehicle only reacts on an update of a variable traffic signs if the sign is in front of the vehicle. If the sign is behind the vehicle and it is updated, the vehicle misses the update.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a vehicle is not allowed to drive on any lane of the road, it stops.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;The file &lt;code&gt;&amp;lt;scenario-name&amp;gt;/traffic-signs/signs.xml&lt;/code&gt; stores all traffic signs of the scenario.&lt;/p&gt;
&lt;p&gt;The following examples show how to define speed limit signs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;trafficsigns&amp;gt;
    &amp;lt;!-- Speed limit of 130km/h on all lanes of the specified edge. Not variable. --&amp;gt;
    &amp;lt;speedLimit id=&amp;quot;speed-limit-sign-1&amp;quot;
                x=&amp;quot;51421.50&amp;quot; y=&amp;quot;58297.29&amp;quot;
                edge=&amp;quot;4822486_685163613_31022629_31022620&amp;quot;
                visibility=&amp;quot;1.0&amp;quot;
                variable=&amp;quot;false&amp;quot;
                limit=&amp;quot;36.1&amp;quot;&amp;gt;
    &amp;lt;/speedLimit&amp;gt;

    &amp;lt;!-- Three variable speed limit signs for each lane of the edge with different speed limits. --&amp;gt;
    &amp;lt;speedLimit id=&amp;quot;speed-limit-sign-2&amp;quot;
                x=&amp;quot;51421.50&amp;quot; y=&amp;quot;58297.29&amp;quot;
                edge=&amp;quot;4822486_685163613_31022629_31022620&amp;quot;
                visibility=&amp;quot;1.0&amp;quot;
                variable=&amp;quot;true&amp;quot;
                limit=&amp;quot;36.1&amp;quot; &amp;gt;
        &amp;lt;lane index=&amp;quot;0&amp;quot; limit=&amp;quot;27.7&amp;quot; /&amp;gt; &amp;lt;!-- 100km/h on lane 0 --&amp;gt;
        &amp;lt;lane index=&amp;quot;1&amp;quot; limit=&amp;quot;33.3&amp;quot; /&amp;gt; &amp;lt;!-- 120km/h on lane 1 --&amp;gt;
        &amp;lt;lane index=&amp;quot;2&amp;quot; limit=&amp;quot;36.1&amp;quot; /&amp;gt; &amp;lt;!-- 130km/h on lane 2 --&amp;gt;
    &amp;lt;/speedLimit&amp;gt;
&amp;lt;/trafficsigns&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following examples show how to define lane assignment signs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;trafficsigns&amp;gt;
    &amp;lt;!-- Variable lane assignment sign that assignes all lanes of the specified edge to all vehicle classes.
            With this sign previous lane assignment signs can be neutraized.
            The sign has also a bad visibility. --&amp;gt;
    &amp;lt;laneAssignment id=&amp;quot;lane-assignment-sign-1&amp;quot;
                    x=&amp;quot;51419.73&amp;quot; y=&amp;quot;58294.31&amp;quot;
                    edge=&amp;quot;4822486_685163613_31022629_31022620&amp;quot;
                    visibility=&amp;quot;0.3&amp;quot;
                    variable=&amp;quot;true&amp;quot;
                    allowedVehicleClasses=&amp;quot;ALL&amp;quot; &amp;gt;
    &amp;lt;/laneAssignment&amp;gt;

    &amp;lt;!-- Three variable lane assignment signs with different vehicle class assignments per lane. --&amp;gt;
    &amp;lt;laneAssignment id=&amp;quot;lane-assignment-sign-2&amp;quot;
                    x=&amp;quot;51419.73&amp;quot; y=&amp;quot;58294.31&amp;quot;
                    edge=&amp;quot;4822486_685163613_31022629_31022620&amp;quot;
                    visibility=&amp;quot;1.0&amp;quot;
                    variable=&amp;quot;true&amp;quot;
                    allowedVehicleClasses=&amp;quot;ALL&amp;quot; &amp;gt;
        &amp;lt;lane index=&amp;quot;0&amp;quot; allowedVehicleClasses=&amp;quot;Taxi Bus&amp;quot; /&amp;gt; &amp;lt;!-- The rightmost lane is assigned to busses and taxis only. --&amp;gt;
        &amp;lt;lane index=&amp;quot;1&amp;quot; allowedVehicleClasses=&amp;quot;Taxi&amp;quot; /&amp;gt; &amp;lt;!-- The center lane is assigned to taxis only. --&amp;gt;
        &amp;lt;lane index=&amp;quot;2&amp;quot; allowedVehicleClasses=&amp;quot;ALL&amp;quot; /&amp;gt; &amp;lt;!-- on the leftmost lane all vehicle types are allowed to drive. --&amp;gt;
    &amp;lt;/laneAssignment&amp;gt;
&amp;lt;/trafficsigns&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;let-vehicles-react-on-vms&#34;&gt;Let Vehicles React on VMS&lt;/h4&gt;
&lt;p&gt;To equip vehicles with the &lt;code&gt;TrafficSignsVehicleApp&lt;/code&gt; you need to add &lt;code&gt;com.dcaiti.mosaic.app.examples.trafficsigns.TrafficSignsVehicleApp&lt;/code&gt; to the applications list of the vehicle in the &lt;code&gt;mapping/mapping_config.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can specify the duration after which vehicles shall react on traffic signs by adding the &lt;code&gt;reactionTime&lt;/code&gt; parameter (in seconds) to the application in &lt;code&gt;mapping_config.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;applications&amp;quot;: [
    &amp;quot;com.dcaiti.mosaic.app.examples.trafficsigns.TrafficSignsVehicleApp(10)&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You also may want to change the mean sight distance of vehicles and define a deviation for that.
You can do this by creating the file &lt;code&gt;application/TrafficSignsVehicleApp.json&lt;/code&gt; and edit it as following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    // Mean sight distance of a driver in meters
    &amp;quot;meanSightDistance&amp;quot;: 400.0,

    // Max. deviation of sight distance in meters
    &amp;quot;sightDistanceDeviation&amp;quot;: 20.0
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;This configuration affects each vehicle that is equipped with the &lt;code&gt;TrafficSignsVehicleApp&lt;/code&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;change-vms-during-simulation&#34;&gt;Change VMS During Simulation&lt;/h3&gt;
&lt;p&gt;With the following code snippets, you can change VMS dynamically during simulation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;long timeToSend = 150 * TIME.SECOND;
String signId = &amp;quot;speed-limit-sign-1&amp;quot;; // As defined in &amp;lt;scenario-name&amp;gt;/trafficsigns/signs.xml
double newSpeedLimit = 13.89; // in m/s
TrafficSignSpeedLimitChange interaction = new TrafficSignSpeedLimitChange(
    timeToSend,
    signId,
    newSpeedLimit
);
getOs().sendInteractionToRti(interaction);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Change variable speed limit sign.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;long timeToSend = 160 * TIME.SECOND;
String signId = &amp;quot;lane-assignment-sign-2&amp;quot;; // As defined in &amp;lt;scenario-name&amp;gt;/trafficsigns/signs.xml
int laneIndex = 0;
List&amp;lt;VehicleClass&amp;gt; allowedVehicleClasses = new ArrayList&amp;lt;&amp;gt;();
allowedVehicleClasses.add(VehicleClass.ElectricVehicle);
TrafficSignLaneAssignmentChange interaction = new TrafficSignLaneAssignmentChange(
    timeToSend,
    signId,
    laneIndex, // NOTE: If you don&#39;t provide a lane index here, all lanes are assigned to electric vehicles only.
    allowedVehicleClasses
);
getOs().sendInteractionToRti(interaction);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Change variable lane assignment sign. Allow only Electric Vehicles for a specific lane.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The operating system of the traffic management centers (TMC&amp;rsquo;s) also has a built-in support to adjust the VMS&amp;rsquo;s. Using a negative lane index with speed assignments, will address all lanes. Here are some function call sequence examples with their signature that you can use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;getOs().changeVariableMessageSignState(String signId, int laneIndex).openOnlyForVehicleClasses(VehicleClass... vehicleClass);
getOs().changeVariableMessageSignState(String signId, int laneIndex).setMaxSpeed(double speed);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>PHABMACS - PHysics Aware Behavior Modeling Advanced Car Simulator</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/traffic_simulator_phabmacs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/traffic_simulator_phabmacs/</guid>
      <description>&lt;p&gt;The Physics Aware Behavior Modelling Advanced Car Simulator (PHABMACS) provides a sophisticated framework for testing ADAS within
a simulated environment. Vehicles are simulated with advanced models providing them with realistic driving dynamics
within normal traffic situations.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;&lt;strong&gt;PHABMACS&lt;/strong&gt; can be obtained as part of &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;















&lt;figure id=&#34;figure-procedural-generated-environment-model-in-phabmacs&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/phabmacs_overview_old.png&#34; data-caption=&#34;Procedural generated environment model in PHABMACS&#34;&gt;


  &lt;img src=&#34;../images/phabmacs_overview_old.png&#34; alt=&#34;&#34; width=&#34;85%&#34; &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Procedural generated environment model in PHABMACS
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Network Simulator OMNeT&#43;&#43;</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_omnetpp/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_omnetpp/</guid>
      <description>&lt;p&gt;&lt;strong&gt;OMNeT++&lt;/strong&gt; is a simulation platform for discrete-event systems. Even though it is primarily targeted at simulating computer networks and
distributed systems, it cannot be used without any extensions for wireless communication. For this kind of simulations, external model frameworks have to be included.&lt;/p&gt;
&lt;p&gt;For the integration to Eclipse MOSAIC the &lt;strong&gt;INET&lt;/strong&gt; framework is selected as it provides all models necessary for simulating
Vehicle-2-X communication in ad-hoc mode (based on IEEE 1609 and IEEE 802.11(p)) and even more.
For more information on the &lt;strong&gt;INET&lt;/strong&gt; extension you should look closer on the 




&lt;a href=&#34;https://inet.omnetpp.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Operating System&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;GNU/Linux (recommended), &lt;em&gt;macOS&lt;/em&gt;, &lt;em&gt;Microsoft Windows (with mingw, WSL, Docker)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Written in&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;C++ and NED language&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;free to use for academic use (GPL-like), commercial license available&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;OMNeT++   




&lt;a href=&#34;https://www.omnetpp.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.omnetpp.org&lt;/a&gt;&lt;br&gt; INET     




&lt;a href=&#34;https://inet.omnetpp.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://inet.omnetpp.org&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Supported version(s)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;OMNeT++ 5.5.1 &lt;br&gt;INET 4.1.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;libprotobuf 3.7.0&lt;br&gt; protoc &lt;br&gt; bison&lt;br&gt; flex&lt;br&gt; gcc &lt;br&gt; python3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;The official project provides an Windows installation based on mingw, but we don&amp;rsquo;t support this in our setup.&lt;/p&gt;
&lt;p&gt;If you use Windows, please consider&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the installation in 





  
  

&lt;a href=&#34;#installation-in-docker-environment&#34;&gt;Docker environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the 




&lt;a href=&#34;https://docs.microsoft.com/windows/wsl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Windows Subsystem for Linux&lt;/a&gt; or the installation of Linux in a virtual machine environment, such as
&lt;a href=&#34;https://www.vmware.com/products/workstation-player.html&#34; target=&#34;_blank&#34;&gt;VMware&lt;/a&gt; or &lt;a href=&#34;https://www.virtualbox.org/&#34; target=&#34;_blank&#34;&gt;VirtualBox&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We prepared an installation script, which manages most of the required work. The script provides two installation types
tailored to the needs of USERs or even DEVELOPERs. With the additional method of using Docker or the purely manual installation,
the following options are possible:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;





  
  

&lt;a href=&#34;#installation-for-users&#34;&gt;USER&lt;/a&gt;&lt;br&gt;(installation script)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This installation type addresses those who only want to use the &lt;strong&gt;OMNeT++&lt;/strong&gt; network simulator for simulations.&lt;br&gt;Network configurations can also be adjusted.&lt;br&gt;&lt;br&gt;If you install the federate with this installation type, &lt;strong&gt;OMNeT++ 5.5.1&lt;/strong&gt; and &lt;strong&gt;INET 4.1.1&lt;/strong&gt; will automatically be installed inside &lt;code&gt;&amp;lt;mosaic&amp;gt;/bin/fed/omnetpp&lt;/code&gt; during the installation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;





  
  

&lt;a href=&#34;#installation-for-developers&#34;&gt;DEVELOPER&lt;/a&gt;&lt;br&gt;(installation script)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The installation for developers addresses those who want to make changes or extend the MOSAIC OMNeT++ Federate.&lt;br&gt;&lt;br&gt;This installation type awaits that &lt;strong&gt;OMNeT++ 5.5.1&lt;/strong&gt; is already installed on your system and&lt;br&gt;- &lt;code&gt;PATH&lt;/code&gt; contains &lt;code&gt;/path/to/omnetpp/bin&lt;/code&gt;&lt;br&gt;- &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; contains &lt;code&gt;/path/to/omnetpp/lib&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;





  
  

&lt;a href=&#34;#installation-in-docker-environment&#34;&gt;Docker&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This installation type addresses those who only want to use the &lt;strong&gt;OMNeT++&lt;/strong&gt; network simulator for simulations.&lt;br&gt;Network configurations can also be adjusted.&lt;br&gt;&lt;br&gt;If you install the federate with this installation type, &lt;strong&gt;OMNeT++ 5.5.1&lt;/strong&gt; and &lt;strong&gt;INET 4.1.1&lt;/strong&gt; will automatically be installed bundled as a Docker image.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;manual installation&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This type addresses developers. You can install and build everything manually without the use of the installer script. See 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/extending_mosaic/omnetpp_details/&#34;&gt;Extending MOSAIC OMNeT++ Federate&lt;/a&gt; for details on federate build process.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;If you already have &lt;strong&gt;OMNeT++ 5.5.1&lt;/strong&gt; and &lt;strong&gt;INET 4.1.1&lt;/strong&gt; installed on your
system, but you simply want to use &lt;strong&gt;OMNeT++&lt;/strong&gt; for simulations with Eclipse MOSAIC without developing further the MOSAIC
OMNeT++ Federate, you may also choose the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_omnetpp/#installation-for-developers&#34;&gt;installation for developers&lt;/a&gt;
to avoid multiple installations of &lt;strong&gt;OMNeT++&lt;/strong&gt; and &lt;strong&gt;INET&lt;/strong&gt; on your system.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Follow the links and download the source code of OMNeT++, INET and the MOSAIC OMNeT++ Federate:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Software&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Version&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;OMNeT++&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5.5.1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;




&lt;a href=&#34;https://github.com/omnetpp/omnetpp/releases/tag/omnetpp-5.5.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/omnetpp/omnetpp/releases/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;INET&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4.1.1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;




&lt;a href=&#34;https://github.com/inet-framework/inet/releases/tag/v4.1.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/inet-framework/inet/releases&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;MOSAIC OMNeT++ Federate&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;24.1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;




&lt;a href=&#34;https://github.com/mosaic-addons/omnetpp-federate/releases/tag/24.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/mosaic-addons/omnetpp-federate/releases&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The installer script is located in the OMNeT++ federate folder&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ mosaic/bin/fed/
   └─ omnetpp
      ├─ Dockerfile.sh ..................... Dockerfile for OMNeT++ federate
      ├─ omnet_installer.sh ................ Installation script for OMNeT++
      └─ rebuild_federate.sh ............... Rebuild script to ease compilation process for Developers
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Available parameters of &lt;code&gt;omnet_installer.sh&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Parameter&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Value&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-t&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--installation-type&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;lt;INSTALLATION_TYPE&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Either &lt;code&gt;USER&lt;/code&gt; or &lt;code&gt;DEVELOPER&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-o&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--omnetpp&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;lt;PATH_TO_OMNET_TGZ&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Provide the archive containing the OMNeT++ source. If not given, the script tries to download an appropriate version.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-i&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--inet&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;lt;PATH_TO_INET_TGZ&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Provide the archive containing the inet source code. If not given, the script tries to download an appropriate version.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-f&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--federate&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;lt;PATH_TO_FEDERATE_ZIP&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Provide the archive containing the OMNeT++-federate and patches for coupling OMNeT++ to Eclipse MOSAIC. If not given, the omnetpp-federate is downloaded by this installation script.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-so&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--skip-omnetpp&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Skip the installation of OMNeT++&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-si&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--skip-inet&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Skip the installation of INET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-q&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Less output and no interaction required&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-j&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;lt;NUMBER_OF_THREADS&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Enables make to use the given number of compilation threads.&lt;br&gt;Per default your systems maximum is selected automatically.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-u&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--uninstall&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Uninstalls the OMNeT++ federate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-h&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Shows this usage screen&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;installation-for-users&#34;&gt;Installation for Users&lt;/h3&gt;
&lt;p&gt;Run the installation script (this takes a few minutes):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd &amp;lt;mosaic&amp;gt;/bin/fed/omnetpp
chmod +x omnet_installer.sh`
./omnet_installer.sh \
    --installation-type USER \
    --omnetpp /path/to/omnetpp-5.5.1-src.tgz \
    --inet /path/to/inet-4.1.1-src.tgz \
    --federate /path/to/omnetpp-federate-24.1.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The parameters &lt;code&gt;--omnetpp&lt;/code&gt;, &lt;code&gt;--inet&lt;/code&gt;, and &lt;code&gt;--federate&lt;/code&gt; are optional. If not given, the respective source code package will be downloaded by the installation script.&lt;br&gt;
The installation script should terminate with &lt;code&gt;SUCESS: The MOSAIC OMNeT++ Federate was successfully installed.&lt;/code&gt; otherwise the installation failed.&lt;/p&gt;
&lt;h3 id=&#34;installation-for-developers&#34;&gt;Installation for Developers&lt;/h3&gt;
&lt;p&gt;Install OMNeT++ and add the correct paths:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~
tar xvfz omnetpp-5.5.1-src-linux.tgz
cd omnetpp-5.5.1
source setenv
vim ~/.bashrc
    # export PATH=$HOME/omnetpp-5.5.1/bin:$PATH
    # export LD_LIBRARY_PATH=$HOME/omnetpp-5.5.1/lib
./configure WITH_TKENV=no WITH_QTENV=no WITH_OSG=no  WITH_OSGEARTH=no WITH_PARSIM=no
make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the installation script (this takes a few minutes):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd &amp;lt;mosaic&amp;gt;/bin/fed/omnetpp
chmod +x omnet_installer.sh`
./omnet_installer.sh \
    --installation-type DEVELOPER \
    --federate /path/to/omnetpp-federate-24.1.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The installation script should terminate with &lt;code&gt;SUCCESS: The MOSAIC OMNeT++ Federate was successfully installed.&lt;/code&gt; otherwise the installation failed.&lt;/p&gt;
&lt;p&gt;Please continue reading 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/extending_mosaic/omnetpp_details/&#34;&gt;here&lt;/a&gt; for more details on setting up a development environment for the OMNeT++ federate.&lt;/p&gt;
&lt;h3 id=&#34;installation-in-docker-environment&#34;&gt;Installation in Docker environment&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;This is an experimental feature. Please refer to our mailing list if you experience any problems.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This guide gives instructions to execute the OMNeT++ federate inside a docker container. If you already installed
OMNeT++ on your machine following the steps before, you can skip this section.&lt;/p&gt;
&lt;p&gt;Docker is a new approach to execute software. More precisely, it &amp;ldquo;wraps software in a complete filesystem
that contains everything it needs to run: code, runtime, system tools, and system libraries&amp;rdquo;. As a result, the
software is executed within a container and its execution does not rely on the environment the container is running in.&lt;/p&gt;
&lt;p&gt;In context of Eclipse MOSAIC, this approach allows to execute OMNeT++ within a docker container. The user does not
need to manually install OMNeT++ and can even run OMNeT++ on Windows hosts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Docker ≥ 1.13 on your machine.&lt;/li&gt;
&lt;li&gt;To get everything to work, please make sure to execute the following steps depending on your operating system:
&lt;ul&gt;
&lt;li&gt;Windows - In the settings, share the drive where Eclipse MOSAIC is installed on. You may need to restart docker in the reset tab.&lt;/li&gt;
&lt;li&gt;Linux - Make sure your user account belongs to the unix-group &lt;code&gt;docker&lt;/code&gt;. You may need to restart your machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Switch to the location of the Dockerfile in &lt;code&gt;&amp;lt;mosaic&amp;gt;/bin/fed/omnetpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Download &lt;code&gt;inet-4.1.1-src.tgz&lt;/code&gt; and &lt;code&gt;omnetpp-5.5.1-src-linux.tgz&lt;/code&gt; and place them in &lt;code&gt;&amp;lt;mosaic&amp;gt;/bin/fed/omnetpp&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Execute the following command on command line:
&lt;code&gt;docker build -t omnetpp-federate&lt;/code&gt; .
This could take a while to finish.&lt;/li&gt;
&lt;li&gt;Enter the name of the docker image &lt;code&gt;etc/runtime.json&lt;/code&gt; in the &lt;code&gt;omnetpp&lt;/code&gt;-section into the property &lt;code&gt;dockerImage&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;federates&amp;quot;: [
   ...
   {
      &amp;quot;id&amp;quot;: &amp;quot;omnetpp&amp;quot;,
      &amp;quot;dockerImage&amp;quot;: &amp;quot;omnetpp-federate&amp;quot;,
      ...
   },
   ...
]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;If MOSAIC cannot open a connection to the federate, try to add the option &lt;code&gt;-Dmosaic.no-detach=true&lt;/code&gt; to the java call in the mosaic.sh file on Linux, or
&lt;code&gt;-Dmosaic.no-detach=false&lt;/code&gt; in the mosaic.bat file on Windows.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;To use OMNeT++ as network simulator in an Eclipse MOSAIC simulation, open &lt;code&gt;&amp;lt;scenarioName&amp;gt;/scenario_config.json&lt;/code&gt; and enable OMNeT++:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;federates&amp;quot;: {
   ...
   &amp;quot;omnetpp&amp;quot;: true,
   ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, when you run this scenario, Eclipse MOSAIC will automatically start the MOSAIC OMNeT++ Federate.&lt;/p&gt;
&lt;p&gt;The main configuration of the MOSAIC OMNeT++ Federate is done within the configuration files &lt;code&gt;omnetpp.ini&lt;/code&gt; and &lt;code&gt;omnetpp_config.json&lt;/code&gt; in the scenario:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   └─ omnetpp
      ├─ omnetpp.ini ...................... OMNeT++ federate configuration file
      └─ omnetpp_config.json .............. Ambassador configuration file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;omnetpp_config.json&lt;/code&gt; mainly allows the configuration of a filter for different message routing options employed in the ambassador.
The current integration of OMNeT++/INET does not support all combinations (e.g. no TCP is possible for ad-hoc communication).
Accordingly, changes in this config would require adaptions in the OMNeT++/INET integration as well
and are therefore only recommended developers not for users.&lt;/p&gt;
&lt;p&gt;The whole OMNeT++ specific configuration is done via the &lt;code&gt;omnetpp.ini&lt;/code&gt; file. It covers static parts for the
simulator coupling such as the specific Eclipse MOSAIC Event Scheduler and the ScenarioManager. Furthermore,
logging configurations and the typical parameters for the communication layers (MAC, PHY and Radio
Channel) are addressed. The communication parameters are different for vehicles and RSUs. Please refer
to the OMNeT++ documentation on the OMNeT++ homepage for further information about the structure
of the &lt;code&gt;omnetpp.ini&lt;/code&gt; file.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Network Simulator ns-3</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_ns3/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_ns3/</guid>
      <description>&lt;p&gt;As the successor of the well-known &lt;em&gt;Network Simulator 2&lt;/em&gt;, &lt;strong&gt;ns-3&lt;/strong&gt; is a discrete-event communication simulator for Internet systems,
wireless networks and more. In connection with Eclipse MOSAIC, especially the IEEE 802.11(p) capabilities are employed for Ad-hoc communication.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Operating system&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;GNU/Linux (recommended), &lt;em&gt;FreeBSD&lt;/em&gt;, &lt;em&gt;macOS&lt;/em&gt;, &lt;em&gt;Microsoft Windows (with WSL or Docker)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Written in&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;C++ (core) and Python (bindings)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Free software: GNU GPLv2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.nsnam.org/&#34; target=&#34;_blank&#34;&gt;http://www.nsnam.org/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Supported version(s)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;3.36.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;libprotobuf 3.3.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;libxml2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;libsqlite3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;ns-3 is primarily developed on and for GNU/Linux platforms.&lt;/p&gt;
&lt;p&gt;On other platforms like Windows you should consider&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the 




&lt;a href=&#34;https://docs.microsoft.com/windows/wsl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Windows Subsystem for Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the installation in 





  
  

&lt;a href=&#34;#installation-in-docker-environment&#34;&gt;Docker environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the installation of Linux in a virtual machine environment, such as
&lt;a href=&#34;https://www.vmware.com/products/workstation-player.html&#34; target=&#34;_blank&#34;&gt;VMware&lt;/a&gt; or &lt;a href=&#34;https://www.virtualbox.org/&#34; target=&#34;_blank&#34;&gt;VirtualBox&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information on how to set up ns-3 with Eclipse MOSAIC, please just refer to the following section. We
prepared an installation script, which manages most of the required work.&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;For &lt;strong&gt;ns3&lt;/strong&gt; on GNU/Linux platforms, the requirements to run basic simulations are a gcc or clang compiler and a Python interpreter.
For a complete list of required packages for different distributions, please refer to the ns-3 installation guide:
&lt;a href=&#34;https://www.nsnam.org/wiki/Installation&#34; target=&#34;_blank&#34;&gt;https://www.nsnam.org/wiki/Installation&lt;/a&gt;.
You most probably need the following packages to be installed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;gcc 
g++ 
cmake 
python3 
python3-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the &lt;strong&gt;ns3 installation script&lt;/strong&gt;
please make sure the following programs and libraries are installed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;protobuf-compiler
libxml2-dev
libsqlite3-dev
libprotobuf-dev&amp;gt;=3.3.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Watch out that the protobuf-compiler and libprotobuf-dev versions have to match.&lt;/p&gt;
&lt;h3 id=&#34;run-the-installation-script&#34;&gt;Run the installation script&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;ns-3 requires several packages to be installed on your computer. You will
need to ensure, that all required libraries are present on your system before proceeding. You
may need superuser permissions to install packages.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To ease the installation of ns-3 for Eclipse MOSAIC, the installation process has been delegated to an installation
script, called &lt;code&gt;ns3_installer.sh&lt;/code&gt; that can be found in the associated ns-3 federate folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ mosaic/bin/fed/
   └─ ns3
      ├─ Dockerfile.sh ................... Dockerfile for ns-3 federate
      └─ ns3_installer.sh ................ Installation script for ns-3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The ns-3 installation script accomplishes the following tasks:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download ns-3 tarball from the official sources&lt;/li&gt;
&lt;li&gt;Download the ns-3 federate for Eclipse MOSAIC.&lt;/li&gt;
&lt;li&gt;Apply a patch to ns-3 in order to make it work with Eclipse MOSAIC.&lt;/li&gt;
&lt;li&gt;Add the ns-3 federate to the waf build system.&lt;/li&gt;
&lt;li&gt;Configure and build the patched ns-3 with the ns-3 federate.
(Watch out that premake will throw &lt;code&gt;fatal error: ns3/application.h: No such file or directory&lt;/code&gt; but the installation is successful
anyways.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;In order to start the simulation, the following steps need to be performed:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set up the &lt;code&gt;ns3_federate_config.xml&lt;/code&gt;-file in the scenario folder (see section 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_ns3/#configuration&#34;&gt;Configuration&lt;/a&gt;). An example &lt;code&gt;ns3_federate_config.xml&lt;/code&gt; - file is shipped with the Tiergarten scenario.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t forget to enable ns-3 in the &lt;code&gt;scenario_config.json&lt;/code&gt; of your specific scenario, and the simulation can be started.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Using the installer script will reinstall (rebuild) ns-3 and the federate because it is designed for a user environment and not for federate development.
Read 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/extending_mosaic/ns3_setup/&#34;&gt;here&lt;/a&gt; for futher information on how to set up a development environment for the ns-3 federate&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;use-ns-3-federate-on-windows-with-wsl&#34;&gt;Use NS-3 federate on Windows with WSL&lt;/h3&gt;
&lt;p&gt;WSL, or &amp;ldquo;Windows Subsystem for Linux&amp;rdquo;, provides an environment for Windows users to run Linux based applications. With WSL, it is possible
to use the ns-3 federate, which is currently only compatible with Linux systems, in a Windows environment.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If not yet done, setup a WSL environment with a Ubuntu distribution. This environment must be the default WSL environment.&lt;/li&gt;
&lt;li&gt;Install the prerequisites like described above.&lt;/li&gt;
&lt;li&gt;In Windows, open the terminal in the &lt;code&gt;bin/fed/ns3&lt;/code&gt; directory of your MOSAIC installation.&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;wsl.exe ./ns3_installer.sh&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;installation-in-docker-environment&#34;&gt;Installation in Docker environment&lt;/h3&gt;
&lt;p&gt;This guide gives instructions to execute the ns-3 federate inside a docker container. If you already installed
ns-3 on your machine following the steps before, you can skip this section.&lt;/p&gt;
&lt;p&gt;Docker is a new approach to execute software. More precisely, it &amp;ldquo;wraps software in a complete filesystem
that contains everything it needs to run: code, runtime, system tools, and system libraries&amp;rdquo;. As a result, the
software is executed within a container and its execution does not rely on the environment the container is running in.&lt;/p&gt;
&lt;p&gt;In context of Eclipse MOSAIC, this approach allows to execute ns-3 within a docker container. The user does not
need to manually install ns-3 and can even run ns-3 on Windows hosts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Docker ≥ 1.13 on your machine.&lt;/li&gt;
&lt;li&gt;To get everything to work, please make sure to execute the following steps depending on your operating system:
&lt;ul&gt;
&lt;li&gt;Windows - In the settings, share the drive where Eclipse MOSAIC is installed on. You may need to restart docker in the reset tab.&lt;/li&gt;
&lt;li&gt;Linux - Make sure your user account belongs to the unix-group &lt;code&gt;docker&lt;/code&gt;. You may need to restart your machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Switch to the location of the Dockerfile in &lt;code&gt;&amp;lt;mosaic&amp;gt;/bin/fed/ns3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Execute the following command on command line: &lt;code&gt;docker build -t ns3-federate .&lt;/code&gt;&lt;br&gt;
This could take a while to finish.&lt;/li&gt;
&lt;li&gt;Enter the name of the docker image &lt;code&gt;etc/runtime.json&lt;/code&gt; in the &lt;code&gt;ns3&lt;/code&gt;-section into the property &lt;code&gt;dockerImage&lt;/code&gt;. Eclipse MOSAIC will then
start the docker container for you. If you try to run the docker container independently it will fail on startup, because the
configuration files in the folder &lt;code&gt;scratch&lt;/code&gt; are missing.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;federates&amp;quot;: [
   ...
   {
      &amp;quot;id&amp;quot;: &amp;quot;ns3&amp;quot;,
      &amp;quot;dockerImage&amp;quot;: &amp;quot;ns3-federate&amp;quot;,
      ...
   },
   ...
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can test the installation of your docker image with the Tiergarten scenario, by activating ns3 in the &lt;code&gt;scenario_config.json&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;If MOSAIC cannot open a connection to the federate, try to add the option &lt;code&gt;-Dmosaic.no-detach=true&lt;/code&gt; to the java call in the mosaic.sh file on Linux, or
&lt;code&gt;-Dmosaic.no-detach=false&lt;/code&gt; in the mosaic.bat file on Windows.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The whole ns-3 specific configuration is done via the files &lt;code&gt;ns3_config.json&lt;/code&gt; and &lt;code&gt;ns3_federate_config.xml&lt;/code&gt;
in the scenario folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   └─ ns3
      ├─ ns3_config.json ................. Ambassador configuration file.
      └─ ns3_federate_config.xml ......... Federate configuration file.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;ns3_config.json&lt;/code&gt; mainly allows the configuration of a filter for different message routing options employed in the ambassador.
The current integration of ns-3 does not support all combinations (e.g. no TCP is possible for ad-hoc communication).
Accordingly, changes in this config would require adaptions in the ns-3 integration as well
and are therefore only recommended developers not for users.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ns3_federate_config.xml&lt;/code&gt; allows the configuration of all modules in the IEEE 802.11(p) communication stack of ns-3.
The ns-3 propagation
module defines two generic interfaces, namely &lt;strong&gt;PropagationLossModel&lt;/strong&gt; and &lt;strong&gt;PropagationDelayModel&lt;/strong&gt;,
for the modelling of propagation loss respectively propagation delay.&lt;/p&gt;
&lt;p&gt;In the default &lt;code&gt;ns3_federate_config.xml&lt;/code&gt;, the Wi-Fi device uses the ns-3 standard propagation delay model
&lt;code&gt;ns3::ConstantSpeedPropagationDelayModel&lt;/code&gt; and the ns-3 standard propagation loss model
&lt;code&gt;ns3::FriisPropagationLossModel&lt;/code&gt;. Radio propagation models in ns-3 can easily be exchanged with
the ns-3 class registration system (see the ns-3 documentation for details). The Wi-Fi configuration
includes additional parameters, like sending power and antenna gain.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple Network Simulator (SNS)</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_sns/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_sns/</guid>
      <description>&lt;p&gt;The Simple Network Simulator (SNS) aims to provide simple and fast capabilities for the
transmission of V2X-messages using Ad-hoc communication. In order to stay performant the simulator makes abstractions
in certain places. Those abstractions will be discussed later on.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;This simulator does not need to be installed. It is delivered as part of the Eclipse MOSAIC installation package.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The SNS offers some configurability regarding the way transmissions are simulated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Main Configuration:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Parameter&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Default Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;maximumTtl&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the upper bound for the amount of hops a message can make. (Note: messages can have individual &lt;code&gt;ttl&lt;/code&gt;&amp;rsquo;s)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;singlehopRadius&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Fallback radius to be used for transmission, if no radius is defined in the &lt;code&gt;AdhocConfiguration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;double&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;509.4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;singlehopDelay&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A delay configuration for the direct communication between two nodes. (





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/extending_mosaic/delay_models/&#34;&gt;See here&lt;/a&gt;)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Delay&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ConstantDelay&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;singlehopTransmission&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This contains the transmission configurations for &lt;code&gt;lossProbability&lt;/code&gt; and &lt;code&gt;maxRetries&lt;/code&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CTransmission&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;adhocTransmissionModel&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A class extending &lt;code&gt;AdhocTransmissionModel&lt;/code&gt;, this will decide the logic for transmissions.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AdhocTransmissionModel&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;SimpleAdhoc TransmissionModel&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;On default the SNS will use the &lt;code&gt;SimpleAdhocTransmissionModel&lt;/code&gt; with a &lt;code&gt;ConstantDelay&lt;/code&gt; using 0 as delay. This means it usually
makes sense to specify the &lt;code&gt;AdhocTransmissionModel&lt;/code&gt; explicitly and use a more realistic &lt;code&gt;Delay&lt;/code&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Example Configuration:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;maximumTtl&amp;quot;: 20,
    &amp;quot;singlehopRadius&amp;quot;: 300.5,
    &amp;quot;singlehopDelay&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;SimpleRandomDelay&amp;quot;,
        &amp;quot;steps&amp;quot;: 5,
        &amp;quot;minDelay&amp;quot;: &amp;quot;1.5 ms&amp;quot;,
        &amp;quot;maxDelay&amp;quot;: &amp;quot;2.5 ms&amp;quot;
    }, 
    &amp;quot;singlehopTransmission&amp;quot;: {
        &amp;quot;lossProbability&amp;quot;: 0.0,
        &amp;quot;maxRetries&amp;quot;: 0
    },
    &amp;quot;adhocTransmissionModel&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;SimpleAdhocTransmissionModel&amp;quot;,
        &amp;quot;simpleMultihopDelay&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;GammaRandomDelay&amp;quot;,
            &amp;quot;minDelay&amp;quot;: &amp;quot;10 ms&amp;quot;,
            &amp;quot;expDelay&amp;quot;: &amp;quot;30 ms&amp;quot;
        },
        &amp;quot;simpleMultihopTransmission&amp;quot;: {
            &amp;quot;lossProbability&amp;quot;: 0.1,
            &amp;quot;maxRetries&amp;quot;: 2 
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Read the detailed documentation of the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/sns_config/&#34;&gt;SNS Configuration&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;transmission-logic&#34;&gt;Transmission Logic&lt;/h2&gt;
&lt;p&gt;SNS differentiates between two types of Ad-hoc transmissions, geographically- and topologically-scoped transmissions.
Geographically- as well as topologically-scoped casts allow for singlehop or multihop forwarding. The only exception is the
topologically-scoped broadcast, which does not allow for multiple hops.
Furthermore, no form of anycast is implemented in SNS.
Geologically-scoped casts specify a destination area. Topologically-scoped casts on the other hand use means of IPv4 addressing to transmit
messages.
Most transmissions in the Ad-hoc domain will be some form of Broadcast, meaning every reachable entity is eligible to
receive a message.&lt;/p&gt;
&lt;p&gt;For an overview over which transmission logic implemented in SNS, as well as other network simulators see the






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/communication-ad-hoc/&#34;&gt;Communication&lt;/a&gt; page.&lt;/p&gt;



&lt;div class=&#34;svg-wrap mt-1 mb-4&#34;&gt;
  &lt;div class=&#34;inner&#34;&gt;
    &lt;svg viewBox=&#34;0 0 814.3453369140625 1203.831298828125&#34; style=&#34;max-width: 814.345px; background-color: white;&#34; aria-labelledby=&#34;chart-title-mermaid-1666691301359 chart-desc-mermaid-1666691301359&#34; role=&#34;img&#34; xmlns:xlink=&#34;http://www.w3.org/1999/xlink&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;100%&#34; id=&#34;mermaid-1666691301359&#34;&gt;&lt;title id=&#34;chart-title-mermaid-1666691301359&#34;/&gt;&lt;desc id=&#34;chart-desc-mermaid-1666691301359&#34;/&gt;&lt;style&gt;#mermaid-1666691301359 {font-family:&#34;trebuchet ms&#34;,verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-1666691301359 .error-icon{fill:#552222;}#mermaid-1666691301359 .error-text{fill:#552222;stroke:#552222;}#mermaid-1666691301359 .edge-thickness-normal{stroke-width:2px;}#mermaid-1666691301359 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1666691301359 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1666691301359 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1666691301359 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1666691301359 .marker{fill:#333333;stroke:#333333;}#mermaid-1666691301359 .marker.cross{stroke:#333333;}#mermaid-1666691301359 svg{font-family:&#34;trebuchet ms&#34;,verdana,arial,sans-serif;font-size:16px;}#mermaid-1666691301359 .label{font-family:&#34;trebuchet ms&#34;,verdana,arial,sans-serif;color:#333;}#mermaid-1666691301359 .cluster-label text{fill:#333;}#mermaid-1666691301359 .cluster-label span{color:#333;}#mermaid-1666691301359 .label text,#mermaid-1666691301359 span{fill:#333;color:#333;}#mermaid-1666691301359 .node rect,#mermaid-1666691301359 .node circle,#mermaid-1666691301359 .node ellipse,#mermaid-1666691301359 .node polygon,#mermaid-1666691301359 .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-1666691301359 .node .label{text-align:center;}#mermaid-1666691301359 .node.clickable{cursor:pointer;}#mermaid-1666691301359 .arrowheadPath{fill:#333333;}#mermaid-1666691301359 .edgePath .path{stroke:#333333;stroke-width:2.0px;}#mermaid-1666691301359 .flowchart-link{stroke:#333333;fill:none;}#mermaid-1666691301359 .edgeLabel{background-color:#e8e8e8;text-align:center;}#mermaid-1666691301359 .edgeLabel rect{opacity:0.5;background-color:#e8e8e8;fill:#e8e8e8;}#mermaid-1666691301359 .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-1666691301359 .cluster text{fill:#333;}#mermaid-1666691301359 .cluster span{color:#333;}#mermaid-1666691301359 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:&#34;trebuchet ms&#34;,verdana,arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1666691301359 :root{--mermaid-font-family:&#34;trebuchet ms&#34;,verdana,arial,sans-serif;}&lt;/style&gt;&lt;g&gt;&lt;g class=&#34;output&#34;&gt;&lt;g class=&#34;clusters&#34;/&gt;&lt;g class=&#34;edgePaths&#34;&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id1-id2&#34; class=&#34;edgePath LS-id1 LE-id2&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead39)&#34; d=&#34;M238.4554672241211,47L238.4554672241211,51.166666666666664C238.4554672241211,55.333333333333336,238.4554672241211,63.666666666666664,238.53880055745444,72.08333384195963C238.62213389078775,80.5000010172526,238.78880055745444,89.0000020345052,238.87213389078775,93.25000254313152L238.9554672241211,97.50000305175782&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead39&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id2-id3&#34; class=&#34;edgePath LS-id2 LE-id3&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead40)&#34; d=&#34;M195.61012530191223,222.07497362954896L181.68031275159353,234.9658644585434C167.75050020127483,247.85675528753782,139.89087510063743,273.6385369455267,126.04439588365204,292.3627611078545C112.19791666666667,311.0869852701823,112.36458333333333,322.75365193684894,112.44791666666667,328.5869852701823L112.53125,334.4203186035156&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead40&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id2-id4&#34; class=&#34;edgePath LS-id2 LE-id4&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead41)&#34; d=&#34;M282.3008059953237,222.07497067703954L296.06395240414344,234.96586199811887C309.8270988129632,247.85675331919825,337.3533916306027,273.6385359613569,351.19987137275575,293.9471356157697C365.0463511149089,314.25573527018247,365.2130177815755,329.09115193684926,365.2963511149089,336.50886027018265L365.3796844482422,343.9265686035161&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead41&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id3-id5&#34; class=&#34;edgePath LS-id3 LE-id5&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead42)&#34; d=&#34;M112.53125,475.1156311035156L112.44791666666667,480.7822977701823C112.36458333333333,486.44896443684894,112.19791666666667,497.7822977701823,112.11458333333333,520.8351618448893C112.03125,543.8880259195963,112.03125,578.6604207356771,112.03125,596.0466181437174L112.03125,613.4328155517578&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead42&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id4-id6&#34; class=&#34;edgePath LS-id4 LE-id6&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead43)&#34; d=&#34;M365.3796844482422,465.609378051758L365.2963511149089,472.86042022705095C365.2130177815755,480.1114624023439,365.0463511149089,494.6135467529298,365.0463511149089,507.6979227701823C365.0463511149089,520.7822987874348,365.2130177815755,532.4489664713541,365.2963511149089,538.2823003133136L365.3796844482422,544.1156341552733&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead43&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id6-id7&#34; class=&#34;edgePath LS-id6 LE-id7&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead44)&#34; d=&#34;M313.44946599963095,689.8197846031466L297.41166437469246,704.1414871692888C281.373862749754,718.4631897354311,249.298259499877,747.1065948677156,233.2604578749385,783.893400583272C217.22265625,820.6802062988281,217.22265625,865.6104125976562,217.22265625,888.0755157470703L217.22265625,910.5406188964844&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead44&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id6-id8&#34; class=&#34;edgePath LS-id6 LE-id8&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead45)&#34; d=&#34;M417.30990610436123,689.8197874991545L433.1810405280484,704.1414895826288C449.05217495173565,718.463191666103,480.79444379911,747.1065958330515,496.7489115561305,767.2616322671116C512.703379313151,787.416668701172,512.8700459798177,799.0833374023438,512.953379313151,804.9166717529297L513.0367126464844,810.7500061035156&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead45&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id8-id9&#34; class=&#34;edgePath LS-id8 LE-id9&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead46)&#34; d=&#34;M450.5991389557637,1006.8936702057637L435.42662519588384,1022.9665981369645C420.25411143600394,1039.0395260681653,389.90908391624413,1071.185381930567,374.7365701563643,1094.5916431951011C359.5640563964844,1117.9979044596355,359.5640563964844,1132.664571126302,359.5640563964844,1139.9979044596355L359.5640563964844,1147.3312377929688&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead46&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id8-id10&#34; class=&#34;edgePath LS-id8 LE-id10&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead47)&#34; d=&#34;M575.4742922322762,1006.8936765177241L590.4801383429775,1022.9666033969315C605.485984453679,1039.039530276139,635.4976766750816,1071.1853840345539,650.503522785783,1093.0083109137613C665.5093688964844,1114.8312377929688,665.5093688964844,1126.3312377929688,665.5093688964844,1132.0812377929688L665.5093688964844,1137.8312377929688&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead47&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;edgeLabels&#34;&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(0,0)&#34;&gt;&lt;rect height=&#34;0&#34; width=&#34;0&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;0&#34; width=&#34;0&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id1&#39; L-LE-id2&#34; id=&#34;L-L-id1-id2&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(112.03125,299.4203186035156)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-32.09375,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;64.1875&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;64.1875&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id2&#39; L-LE-id3&#34; id=&#34;L-L-id2-id3&#34;&gt;TopoCast&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(364.8796844482422,299.4203186035156)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-29.46875,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;58.9375&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;58.9375&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id2&#39; L-LE-id4&#34; id=&#34;L-L-id2-id4&#34;&gt;GeoCast&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(112.03125,509.1156311035156)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-11.328125,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;22.65625&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;22.65625&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id3&#39; L-LE-id5&#34; id=&#34;L-L-id3-id5&#34;&gt;Yes&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(364.8796844482422,509.1156311035156)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-11.328125,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;22.65625&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;22.65625&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id4&#39; L-LE-id6&#34; id=&#34;L-L-id4-id6&#34;&gt;Yes&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(217.22265625,775.75)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-11.328125,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;22.65625&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;22.65625&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id6&#39; L-LE-id7&#34; id=&#34;L-L-id6-id7&#34;&gt;Yes&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(512.5367126464844,775.75)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-9.3984375,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;18.796875&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;18.796875&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id6&#39; L-LE-id8&#34; id=&#34;L-L-id6-id8&#34;&gt;No&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(359.5640563964844,1103.3312377929688)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-11.328125,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;22.65625&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;22.65625&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id8&#39; L-LE-id9&#34; id=&#34;L-L-id8-id9&#34;&gt;Yes&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(665.5093688964844,1103.3312377929688)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-9.3984375,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;18.796875&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;18.796875&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id8&#39; L-LE-id10&#34; id=&#34;L-L-id8-id10&#34;&gt;No&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;nodes&#34;&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(238.4554672241211,27.5)&#34; id=&#34;flowchart-id1-56&#34; class=&#34;node default&#34;&gt;&lt;rect class=&#34;label-container&#34; height=&#34;39&#34; width=&#34;142.640625&#34; y=&#34;-19.5&#34; x=&#34;-71.3203125&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-61.3203125,-9.5)&#34;&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;122.640625&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;V2X-Transmission&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(238.4554672241211,180.9601593017578)&#34; id=&#34;flowchart-id2-57&#34; class=&#34;node default&#34;&gt;&lt;polygon class=&#34;label-container&#34; transform=&#34;translate(-83.96015625,83.96015625)&#34; points=&#34;83.96015625,0 167.9203125,-83.96015625 83.96015625,-167.9203125 0,-83.96015625&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-63.7890625,-9.5)&#34;&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;127.578125&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Transmission Type&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(112.03125,404.2679748535156)&#34; id=&#34;flowchart-id3-60&#34; class=&#34;node default&#34;&gt;&lt;polygon class=&#34;label-container&#34; transform=&#34;translate(-70.34765625,70.34765625)&#34; points=&#34;70.34765625,0 140.6953125,-70.34765625 70.34765625,-140.6953125 0,-70.34765625&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-39.1640625,-19)&#34;&gt;&lt;foreignObject height=&#34;38&#34; width=&#34;78.328125&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Broadcast&lt;br /&gt;or Unicast?&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(364.8796844482422,404.2679748535156)&#34; id=&#34;flowchart-id4-61&#34; class=&#34;node default&#34;&gt;&lt;polygon class=&#34;label-container&#34; transform=&#34;translate(-60.84140625,60.84140625)&#34; points=&#34;60.84140625,0 121.6828125,-60.84140625 60.84140625,-121.6828125 0,-60.84140625&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-38.1015625,-9.5)&#34;&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;76.203125&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Broadcast?&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(112.03125,642.4328155517578)&#34; id=&#34;flowchart-id5-66&#34; class=&#34;node default&#34;&gt;&lt;rect class=&#34;label-container&#34; height=&#34;58&#34; width=&#34;208.0625&#34; y=&#34;-29&#34; x=&#34;-104.03125&#34; ry=&#34;29&#34; rx=&#34;29&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-86.78125,-19)&#34;&gt;&lt;foreignObject height=&#34;38&#34; width=&#34;173.5625&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Simulate TopoCast using&lt;br /&gt;singlehop configuration.&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(364.8796844482422,642.4328155517578)&#34; id=&#34;flowchart-id6-69&#34; class=&#34;node default&#34;&gt;&lt;polygon class=&#34;label-container&#34; transform=&#34;translate(-98.8171875,98.8171875)&#34; points=&#34;98.8171875,0 197.634375,-98.8171875 98.8171875,-197.634375 0,-98.8171875&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-70.796875,-19)&#34;&gt;&lt;foreignObject height=&#34;38&#34; width=&#34;141.59375&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Simple transmission&lt;br /&gt;model?&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(217.22265625,939.5406188964844)&#34; id=&#34;flowchart-id7-72&#34; class=&#34;node default&#34;&gt;&lt;rect class=&#34;label-container&#34; height=&#34;58&#34; width=&#34;232.046875&#34; y=&#34;-29&#34; x=&#34;-116.0234375&#34; ry=&#34;29&#34; rx=&#34;29&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-98.7734375,-19)&#34;&gt;&lt;foreignObject height=&#34;38&#34; width=&#34;197.546875&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Simulate transmission using&lt;br /&gt;simpleMultihopDelay.&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(512.5367126464844,939.5406188964844)&#34; id=&#34;flowchart-id8-75&#34; class=&#34;node default&#34;&gt;&lt;polygon class=&#34;label-container&#34; transform=&#34;translate(-129.290625,129.290625)&#34; points=&#34;129.290625,0 258.58125,-129.290625 129.290625,-258.58125 0,-129.290625&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-104.65625,-19)&#34;&gt;&lt;foreignObject height=&#34;38&#34; width=&#34;209.3125&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Sender directly able to reach&lt;br /&gt;destination area?&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(359.5640563964844,1166.8312377929688)&#34; id=&#34;flowchart-id9-78&#34; class=&#34;node default&#34;&gt;&lt;rect class=&#34;label-container&#34; height=&#34;39&#34; width=&#34;230.21875&#34; y=&#34;-19.5&#34; x=&#34;-115.109375&#34; ry=&#34;19.5&#34; rx=&#34;19.5&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-100.234375,-9.5)&#34;&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;200.46875&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Flooding in destination area&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(665.5093688964844,1166.8312377929688)&#34; id=&#34;flowchart-id10-81&#34; class=&#34;node default&#34;&gt;&lt;rect class=&#34;label-container&#34; height=&#34;58&#34; width=&#34;281.671875&#34; y=&#34;-29&#34; x=&#34;-140.8359375&#34; ry=&#34;29&#34; rx=&#34;29&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-123.5859375,-19)&#34;&gt;&lt;foreignObject height=&#34;38&#34; width=&#34;247.171875&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Greedy Forwarding to reach area,&lt;br /&gt;then flooding in destination areay.&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;desc&#34;&gt;
      This flowchart tells how different types of messages are handled internally.
    &lt;/div&gt;
  
&lt;/div&gt;


&lt;h3 id=&#34;topologically-scoped-casts&#34;&gt;Topologically Scoped Casts&lt;/h3&gt;
&lt;p&gt;A way of directly addressing entities is a singlehop unicast (see figure below). The sender will try to address a given entity
in its transmission range.















&lt;figure id=&#34;figure-singlehopunicast-the-rsu-is-directly-addressing-the-green-vehicle&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/SingleHopUniCast.png&#34; data-caption=&#34;SingleHopUniCast: The RSU is directly addressing the green vehicle.&#34;&gt;


  &lt;img src=&#34;../images/SingleHopUniCast.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    SingleHopUniCast: The RSU is directly addressing the green vehicle.
  &lt;/figcaption&gt;


&lt;/figure&gt;

The counterpart to that is a singlehop broadcast (see figure below). This form of transmission is commonly used for CAMs
(Cooperative Awareness Messages) and other types of immediate warning messages to all entities in transmission range.&lt;br&gt;















&lt;figure id=&#34;figure-singlehopbroadcast-the-rsu-is-addressing-all-units-in-transmission-range&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/SingleHopBroadCast.png&#34; data-caption=&#34;SingleHopBroadCast: The RSU is addressing all units in transmission range.&#34;&gt;


  &lt;img src=&#34;../images/SingleHopBroadCast.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    SingleHopBroadCast: The RSU is addressing all units in transmission range.
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;geographically-scoped-casts&#34;&gt;Geographically-Scoped Casts&lt;/h3&gt;
&lt;p&gt;Geographically-scoped casts specify a destination area in which a message should be distributed. A broadcast would distribute the message
to every entity in the destination area, while a unicast would only be sent successfully if the specified receiver is located in the
destination area.&lt;/p&gt;
&lt;p&gt;The SNS supports two ways to simulate geographically-scoped casts.
A simple but performant model (&lt;code&gt;SimpleAdhocTransmissionModel&lt;/code&gt;) &amp;amp; a fairly realistic model ( &lt;code&gt;SophisticatedAdhocTransmissionModel&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The simple model assumes a transmission to all entities in the specified area, whereas the delay will be calculated using the configured
delay-type and the successful reception will be determined by the uniformly distributed lossProbability.
The figure below depicts this behaviour















&lt;figure id=&#34;figure-simple-geobroadcast-the-rsu-is-sending-to-all-entities-in-the-destination-area-all-arrows-transmissions-will-have-a-uniquely-calculated-delay-or-possible-loss&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/SimpleMultiHop.png&#34; data-caption=&#34;Simple GeoBroadCast: The RSU is sending to all entities in the destination area. All arrows (transmissions) will have a uniquely calculated delay or possible loss.&#34;&gt;


  &lt;img src=&#34;../images/SimpleMultiHop.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Simple GeoBroadCast: The RSU is sending to all entities in the destination area. All arrows (transmissions) will have a uniquely calculated delay or possible loss.
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The realistic model accounts for possible transmission failures more accurately. The easiest case is that the sender itself is inside
the destination area (or is able to communicate with an entity inside the destination area) and will start a 





  
  

&lt;a href=&#34;#flooding-transmission&#34;&gt;Flooding Transmission&lt;/a&gt;
within this area (see figure below).















&lt;figure id=&#34;figure-geobroadcast-using-flooding-transmissionflooding-transmission-note-the-area-is-not-limited-to-circles&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/FloodingTransmission.png&#34; data-caption=&#34;GeoBroadCast using Flooding Transmission. Note: the area is not limited to circles.&#34;&gt;


  &lt;img src=&#34;../images/FloodingTransmission.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    GeoBroadCast using &lt;a href=&#34;#flooding-transmission&#34;&gt;Flooding Transmission&lt;/a&gt;. Note: the area is not limited to circles.
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In case the sending entity is outside the destination area, a 





  
  

&lt;a href=&#34;#approaching-transmission&#34;&gt;Forwarding Transmission&lt;/a&gt; has to
be executed first. This can also be described as an anycast, since the goal of this transmission is to reach &lt;em&gt;any&lt;/em&gt; entity
inside the destination area. We try to achieve this by building a &amp;ldquo;chain&amp;rdquo; of entities, that will forward the message to the destination
are (see figure below).















&lt;figure id=&#34;figure-forwarding-transmission-by-building-a-chain-of-vehicles&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/ApproachingTransmission.png&#34; data-caption=&#34;Forwarding Transmission, by building a &amp;ldquo;chain&amp;rdquo; of vehicles.&#34;&gt;


  &lt;img src=&#34;../images/ApproachingTransmission.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Forwarding Transmission, by building a &amp;ldquo;chain&amp;rdquo; of vehicles.
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The SNS however never uses 





  
  

&lt;a href=&#34;#approaching-transmission&#34;&gt;Forwarding Transmissions&lt;/a&gt; individually, rather they are combined with a 





  
  

&lt;a href=&#34;#flooding-transmission&#34;&gt;Flooding Transmission&lt;/a&gt;, which
will simulate a way, that a geographically-scoped transmission can be implemented in reality. The figure below depicts this behaviour.















&lt;figure id=&#34;figure-forwarding-transmission-followed-by-a-flooding-transmissionflooding-transmission-to-realistically-simulate-geographically-scoped-casts&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/ApproachingAndFlooding.png&#34; data-caption=&#34;Forwarding Transmission followed by a Flooding Transmission to realistically simulate geographically-scoped casts.&#34;&gt;


  &lt;img src=&#34;../images/ApproachingAndFlooding.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Forwarding Transmission followed by a &lt;a href=&#34;#flooding-transmission&#34;&gt;Flooding Transmission&lt;/a&gt; to realistically simulate geographically-scoped casts.
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;transmission-models&#34;&gt;Transmission Models&lt;/h2&gt;
&lt;p&gt;As already mentioned in the previous abstracts, the SNS supports different transmission models for different use cases.
Depending on the configuration of the SNS and the type of message send, different models will be used.
The models are located in the package &lt;code&gt;org.eclipse.mosaic.fed.sns.ambassador.model&lt;/code&gt;. This chapter aims to give
a detailed inside in the workings of the models.&lt;/p&gt;
&lt;h3 id=&#34;simpleadhoctransmissionmodel&#34;&gt;&lt;code&gt;SimpleAdhocTransmissionModel&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is the most basic of all transmission models and will be your model of choice if you are not interested in completely
accurate transmission results but care for performance. This model will approximate geographically-scoped casts using the defined
&lt;code&gt;simpleMultihopDelay&lt;/code&gt; and &lt;code&gt;simpleMultihopTransmission&lt;/code&gt; parameters.
For topologically-scoped casts the usual &lt;code&gt;singlehopDelay&lt;/code&gt; will be used.
This model only checks, whether a potential receiver is inside the destination area and has enabled Adhoc capabilities.
If those conditions are met it will simulate the transmission by calculating an actual delay value and saving it into a
transmission-result. Such a result holds information of the success of the transmission, the delay-value, the amount of hops,
and the number of attempts. Though the amount of hops will always be 1 for this model.&lt;/p&gt;
&lt;h3 id=&#34;sophisticatedadhoctransmissionmodel&#34;&gt;&lt;code&gt;SophisticatedAdhocTransmissionModel&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This model offers are more realistic simulation of adhoc transmissions, using an implementation of a greedy-forwarding and flooding
algorithm (see 




&lt;a href=&#34;https://en.wikipedia.org/wiki/Geographic_routing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;greedy forwarding&lt;/a&gt; &amp;amp;





&lt;a href=&#34;https://en.wikipedia.org/wiki/Flooding_%28computer_networking%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;flooding&lt;/a&gt;). For topologically-scoped casts this model behaves very
similarly to the &lt;code&gt;SimpleAdhocTransmissionModel&lt;/code&gt;, since topologically-scoped casts are always configured with only one hop.
For geographically-scoped casts however, this model follows the flowchart above, trying to &amp;ldquo;approach&amp;rdquo; a destination area if it can&amp;rsquo;t be reached directly.&lt;/p&gt;
&lt;h4 id=&#34;approaching-greedy-forwarding&#34;&gt;Approaching (Greedy forwarding)&lt;/h4&gt;
&lt;p&gt;Approaching can be imagined as building a &amp;ldquo;chain&amp;rdquo; of entities to reach an area. However, there is no
guarantee, that even if such a chain exists, it will be found. The way that this chain is build follows the subsequent steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start from the sender and collect all reachable entities.&lt;/li&gt;
&lt;li&gt;Choose out of all reachable entities the one, that is closest to any node in the destination area.&lt;/li&gt;
&lt;li&gt;Use the chosen node and repeat the first step.&lt;/li&gt;
&lt;li&gt;Repeat until either a node inside the destination area is reached, or the TTL (time to live) is exceeded.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By always choosing the node with the shortest distance to the destination area, we omit a lot of possible solutions.
Greedy Forwarding isn&amp;rsquo;t optimal, but offers a performant approach for this problem. &amp;ldquo;Face Routing&amp;rdquo;-algorithms will always
find a path if one exists, however this hasn&amp;rsquo;t been implemented yet (feel free to contribute :).
The figure below shows an example of those shortcomings, the message will be sent using the green nodes and won&amp;rsquo;t receive the destination
area, even though there is a possible &amp;ldquo;chain&amp;rdquo; using the yellow nodes.&lt;/p&gt;



&lt;div class=&#34;svg-wrap mt-1 mb-4&#34;&gt;
  &lt;div class=&#34;inner&#34;&gt;
    &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; standalone=&#34;no&#34;?&gt;
&lt;svg
   xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34;
   xmlns:cc=&#34;http://creativecommons.org/ns#&#34;
   xmlns:rdf=&#34;http://www.w3.org/1999/02/22-rdf-syntax-ns#&#34;
   xmlns:svg=&#34;http://www.w3.org/2000/svg&#34;
   xmlns=&#34;http://www.w3.org/2000/svg&#34;
   xmlns:sodipodi=&#34;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&#34;
   xmlns:inkscape=&#34;http://www.inkscape.org/namespaces/inkscape&#34;
   width=&#34;100%&#34;
   height=&#34;100%&#34;
   viewBox=&#34;0 0 1000 1100&#34;
   preserveAspectRatio=&#34;xMinYMin meet&#34;
   version=&#34;1.1&#34;
   id=&#34;svg112&#34;
   sodipodi:docname=&#34;shortcomingsApproaching.svg&#34;
   inkscape:version=&#34;0.92.4 (5da689c313, 2019-01-14)&#34;&gt;
  &lt;metadata
     id=&#34;metadata116&#34;&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=&#34;&#34;&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource=&#34;http://purl.org/dc/dcmitype/StillImage&#34; /&gt;
        &lt;dc:title&gt;&lt;/dc:title&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;
  &lt;sodipodi:namedview
     pagecolor=&#34;#ffffff&#34;
     bordercolor=&#34;#000000&#34;
     borderopacity=&#34;1&#34;
     objecttolerance=&#34;10&#34;
     gridtolerance=&#34;10&#34;
     guidetolerance=&#34;10&#34;
     inkscape:pageopacity=&#34;0&#34;
     inkscape:pageshadow=&#34;2&#34;
     inkscape:window-width=&#34;2560&#34;
     inkscape:window-height=&#34;1377&#34;
     id=&#34;namedview114&#34;
     showgrid=&#34;false&#34;
     inkscape:zoom=&#34;0.54909091&#34;
     inkscape:cx=&#34;70.460088&#34;
     inkscape:cy=&#34;483.05537&#34;
     inkscape:window-x=&#34;1912&#34;
     inkscape:window-y=&#34;-8&#34;
     inkscape:window-maximized=&#34;1&#34;
     inkscape:current-layer=&#34;g110&#34; /&gt;
  &lt;defs
     id=&#34;defs66&#34;&gt;
    &lt;clipPath
       id=&#34;EGXEKOJWuGVn&#34;&gt;
      &lt;path
         id=&#34;svg_1&#34;
         d=&#34;m0,0l1673,0l0,1285l-1673,0l0,-1285z&#34;
         fill=&#34;none&#34; /&gt;
    &lt;/clipPath&gt;
  &lt;/defs&gt;
  &lt;g
     id=&#34;g110&#34;&gt;
    &lt;title
       id=&#34;title68&#34;&gt;Layer 1&lt;/title&gt;
    &lt;path
       style=&#34;fill:#ffd700;fill-opacity:0.3&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 460.74242,186.92776 c 0,75.84645 -61.4857,137.33215 -137.33215,137.33215 -75.84645,0 -137.33215,-61.4857 -137.33215,-137.33215 0,-75.84645 61.4857,-137.332153 137.33215,-137.332153 75.84645,0 137.33215,61.485703 137.33215,137.332153 z&#34;
       id=&#34;svg_5&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#caab06;stroke-width:2.5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 460.74242,186.92776 c 0,75.84645 -61.4857,137.33215 -137.33215,137.33215 -75.84645,0 -137.33215,-61.4857 -137.33215,-137.33215 0,-75.84645 61.4857,-137.332153 137.33215,-137.332153 75.84645,0 137.33215,61.485703 137.33215,137.332153 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_6&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;text
       style=&#34;font-style:normal;font-weight:normal;font-size:20px;font-family:geogebra-sans-serif, sans-serif;text-anchor:start;fill:#ffd700&#34;
       font-size=&#34;20px&#34;
       font-style=&#34;normal&#34;
       font-weight=&#34;normal&#34;
       x=&#34;229.62225&#34;
       y=&#34;37.811882&#34;
       id=&#34;svg_7&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34;&gt;Destination Area&lt;/text&gt;
    &lt;text
       style=&#34;font-style:normal;font-weight:normal;font-size:20px;font-family:geogebra-sans-serif, sans-serif;text-anchor:start;fill:none;stroke:#ffffff;stroke-width:3;stroke-linejoin:bevel;stroke-miterlimit:10&#34;
       font-size=&#34;20px&#34;
       font-style=&#34;normal&#34;
       font-weight=&#34;normal&#34;
       x=&#34;229.62225&#34;
       y=&#34;37.811882&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_8&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34;&gt;Destination Area&lt;/text&gt;
    &lt;text
       style=&#34;font-style:normal;font-weight:normal;font-size:20px;font-family:geogebra-sans-serif, sans-serif;text-anchor:start;fill:#978006;stroke:none;stroke-opacity:1;&#34;
       font-size=&#34;20px&#34;
       font-style=&#34;normal&#34;
       font-weight=&#34;normal&#34;
       x=&#34;229.62225&#34;
       y=&#34;37.811882&#34;
       id=&#34;svg_9&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34;&gt;Destination Area&lt;/text&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 529.40849,873.5885 c 0,113.7697 -92.22855,205.9982 -205.99822,205.9982 -113.76968,0 -205.99822,-92.2285 -205.99822,-205.9982 0,-113.76967 92.22854,-205.99822 205.99822,-205.99822 113.76967,0 205.99822,92.22855 205.99822,205.99822 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_10&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 486.82048,688.91189 c 0,113.76968 -92.22854,205.99822 -205.99822,205.99822 -113.76968,0 -205.99822,-92.22854 -205.99822,-205.99822 0,-113.76968 92.22854,-205.99822 205.99822,-205.99822 113.76968,0 205.99822,92.22854 205.99822,205.99822 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_11&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 428.82048,511.91189 c 0,113.76968 -92.22854,205.99822 -205.99822,205.99822 -113.76968,0 -205.99822,-92.22854 -205.99822,-205.99822 0,-113.76968 92.22854,-205.99822 205.99822,-205.99822 113.76968,0 205.99822,92.22854 205.99822,205.99822 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_12&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 696.92801,775.58689 c 0,113.76968 -92.2286,205.99821 -205.99825,205.99821 -113.76968,0 -205.99822,-92.22853 -205.99822,-205.99821 0,-113.76968 92.22854,-205.99822 205.99822,-205.99822 113.76965,0 205.99825,92.22854 205.99825,205.99822 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_13&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 846.82051,657.91189 c 0,113.76968 -92.2286,205.99822 -205.9982,205.99822 -113.76973,0 -205.99827,-92.22854 -205.99827,-205.99822 0,-113.76968 92.22854,-205.99822 205.99827,-205.99822 113.7696,0 205.9982,92.22854 205.9982,205.99822 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_14&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 988.82051,527.91189 c 0,113.76968 -92.2286,205.99822 -205.9982,205.99822 -113.7697,0 -205.99827,-92.22854 -205.99827,-205.99822 0,-113.76968 92.22857,-205.99822 205.99827,-205.99822 113.7696,0 205.9982,92.22854 205.9982,205.99822 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_15&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 941.82051,347.91189 c 0,113.76968 -92.2286,205.99822 -205.9982,205.99822 -113.7697,0 -205.99827,-92.22854 -205.99827,-205.99822 0,-113.76968 92.22857,-205.99822 205.99827,-205.99822 113.7696,0 205.9982,92.22854 205.9982,205.99822 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_16&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 783.82051,235.91189 c 0,113.76968 -92.2286,205.99822 -205.99825,205.99822 -113.76968,0 -205.99822,-92.22854 -205.99822,-205.99822 0,-113.76968 92.22854,-205.998223 205.99822,-205.998223 113.76965,0 205.99825,92.228543 205.99825,205.998223 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_17&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#1565c0&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 332.41027,873.5885 c 0,4.97057 -4.02944,9 -9,9 -4.97056,0 -9,-4.02943 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_18&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 332.41027,873.5885 c 0,4.97057 -4.02944,9 -9,9 -4.97056,0 -9,-4.02943 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_19&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;text
       style=&#34;font-style:normal;font-weight:normal;font-size:20px;font-family:geogebra-sans-serif, sans-serif;text-anchor:start;fill:#1565c0&#34;
       font-size=&#34;20px&#34;
       font-style=&#34;normal&#34;
       font-weight=&#34;normal&#34;
       x=&#34;293.62225&#34;
       y=&#34;854.81189&#34;
       id=&#34;svg_20&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34;&gt;Sender&lt;/text&gt;
    &lt;text
       style=&#34;font-style:normal;font-weight:normal;font-size:20px;font-family:geogebra-sans-serif, sans-serif;text-anchor:start;fill:none;stroke:#ffffff;stroke-width:3;stroke-linejoin:bevel;stroke-miterlimit:10&#34;
       font-size=&#34;20px&#34;
       font-style=&#34;normal&#34;
       font-weight=&#34;normal&#34;
       x=&#34;293.62225&#34;
       y=&#34;854.81189&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_21&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34;&gt;Sender&lt;/text&gt;
    &lt;text
       style=&#34;font-style:normal;font-weight:normal;font-size:20px;font-family:geogebra-sans-serif, sans-serif;text-anchor:start;fill:#1565c0;stroke:none;stroke-opacity:1;&#34;
       font-size=&#34;20px&#34;
       font-style=&#34;normal&#34;
       font-weight=&#34;normal&#34;
       x=&#34;293.62225&#34;
       y=&#34;854.81189&#34;
       id=&#34;svg_22&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34;&gt;Sender&lt;/text&gt;
    &lt;path
       style=&#34;fill:#ffd700&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 649.82231,657.91189 c 0,4.97056 -4.0295,9 -9,9 -4.9706,0 -9,-4.02944 -9,-9 0,-4.97056 4.0294,-9 9,-9 4.9705,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_23&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 649.82231,657.91189 c 0,4.97056 -4.0295,9 -9,9 -4.9706,0 -9,-4.02944 -9,-9 0,-4.97056 4.0294,-9 9,-9 4.9705,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_24&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#ffd700&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 791.82231,527.91189 c 0,4.97056 -4.0295,9 -9,9 -4.9706,0 -9,-4.02944 -9,-9 0,-4.97056 4.0294,-9 9,-9 4.9705,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_25&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 791.82231,527.91189 c 0,4.97056 -4.0295,9 -9,9 -4.9706,0 -9,-4.02944 -9,-9 0,-4.97056 4.0294,-9 9,-9 4.9705,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_26&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#006633&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 289.82226,688.91189 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_27&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 289.82226,688.91189 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_28&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#993300&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 310.87082,296.76468 c 0,4.97056 -4.02944,9 -9,9 -4.97057,0 -9,-4.02944 -9,-9 0,-4.97056 4.02943,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_29&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 310.87082,296.76468 c 0,4.97056 -4.02944,9 -9,9 -4.97057,0 -9,-4.02944 -9,-9 0,-4.97056 4.02943,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_30&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#993300&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 415.68715,197.27798 c 0,4.97057 -4.02943,9 -9,9 -4.97056,0 -9,-4.02943 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97057,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_31&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 415.68715,197.27798 c 0,4.97057 -4.02943,9 -9,9 -4.97056,0 -9,-4.02943 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97057,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_32&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#993300&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 319.75356,156.41738 c 0,4.97056 -4.02944,9 -9,9 -4.97057,0 -9,-4.02944 -9,-9 0,-4.97056 4.02943,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_33&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 319.75356,156.41738 c 0,4.97056 -4.02944,9 -9,9 -4.97057,0 -9,-4.02944 -9,-9 0,-4.97056 4.02943,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_34&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#006400&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 231.82226,511.91189 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_35&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 231.82226,511.91189 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_36&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#ffd700&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 499.92976,775.58689 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_37&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 499.92976,775.58689 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_38&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#ffd700&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 744.82231,347.91189 c 0,4.97056 -4.0295,9 -9,9 -4.9706,0 -9,-4.02944 -9,-9 0,-4.97056 4.0294,-9 9,-9 4.9705,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_39&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 744.82231,347.91189 c 0,4.97056 -4.0295,9 -9,9 -4.9706,0 -9,-4.02944 -9,-9 0,-4.97056 4.0294,-9 9,-9 4.9705,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_40&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#ffd700&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 586.82226,235.91189 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_41&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 586.82226,235.91189 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_42&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
  &lt;/g&gt;
&lt;/svg&gt;

  &lt;/div&gt;
  
    &lt;div class=&#34;desc&#34;&gt;
      This figure depicts a case were the Approaching Transmission wouldn&amp;rsquo;t reach the destination area, even though there is a possible way. (The dashed lines represent the communication range)
    &lt;/div&gt;
  
&lt;/div&gt;


&lt;h4 id=&#34;flooding&#34;&gt;Flooding&lt;/h4&gt;
&lt;p&gt;The implementation of Flooding is fairly equivalent as described on





&lt;a href=&#34;https://en.wikipedia.org/wiki/Flooding_%28computer_networking%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wikipedia&lt;/a&gt;. Each entity forwards the message to all entities
in its communication range. Entities, that already received the message won&amp;rsquo;t receive it again; this is different from many real-life
implementations, where messages are send to all reachable entities except the sender. However, since the simulation has total
knowledge of all simulated entities, it is easier to overcome a lot of the disadvantages, that flooding faces
in real world implementations.&lt;/p&gt;
&lt;h4 id=&#34;implementing-your-own-adhoctransmissionmodel&#34;&gt;Implementing your own &lt;code&gt;AdhocTransmissionModel&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;If the implemented models don&amp;rsquo;t suffice your needs you can easily implement your own.
Create a class extending &lt;code&gt;AdhocTransmissionModel&lt;/code&gt; and implement the abstract methods for sending
topologically-scoped casts/geographically-scoped casts. A possible extension could be to allow for multihop topologically-scoped casts,
building an actual topology and transmit your messages using that topology. Also, the aforementioned &amp;ldquo;Face-Routing&amp;rdquo; could be of interest.
Additionally, the calculation of delays could be made more realistic.&lt;/p&gt;
&lt;h2 id=&#34;accessing-sns-functionality-from-your-applications&#34;&gt;Accessing SNS-functionality from your applications&lt;/h2&gt;
&lt;p&gt;To enable SNS in your scenario follow the steps as described in 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/scenario_configuration/#communication-simulators-cell-ns3-omnetpp-sns&#34;&gt;Scenario Configuration&lt;/a&gt;.&lt;br&gt;
An overview of how to configure AdHoc-modules and usage of the API for Routing and Message-Building functions,
can be found under 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/communication-ad-hoc/&#34;&gt;Application Development&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Network Simulator Cell</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_cell/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_cell/</guid>
      <description>&lt;p&gt;The built-in Eclipse MOSAIC Cell Simulator enables the applications to use cellular network communication.
The simulation of cellular communication in Eclipse MOSAIC consists of two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Cellular Simulator itself and&lt;/li&gt;
&lt;li&gt;The applications that can communicate over cellular networks in the Application Simulator&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These changes are done in a generic way, making the cellular simulator exchangeable. Users interested
in a different kind of simulation of cellular communication may use other simulators and develop
ambassadors connecting them to Eclipse MOSAIC.&lt;/p&gt;
&lt;p&gt;The Cellular Simulator in the current state consists of three main modules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UplinkModule&lt;/li&gt;
&lt;li&gt;GeocasterModule&lt;/li&gt;
&lt;li&gt;DownlinkModule&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Geocaster module simulates a mandatory component for ITS communication. It is inspired by
the several architectures from research projects as simTD or CONVERGE to enable ITS use cases over
cellular networks. It mainly takes over the task of an addressing and routing component with geographic
knowledge to support geo-addressing. However, it also supports regular topological addressing.
The Uplink and DownlinkModule are responsible for the transmission simulation. They account for the
aspects of transmission delays, packet losses and available data rates. In this context,Uplink and Downlink
always refer to the direction towards respectively from the Geocaster. For instance, a transmission
from an Internet-based server towards a vehicle would include an Uplink between the server and the
Geocaster and a Downlink between the Geocaster and the vehicle. While the Uplink direction only allows
point-to-point communication (Unicast), the Downlink supports point-to-point (Unicast) as well as
point-to-multipoint (Multicast).&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;This simulator does not need to be installed. It is delivered as part of the Eclipse MOSAIC-installation package.&lt;/p&gt;
&lt;h3 id=&#34;cellambassador-folder-structure&#34;&gt;CellAmbassador folder structure&lt;/h3&gt;
&lt;p&gt;The Eclipse MOSAIC Cell simulator can be configured via three distinct configuration files, which can be
found within the scenarios&#39; folder structure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   └─ cell
      ├─ cell_config.json ................. Cell ambassador configuration file
      ├─ network.json ..................... Network configuration file
      └─ regions.json ..................... Regions configuration file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The network and regions configuration files are referenced in the cellular ambassador configuration
file.&lt;/p&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Read the detailed documentation of the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/cell_network_config/&#34;&gt;Network&lt;/a&gt; and 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/cell_region_config/&#34;&gt;Regions Configuration&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;We provide a cellular configuration file in the example scenarios of Tiergarten and Barnim. Please note
that in the default configuration of this scenario the Cellular Simulator is deactivated. To activate the
cellular simulator just enable the &lt;code&gt;cell&lt;/code&gt; federate in the &lt;code&gt;scenario_config.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;federates&amp;quot;: {
    ...
    &amp;quot;cell&amp;quot;: true,
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The central configuration for the cellular simulator in the file
&lt;code&gt;&amp;lt;scenarioName&amp;gt;/cell/cell_config.json&lt;/code&gt; could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;networkConfigurationFile&amp;quot;: &amp;quot;network.json &amp;quot;,
    &amp;quot;regionConfigurationFile&amp;quot;: &amp;quot;regions.json &amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Read the detailed documentations of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/cell_network_config/&#34;&gt;Cell Network Configuration&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/cell_region_config/&#34;&gt;Cell Region Configuration&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;The configuration for the global network in the cellular simulator in the file
&lt;code&gt;&amp;lt;scenarioName&amp;gt;/cell/network.json&lt;/code&gt; could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;globalNetwork&amp;quot;: {
        &amp;quot;uplink&amp;quot;: {
            &amp;quot;delay&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;ConstantDelay&amp;quot;,
                &amp;quot;delay&amp;quot;: &amp;quot;100 ms&amp;quot;
            },
            &amp;quot;transmission&amp;quot;: {
                &amp;quot;lossProbability&amp;quot;: 0.0,
                &amp;quot;maxRetries&amp;quot;: 2
            },
            &amp;quot;capacity&amp;quot;: 28000000
        },
        &amp;quot;downlink&amp;quot;: {
            &amp;quot;unicast&amp;quot;: {
                &amp;quot;delay&amp;quot;: {
                    &amp;quot;type&amp;quot;: &amp;quot;ConstantDelay&amp;quot;,
                    &amp;quot;delay&amp;quot;: &amp;quot;50 ms&amp;quot;
                },
                &amp;quot;transmission&amp;quot;: {
                    &amp;quot;lossProbability&amp;quot;: 0.0,
                    &amp;quot;maxRetries&amp;quot;: 2
                }
            },
            &amp;quot;multicast&amp;quot;: {
                &amp;quot;delay&amp;quot;: {
                    &amp;quot;type&amp;quot;: &amp;quot;ConstantDelay&amp;quot;,
                    &amp;quot;delay&amp;quot;: &amp;quot;100 ms&amp;quot;
                },
                &amp;quot;transmission&amp;quot;: {
                    &amp;quot;lossProbability&amp;quot;: 0.0
                },
                &amp;quot;usableCapacity&amp;quot;: 0.6
            },
            &amp;quot;capacity&amp;quot;: 42200000
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;network.json&lt;/code&gt; also allows setting the fields &lt;code&gt;defaultDownlinkCapacity&lt;/code&gt; and &lt;code&gt;defaultUplinkCapacity&lt;/code&gt;,
which are used if you don&amp;rsquo;t specify any bitrates in your &lt;code&gt;CellConfiguration&lt;/code&gt;s inside your applications.
These values are set to 100 Gigabit by default, so if you aren&amp;rsquo;t interested in capacity/bandwidth observations you can
probably just leave them as is.&lt;/p&gt;
&lt;h3 id=&#34;server-configuration&#34;&gt;Server configuration&lt;/h3&gt;
&lt;p&gt;MOSAIC supports a type of simulation units, called servers. Traffic Management Centers are a specialised type of server.
What differentiates servers from other units is, that
they are treated as having no geographical location and instead are located &amp;ldquo;inside the internet.&amp;rdquo;. This concept omits prior shortcoming,
where one would have to configure RSU&amp;rsquo;s as servers.&lt;br&gt;
Servers are also configured in the &lt;code&gt;network.json&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;defaultDownlinkCapacity&amp;quot;: &amp;quot;10 Gbps&amp;quot;,
    &amp;quot;defaultUplinkCapacity&amp;quot;: &amp;quot;10 Gbps&amp;quot;,
    &amp;quot;globalNetwork&amp;quot;: {
           [...]
    },
    &amp;quot;servers&amp;quot;: {
        {
            &amp;quot;id&amp;quot;: &amp;quot;TestServer&amp;quot;,
            &amp;quot;uplink&amp;quot;: {
                &amp;quot;delay&amp;quot;: {
                    &amp;quot;type&amp;quot;: &amp;quot;ConstantDelay&amp;quot;,
                    &amp;quot;delay&amp;quot;: &amp;quot;200 ms&amp;quot;
                },
                &amp;quot;transmission&amp;quot;: {
                    &amp;quot;lossProbability&amp;quot;: 0.5,
                    &amp;quot;maxRetries&amp;quot;: 2
                }
            },
            &amp;quot;downlink&amp;quot;: {
                &amp;quot;unicast&amp;quot;: {
                    &amp;quot;delay&amp;quot;: {
                        &amp;quot;type&amp;quot;: &amp;quot;SimpleRandomDelay&amp;quot;,
                        &amp;quot;steps&amp;quot;: 5,
                        &amp;quot;minDelay&amp;quot;: &amp;quot;100 ms&amp;quot;,
                        &amp;quot;maxDelay&amp;quot;: &amp;quot;200 ms&amp;quot;
                    },
                    &amp;quot;transmission&amp;quot;: {
                        &amp;quot;lossProbability&amp;quot;: 0.1,
                        &amp;quot;maxRetries&amp;quot;: 2
                    }
                }
            }
        },
        {
            [...]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;The fields &lt;code&gt;defaultDownlinkCapacity&lt;/code&gt;, &lt;code&gt;defaultUplinkCapacity&lt;/code&gt; are used if you don&amp;rsquo;t define any bitrates for your cell configurations
their default values are 100 Gigabit, so you usually don&amp;rsquo;t need to set them.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Servers get their configuration for the delay and retransmission models from the &lt;code&gt;network.json&lt;/code&gt; and the configuration for the
capacity-model has to be made from within an application, by activating the &lt;code&gt;CellModule&lt;/code&gt; and properly setting the bit rates.
This could look as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;        getOs().getCellModule().enable(
                new CellModuleConfiguration()
                        .maxUlBitrate(10000)
                        .maxDlBitrate(10000)
        );

        // Alternatively using default values from network.json
        getOs().getCellModule().enable();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the CellAmbassador to be able to recognize servers, the &lt;code&gt;group&lt;/code&gt;-field in the mapping must match the &lt;code&gt;id&lt;/code&gt;-field in the &lt;code&gt;network.json&lt;/code&gt;,
this also allows for multiple servers to utilize the same configuration. A &lt;code&gt;mapping_config.json&lt;/code&gt; using the configuration from
above could look as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    ...,
    &amp;quot;tmcs&amp;quot;: [
        {
            &amp;quot;group&amp;quot;: &amp;quot;TestServer&amp;quot;,
            &amp;quot;applications&amp;quot;: [ &amp;quot;TestApplication&amp;quot; ],
            &amp;quot;inductionLoops&amp;quot;: [ ],
            &amp;quot;laneAreaDetectors&amp;quot;: [ ]
        }
    ],    
    &amp;quot;servers&amp;quot;: [
        {
            &amp;quot;group&amp;quot;: &amp;quot;TestServer&amp;quot;,
            &amp;quot;applications&amp;quot;: [ &amp;quot;TestApplication&amp;quot; ]
        }
    ],
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Note that all bandwidths are given in bit per second and all delays in nanoseconds, unless explicitly defined differently.
Also, every json configuration goes through a minifier, so comments are allowed in the configuration files. An example
would be the comment before the &lt;code&gt;globalNetwork&lt;/code&gt; option.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;delay-regions&#34;&gt;Delay regions&lt;/h3&gt;
&lt;p&gt;Additionally, the user has the option to define regions with individual delays. This can be used to simulate
areas with bad reception, crowded areas etc.&lt;/p&gt;
&lt;p&gt;The regions should be stored in &lt;code&gt;&amp;lt;scenarioName&amp;gt;/cell/regions.json&lt;/code&gt;. An
example definition for a single region called &lt;code&gt;Ernst-Reuter-Platz&lt;/code&gt; could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Json&#34;&gt;{
    &amp;quot;regions&amp;quot;:[
        {
            &amp;quot;id&amp;quot;: &amp;quot;Ernst-Reuter-Platz&amp;quot;,
            &amp;quot;area&amp;quot;: {
                &amp;quot;nw&amp;quot;: { &amp;quot;lon&amp;quot;:13.3249, &amp;quot;lat&amp;quot;:52.5131 },
                &amp;quot;se&amp;quot;: { &amp;quot;lon&amp;quot;:13.3273, &amp;quot;lat&amp;quot;:52.5125 }
            },
            &amp;quot;uplink&amp;quot;: {
                &amp;quot;delay&amp;quot;: {
                    &amp;quot;type&amp;quot;:         &amp;quot;SimpleRandomDelay&amp;quot;,
                    &amp;quot;steps&amp;quot;:        4,
                    &amp;quot;minDelay&amp;quot;:     &amp;quot;50 ms&amp;quot;,
                    &amp;quot;maxDelay&amp;quot;:     &amp;quot;200 ms&amp;quot;
                },
                 &amp;quot;transmission&amp;quot;: {
                     &amp;quot;lossProbability&amp;quot;: 0.8,
                     &amp;quot;maxRetries&amp;quot;: 2
                },
                &amp;quot;capacity&amp;quot;:         28000000
            },
            &amp;quot;downlink&amp;quot;: {
                &amp;quot;unicast&amp;quot;: {
                    &amp;quot;delay&amp;quot;: {
                        &amp;quot;type&amp;quot;:         &amp;quot;SimpleRandomDelay&amp;quot;,
                        &amp;quot;steps&amp;quot;:        3,
                        &amp;quot;minDelay&amp;quot;:     &amp;quot;100 ms&amp;quot;,
                        &amp;quot;maxDelay&amp;quot;:     &amp;quot;200 ms&amp;quot;
                    },
                    &amp;quot;transmission&amp;quot;: {
                        &amp;quot;maxRetries&amp;quot;: 2
                    }
                },
                &amp;quot;multicast&amp;quot;: {
                    &amp;quot;delay&amp;quot;: {
                        &amp;quot;type&amp;quot;:         &amp;quot;SimpleRandomDelay&amp;quot;,
                        &amp;quot;steps&amp;quot;:        3,
                        &amp;quot;minDelay&amp;quot;:     &amp;quot;120 ms&amp;quot;,
                        &amp;quot;maxDelay&amp;quot;:     &amp;quot;220 ms&amp;quot;
                    },
                    &amp;quot;transmission&amp;quot;: {
                        &amp;quot;lossProbability&amp;quot;: 0.8
                    },
                    &amp;quot;usableCapacity&amp;quot;:   0.6
                },
                &amp;quot;capacity&amp;quot;:             42200000
            }
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Note that &lt;code&gt;nw&lt;/code&gt; represents the upper-left (north-west) point of the rectangle and &lt;code&gt;se&lt;/code&gt; the lower-right (southeast).
For further information about the possible options, please refer to the Eclipse MOSAIC API documentation.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The actual configuration of the uplink and the downlink modules for each region exhibits the identical
format as configuration of the globalNetwork in the &lt;code&gt;network.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When no regions are found, or if a node (a vehicle) is not within a specified region, the globalNetwork
defined in the &lt;code&gt;network.json&lt;/code&gt;-File will be used as the delay model.&lt;/p&gt;
&lt;h2 id=&#34;transmission-simulation&#34;&gt;Transmission simulation&lt;/h2&gt;
&lt;p&gt;One of the most important feature of the cellular simulator is an estimation of the delay experienced
through the transport over the cellular network.&lt;/p&gt;
&lt;p&gt;The cellular simulator offers various modes to estimate the delay of the transmissions. The type of
estimation is specified with by &lt;code&gt;delayType&lt;/code&gt; for the uplink and downlink for each region. You may also refer to the






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/extending_mosaic/delay_models/&#34;&gt;Delay-Chapter&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;delay.type = ’ConstantDelay’&lt;/code&gt;: The message is transmitted with the latency being exactly equal to delay.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delay.type = ’SimpleRandomDelay’&lt;/code&gt;: The latency can assume different (randomly generated and uniformly distributed) values between
&lt;code&gt;minDelay&lt;/code&gt; and &lt;code&gt;maxDelay&lt;/code&gt;. The number of different values is determined by &lt;code&gt;steps&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delay.type = ’GammaRandomDelay’&lt;/code&gt;: A gamma distribution is used to estimate the latency, with $ \alpha $ = 2 and  $ \beta $= 2. The
minimal delay &lt;code&gt;minDelay&lt;/code&gt; is added to the result. The curve is fitted so that the maximum likelihood for the delay is exactly equal to
&lt;code&gt;expDelay&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delay.type = ’GammaSpeedDelay’&lt;/code&gt;: This mode closely resembles the GammaRandomDelay. Additionally, a penalty for the velocity with which
the node is moving is calculated. This penalty is then added to the original delay. The GammaRandomDelay and the GammaSpeedDelay are
derived from a measurement campaign during a research project at the DCAITI.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The two different modes for the downlink are &lt;code&gt;unicast&lt;/code&gt; and &lt;code&gt;multicast&lt;/code&gt; which are configured separately. Multicast aims to simulate the
features of Multimedia Broadcast Multicast Service (MBMS). The main difference in terms of the transmission for unicast and multicast
is the handling of undeliverable messages. For unicast, the options &lt;code&gt;lossProbability&lt;/code&gt; and &lt;code&gt;maxRetries&lt;/code&gt; are used. Pr is short for
packet retransmit and denotes the probability for a failed delivery and a subsequent retransmit. The maximum number of retries
for the retransmission is configured through the &lt;code&gt;maxRetries&lt;/code&gt;-option. The probability of a successful
retransmit is recalculated on every try.&lt;/p&gt;
&lt;p&gt;In case of multicast the &lt;code&gt;lossProbability&lt;/code&gt; is used as packet loss rate. The value is factored into the delay calculation.
In contrast to the unicast, just one transmission attempt is made for multicast.&lt;/p&gt;
&lt;h2 id=&#34;operation&#34;&gt;Operation&lt;/h2&gt;
&lt;p&gt;Beside the transmission simulation, the Addressing and Routing is the other important aspect of the Cellular Simulator. This task is enabled
by the Geocaster.&lt;/p&gt;
&lt;p&gt;The Geocaster evaluates the message headers for cellular messages, which are created by the communicating applications in the
Application Simulator.&lt;/p&gt;
&lt;p&gt;It supports the following addressing and casting schemes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/communication-cell/#cellular-topologically-scoped-unicast&#34;&gt;CellTopocast&lt;/a&gt;&lt;/strong&gt; is a topologically-scoped unicast,
where the Geocaster simply resolves the single receiver via the IPResolver. Hence, the CellTopocast directly routes the message further.
The cell simulator can &lt;strong&gt;only&lt;/strong&gt; simulate topologically-scoped unicasts. Broadcast and anycast are not implemented,
but any transmission protocol can be used (tcp, udp).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/communication-cell/#cellular-geographically-scoped-unicast&#34;&gt;CellGeoUnicast&lt;/a&gt;&lt;/strong&gt;
addresses every node in the destination area individually.
In this way it takes a geographic address and results in a loop to generate multiple unicasts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/communication-cell/#cellular-geographically-scoped-broadcast&#34;&gt;CellGeoBroadcast&lt;/a&gt;&lt;/strong&gt;, which is basically MBMS,
uses one broadcast to all nodes in the destined regions.The MBMS uses the different transmission mode of multicast in the downlink.
CellGeoUnicast as well as CellGeoBroadcast require broadcast, but don’t allow tcp (as ack for broadcasts is denied).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Environment Simulator</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/environment_simulator/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/environment_simulator/</guid>
      <description>&lt;p&gt;This ambassador can be configured with a configuration file. The specific path is &lt;code&gt;mosaic/scenarios/&amp;lt;scenarioName&amp;gt;/environment/environment_config.json&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   └─ environment
      └─ environment_config.json ..................... Environment ambassador configuration file
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;This simulator does not need to be installed. It is delivered as part of the Eclipse MOSAIC-installation package.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Read the detailed documentation of the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/environment_config/&#34;&gt;Environment Configuration&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The root node of the configuration is a list of environment events. Each event require the type of the event, a rectangle area, a
strength and the time window. The following example shows the configuration of an &amp;ldquo;Obstacle&amp;rdquo; event which is valid in the
designated area (Rectangle) during the simulation time between 0 to 2000 seconds:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;events&amp;quot; : [
        {
            &amp;quot;type&amp;quot;: {
                &amp;quot;sensorType&amp;quot;: &amp;quot;OBSTACLE&amp;quot;,
                &amp;quot;value&amp;quot;: 1
            },
            &amp;quot;location&amp;quot;: {
                &amp;quot;area&amp;quot;: {
                    &amp;quot;type&amp;quot;: &amp;quot;Rectangle&amp;quot;,
                    &amp;quot;a&amp;quot;: {
                        &amp;quot;latitude&amp;quot;: 52.53654,
                        &amp;quot;longitude&amp;quot;: 13.42116
                    },
                    &amp;quot;b&amp;quot;: {
                        &amp;quot;latitude&amp;quot;: 52.53435,
                        &amp;quot;longitude&amp;quot;: 13.42366
                    }
                }
            },
            &amp;quot;time&amp;quot;: {
                &amp;quot;start&amp;quot;: &amp;quot;0 s&amp;quot;,
                &amp;quot;end&amp;quot;: &amp;quot;2000 s&amp;quot;
            }
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MOSAIC Battery Simulator</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/emobility_simulator_battery/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/emobility_simulator_battery/</guid>
      <description>&lt;p&gt;For simulation of electric vehicles, the &lt;strong&gt;Battery Simulator&lt;/strong&gt; handles the actual processes of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discharging&lt;/li&gt;
&lt;li&gt;Charging (in connection with a 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/emobility_simulator_charging/&#34;&gt;charging station&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Recuperation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;The &lt;strong&gt;Charging Station and Battery Simulators&lt;/strong&gt; are part of 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In order for a vehicle to move the drive train has to overcome the forces of resistance on the vehicle. Additionally, the energy of
consumers that run of the electric motor has to be generated. These forces plus the consumed energy minus the recuperation energy
build a balance that will be calculated by the battery simulator. Below is an illustration of all the forces at hand.&lt;/p&gt;















&lt;figure id=&#34;figure-simplified-model-on-applied-forces-on-vehicles&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/electric_vehicle_forces.png&#34; data-caption=&#34;Simplified model on applied forces on vehicles&#34;&gt;


  &lt;img src=&#34;../images/electric_vehicle_forces.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Simplified model on applied forces on vehicles
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;To provide for different electric vehicle types the Battery Simulator takes environment, vehicle characteristics and battery attributes into
account. One of the main features of the battery ambassador is that it can utilize dynamic class loading to use custom models, tailored to
the user&amp;rsquo;s needs. The Battery Simulator comes bundled with some basic but powerful models for






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/emobility_simulator_battery/#vehicle-model&#34;&gt;vehicles&lt;/a&gt;, 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/emobility_simulator_battery/#environment-model&#34;&gt;environment&lt;/a&gt; and the






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/emobility_simulator_battery/#battery-model&#34;&gt;battery&lt;/a&gt;. These will be explained in the following paragraphs.&lt;/p&gt;















&lt;figure id=&#34;figure-simple-overview-of-class-relations-for-the-battery-simulator&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/BatterySimulator_ClassDiagram.svg&#34; data-caption=&#34;Simple overview of class relations for the Battery Simulator&#34;&gt;


  &lt;img src=&#34;../images/BatterySimulator_ClassDiagram.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Simple overview of class relations for the Battery Simulator
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   └─ battery
      └─ battery_config.json ................. Battery ambassador configuration file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The prior discussed configuration for different models for vehicles, batteries and the environment happens in the &lt;code&gt;battery_config.json&lt;/code&gt;. For
the vehicle and battery model it is possible to define separate models per vehicle prototype and default models. Whenever an electric
vehicle is added and no models for the prototype were defined the Battery Simulator defaults to those default models. Currently, the
environment model is statically defined for all vehicles and the entire scenario.&lt;/p&gt;
&lt;h3 id=&#34;vehicle-model&#34;&gt;Vehicle model&lt;/h3&gt;
&lt;p&gt;The vehicle model holds the general properties of a vehicle influencing the battery consumption. Examples would be the weight of the vehicle, and the voltage at which the
electric engine operates. As with the other models, the provided class for the vehicle model directly affects what can be
configured here. If other properties are needed for the vehicle, this is the right place to put them. It is possible to define
separate consumers like the AC or radio, which will also have an effect on the discharging of the battery. Additionally, the recuperation support of a vehicle could be configured.&lt;/p&gt;
&lt;p&gt;To implement an own vehicle, the class &lt;code&gt;AbstractVehicleModel&lt;/code&gt; has to be extended.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bundled Model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The bundled vehicle model just allows to statically set all parameters necessary for the calculation of employed forces. It comes
pre-configured with attributes oriented on an Electric Smart. In a real-world scenario however many of these attributes are dynamic, the
weight for example changes with the amount of passengers and carried cargo.&lt;/p&gt;
&lt;h3 id=&#34;battery-model&#34;&gt;Battery model&lt;/h3&gt;
&lt;p&gt;The battery model defines the battery used by the vehicle and especially handles (dis)charging characteristics. Important properties would be the number of cells and their capacity.&lt;/p&gt;
&lt;p&gt;To implement an own battery model, the class &lt;code&gt;AbstractBatteryModel&lt;/code&gt;
needs to be extended.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bundled Models&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Battery Simulator comes bundled with two battery models, namely the &lt;code&gt;SimpleBatteryModel&lt;/code&gt; and the &lt;code&gt;LithiumIonBatteryModel&lt;/code&gt;. While the
simple model just linearly charges, discharges and recuperates energy, the lithium battery model employs a more sophisticated emulation of
the behaviors observed in real-world lithium-ion batteries. This for example includes reduced charging speeds at higher battery capacities.&lt;/p&gt;
&lt;h3 id=&#34;environment-model&#34;&gt;Environment model&lt;/h3&gt;
&lt;p&gt;Environmental factors like rolling resistance of the given underground or air drag go into this section. At the current state, a basic environment model is bundled with the Battery Simulator. To implement a custom environment
model, &lt;code&gt;AbstractEnvironmentModel&lt;/code&gt; has to be extended.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bundled Model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The bundled model includes basic environmental constants, which can deviate slightly with different altitudes, weather conditions and the
likes. However, for most applications static definitions should be sufficient.&lt;/p&gt;
&lt;h3 id=&#34;example-configuration&#34;&gt;Example configuration&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;defaultVehicleModel&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;SimpleVehicleModel&amp;quot;,
        &amp;quot;vehicleMass&amp;quot;: &amp;quot;1060 kg&amp;quot;,
        &amp;quot;referenceArea&amp;quot;: 1.95,
        &amp;quot;dragCoefficient&amp;quot;: 0.375,
        &amp;quot;tankToWheelEfficiency&amp;quot;: 0.7,
        &amp;quot;electricMotorOperatingVoltage&amp;quot;: &amp;quot;350 V&amp;quot;,
        &amp;quot;consumerOperatingVoltage&amp;quot;: &amp;quot;12 V&amp;quot;,
        &amp;quot;recuperationEfficiency&amp;quot;: 1.0,
        &amp;quot;maxRecuperationPower&amp;quot;: 60e3,
        &amp;quot;electricConsumers&amp;quot;: [
            { &amp;quot;Radio&amp;quot;: 10 },
            { &amp;quot;HeadLight&amp;quot;: 100 }
        ]
    },
    &amp;quot;defaultBatteryModel&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;SimpleBatteryModel&amp;quot;,
        &amp;quot;cells&amp;quot;: 100,
        &amp;quot;cellVoltage&amp;quot;: &amp;quot;5 V&amp;quot;,
        &amp;quot;cellCapacity&amp;quot;: &amp;quot;100 Ah&amp;quot;,
        &amp;quot;chargingEfficiency&amp;quot;: 0.8,
        &amp;quot;minStateOfCharge&amp;quot;: 1,
        &amp;quot;maxStateOfCharge&amp;quot;: 1
    },
    &amp;quot;vehicleModelMap&amp;quot;: {
        &amp;quot;prototype_1&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;SimpleVehicleModel&amp;quot;,
            &amp;quot;vehicleMass&amp;quot;: &amp;quot;1060 kg&amp;quot;,
            &amp;quot;referenceArea&amp;quot;: 1.95,
            &amp;quot;dragCoefficient&amp;quot;: 0.375,
            &amp;quot;tankToWheelEfficiency&amp;quot;: 0.7,
            &amp;quot;electricMotorOperatingVoltage&amp;quot;: &amp;quot;350 V&amp;quot;,
            &amp;quot;consumerOperatingVoltage&amp;quot;: &amp;quot;12 V&amp;quot;,
            &amp;quot;recuperationEfficiency&amp;quot;: 1.0,
            &amp;quot;maxRecuperationPower&amp;quot;: 60e3,
            &amp;quot;electricConsumers&amp;quot;: [
                { &amp;quot;Radio&amp;quot;: 10 },
                { &amp;quot;HeadLight&amp;quot;: 100 }
            ]
        }
    },
    &amp;quot;batteryModelMap&amp;quot;: {
        &amp;quot;prototype_1&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;SimpleBatteryModel&amp;quot;,
            &amp;quot;cells&amp;quot;: 100,
            &amp;quot;cellVoltage&amp;quot;: &amp;quot;5 V&amp;quot;,
            &amp;quot;cellCapacity&amp;quot;: &amp;quot;100 Ah&amp;quot;,
            &amp;quot;chargingEfficiency&amp;quot;: 0.8,
            &amp;quot;minStateOfCharge&amp;quot;: 1,
            &amp;quot;maxStateOfCharge&amp;quot;: 1
        }
    },
    &amp;quot;environmentModel&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;DefaultEnvironmentModel&amp;quot;,
        &amp;quot;fluidDensity&amp;quot;: 1.293,
        &amp;quot;rollingResistanceCoefficient&amp;quot;: 0.01,
        &amp;quot;gravitationalAcceleration&amp;quot;: 9.81
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This listing shows how the vehicle, environment and battery model classes for the bundled models are configured.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Charging Station Simulator</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/emobility_simulator_charging/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/emobility_simulator_charging/</guid>
      <description>&lt;p&gt;With the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/emobility_simulator_battery/&#34;&gt;Battery Simulator&lt;/a&gt;, MOSAIC Extended offers advanced simulation for the processes of discharging and recuperation. For holistic scenarios, the &lt;strong&gt;Charging Station Simulator&lt;/strong&gt; extends the modeling characteristics of electric vehicles as it validates charging requests from vehicles to control re-charging. An overview of how the simulators interact (and the used interactions) can be seen below.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;The &lt;strong&gt;Charging Station and Battery Simulators&lt;/strong&gt; are part of 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;















&lt;figure id=&#34;figure-overview-of-battery--charging-station-simulator-interaction&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/ChargingStation_Battery_InteractionFlowChart.svg&#34; data-caption=&#34;Overview of Battery &amp;amp; Charging Station Simulator interaction&#34;&gt;


  &lt;img src=&#34;../images/ChargingStation_Battery_InteractionFlowChart.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Overview of Battery &amp;amp; Charging Station Simulator interaction
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;As can be seen from the interaction-chart above, the Charging Station Simulator is receiving and processing the
&lt;code&gt;VehicleChargingStartRequest&lt;/code&gt;-interactions. This involves checking if requested charging stations have available spaces, the vehicle is in
charging range and some additional constraints. Furthermore, if a vehicle moves out of charging range or is removed from simulation it will
automatically stop being charged. If a &lt;code&gt;VehicleChargingStartRequest&lt;/code&gt; is successfully validated, a &lt;code&gt;BatteryChargingStart&lt;/code&gt;-interaction is
forwarded to the Battery simulator. Additionally, whenever a charging station is updated (vehicle un-/docked) the ambassador sends a
&lt;code&gt;ChargingStationUpdate&lt;/code&gt;-interaction to all subscribed simulators.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   └─ charging
      └─ charging_config.json ................. Charging Station ambassador configuration file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration of actual charging stations happens in the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_mapping/#entities&#34;&gt;Mapping configuration&lt;/a&gt;. The only parameter
configured in the &lt;em&gt;charging_config.json&lt;/em&gt; is a global parameter for the maximum range of a charging station. This allows for abstract
modeling of charging stations, without the need of being super accurate with the stop positions of vehicles.&lt;/p&gt;
&lt;h3 id=&#34;example-configuration&#34;&gt;Example configuration&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;chargingStationRange&amp;quot;: &amp;quot;20m&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
