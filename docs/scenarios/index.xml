<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scenario Overview | Eclipse MOSAIC – A Multi-Domain and Multi-Scale Simulation Framework for Connected and Automated Mobility</title>
    <link>https://www.eclipse.dev/mosaic/docs/scenarios/</link>
      <atom:link href="https://www.eclipse.dev/mosaic/docs/scenarios/index.xml" rel="self" type="application/rss+xml" />
    <description>Scenario Overview</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 05 May 2019 00:00:00 +0100</lastBuildDate>
    <image>
      <url>https://www.eclipse.dev/mosaic/images/logo.svg</url>
      <title>Scenario Overview</title>
      <link>https://www.eclipse.dev/mosaic/docs/scenarios/</link>
    </image>
    
    <item>
      <title>Scenario-Convert Tool</title>
      <link>https://www.eclipse.dev/mosaic/docs/scenarios/scenario_convert/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/scenarios/scenario_convert/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;&lt;strong&gt;scenario-convert&lt;/strong&gt; does not belong do the open-source part of Eclipse MOSAIC and must be obtained separately.&lt;/p&gt;
&lt;p&gt;Yet, you can use scenario-convert &lt;strong&gt;for free&lt;/strong&gt; to generate scenarios which are executable with Eclipse MOSAIC. &lt;strong&gt;




&lt;a href=&#34;https://www.dcaiti.tu-berlin.de/research/simulation/download/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Get it here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;


    

&lt;a class=&#34;mosaic-btn mosaic-btn-primary&#34; href=&#34;https://www.dcaiti.tu-berlin.de/research/simulation/download/&#34; title=&#34;Download scenario-convert from DCAITI mirror&#34;&gt;&lt;i class=&#34;fas fa-download&#34;&gt;&lt;/i&gt;Download scenario-convert from DCAITI mirror&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Download the &lt;code&gt;scenario-convert-25.0.zip/tar.gz&lt;/code&gt; bundle from the mirror above.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Extract the package to an arbitrary path. It is recommended to extract the package in the very same directory as
MOSAIC (&lt;code&gt;&amp;lt;mosaic-root&amp;gt;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Use the call &lt;code&gt;scenario-convert.bat/sh&lt;/code&gt; on the command line to execute the tool.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;usage-of-scenario-convert&#34;&gt;Usage of scenario-convert&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;The 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/tutorials/create_new_scenario/&#34;&gt;Create a new Scenario Tutorial&lt;/a&gt; provides a detailed introduction to the scenario-convert tool.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Scenario-convert can be used for a lot of different operations. In the following we first explain its operation modes, then general
arguments for this tool, and finally we list all of its use cases, provide examples and explain arguments used to achieve the results.&lt;/p&gt;
&lt;h2 id=&#34;operation-modes&#34;&gt;Operation Modes&lt;/h2&gt;
&lt;p&gt;Scenario-convert offers various operation modes, which are followed by various additional parameters to solve specific use-cases to prepare
your MOSAIC scenario. The use-cases are described further below. The following operation modes exist:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operation Mode&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--db2sumo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Exports the scenario database to a SUMO network file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--db2mosaic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Creates directory structure for a MOSAIC scenario based on the database .&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--db2geojson&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Exports the scenario database into GeoJSON format.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--osm2db&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Converts an OpenStreetMap file to a new scenario database.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--osm2sumo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Combination of &lt;code&gt;--osm2db&lt;/code&gt; and &lt;code&gt;--db2sumo&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--osm2mosaic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Combination of &lt;code&gt;--osm2db&lt;/code&gt; and &lt;code&gt;--db2mosaic&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--srtm2db&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Imports an SRTM file and writes elevation data to nodes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--sumo2db&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Converts a SUMO Network to a new scenario database, or imports routes to an existing scenario.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--sumo2mosaic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Combination of &lt;code&gt;--sumo2db&lt;/code&gt; and &lt;code&gt;--db2mosaic&lt;/code&gt;. When provided with a &lt;code&gt;*.sumocfg&lt;/code&gt; file, this mode converts an existing SUMO scenario to a MOSAIC scenario.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--generate-routes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Generates route(s) from one point to another. Can be used alone with existing databases, or be used in combination with other operation modes.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;general-arguments&#34;&gt;General Arguments&lt;/h2&gt;
&lt;p&gt;The following arguments are relevant for all operation modes and use cases:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prints the help screen of the scenario-convert tool&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-d&lt;/code&gt;, &lt;code&gt;--database &amp;lt;PATH&amp;gt; &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The path to the scenario database&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-i&lt;/code&gt;, &lt;code&gt;--input &amp;lt;PATH&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The path to the input file. The file type depends on the use case, see the sections below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-f&lt;/code&gt;, &lt;code&gt;--force&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Force overwrite of existing files instead of incrementing file names&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-c&lt;/code&gt;, &lt;code&gt;--config-file &amp;lt;PATH&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Optional&lt;/strong&gt;, refers to a configuration file which contains all parameters in JSON format (see 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/scenario_convert/#configuration-files-for-scenario-convert&#34;&gt;section below&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;use-case-overview&#34;&gt;Use case overview&lt;/h2&gt;
&lt;p&gt;In the following, we explain the usage of Scenario-convert in the context of typical use-cases when it comes to scenario creation:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;▶️ 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/scenario_convert/#-create-mosaic-scenario-from-osm-file&#34;&gt;Create MOSAIC scenario from OSM file&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;▶️ 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/scenario_convert/#-create-mosaic-scenario-from-sumo-file&#34;&gt;Create MOSAIC scenario from SUMO file&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;▶️ 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/scenario_convert/#-createimport-routes-for-existing-mosaic-scenario&#34;&gt;Create/Import routes for existing MOSAIC scenario&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;▶️ 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/scenario_convert/#-import-height-information-to-existing-mosaic-scenario&#34;&gt;Import height information to existing MOSAIC scenario&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;▶️ 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/scenario_convert/#-export-database-or-routes-to-geojson-files&#34;&gt;Export database or routes to GeoJson&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-create-mosaic-scenario-from-osm-file&#34;&gt;&lt;strong&gt;▶️ Create MOSAIC scenario from OSM file&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;There are two ways to create a MOSAIC scenario from an OSM file using scenario-convert.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Using a single call with &lt;code&gt;--osm2mosaic&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The easiest method to create a MOSAIC scenario from OSM data is to use scenario-convert with the argument &lt;code&gt;--osm2mosaic&lt;/code&gt;. One only needs to
specify the path to the input OSM file. The OSM file will first be used to create a scenario database containing road network information.
Afterward, the MOSAIC scenario folder structure and SUMO connection, edge, network, node, route, and config files are created.
You can also use additional arguments alongside this, for example &lt;code&gt;--generate-routes&lt;/code&gt;. Because of this argument, routes are generated
randomly and added to the scenario database before the scenario is exported to SUMO files&lt;/p&gt;
&lt;p&gt;The call for the described example would look like this: &lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scenario-convert.bat --osm2mosaic -i &#39;/path/to/map.osm&#39; --generate-routes 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Using two separate calls with the option &lt;code&gt;--osm2db&lt;/code&gt; and &lt;code&gt;--db2mosaic&lt;/code&gt; subsequently:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This works very similarly to the first approach, but gives you more control with handling the database-file. The first call creates the
database from the OSM file. Currently, there is only the database file that contains all relevant road network information. It is possible
to now alter the database, for example by generating routes or including elevation information. How to do both of these is described below.
After all changes to the database are completed, you can now call scenario-convert a second time using the second argument and create a
complete MOSAIC scenario structure and SUMO connection, edge, network, node, route, and config files from the database.&lt;/p&gt;
&lt;p&gt;Example calls for this approach would look like this: &lt;br&gt;
&lt;strong&gt;First call:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scenario-convert.bat --osm2db -i &#39;/path/to/map.osm&#39; -d &#39;/path/to/database.db&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;-d&lt;/code&gt; argument here is optional. If not specified, the database will be created in the same folder that the OSM file is in. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second call:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scenario-convert.bat --db2mosaic -d &#39;/path/to/database.db&#39; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Additional arguments usable with &lt;code&gt;--osm2xxx&lt;/code&gt; arguments&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--generate-routes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Without additional configuration this generates routes between all border points/dead ends in the OSM map. All generated routes will be added to the database&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--import-buildings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Activates import of building information into the database&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--osm-speeds-file &amp;lt;Path&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Define a property file which contains speed information which are used to set the speed for OSM ways without a max speed tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--osm-speeds-overwrite&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If set to true , the maxspeed tags of ways are ignored and replaced by either default values , or by speed information defined via the &lt;code&gt;--osm-speeds-file&lt;/code&gt; argument&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--skip-graph-cleanup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Turns off the removal of unconnected parts from the main traffic network graph . Since several components of MOSAIC require one main graph without disconnected ways and nodes, this option should be used only if the cleanup procedure is faulty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--skip-osm-filter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Skips automatic filtering of the OSM file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--skip-turn-restrictions&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Ignore all defined turn restrictions on OSM import&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--split-connections&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Connections are built for each adjacent node during OSM Import instead of having geometry nodes. This results in much larger networks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-s; --sumo-prefix &amp;lt;String&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prefix for the SUMO files generated during the process (uses database name when not defined)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-create-mosaic-scenario-from-sumo-file&#34;&gt;&lt;strong&gt;▶️ Create MOSAIC scenario from SUMO file&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;If you want to convert an already existing SUMO scenario to a usable MOSAIC scenario, you can do that in two distinct ways as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Using a single call with &lt;code&gt;--sumo2mosaic&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The concept of this is the same as for creating a MOSAIC scenario from an OSM file. Simply specify the path to the sumocfg file of your
existing SUMO scenario. Scenario-convert will then wrap the existing SUMO scenario in a MOSAIC scenario by moving SUMO files to the MOSAIC
scenarios sumo folder, creating all other relevant MOSAIC files and importing the net and route file into the MOSAIC database.&lt;/p&gt;
&lt;p&gt;This examples call would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scenario-convert.bat --sumo2mosaic -i &#39;/path/to/sumo.sumocfg&#39; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Using two separate calls with the option &lt;code&gt;--sumo2db&lt;/code&gt; and &lt;code&gt;--db2mosaic&lt;/code&gt; subsequently:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This works similar to the first approach, but, as for the process from OSM, gives you more control with handling the database file. However,
in this case the functionality of the &lt;code&gt;--sumo2db&lt;/code&gt; argument is defined by further arguments in the call. For creating a new database from a
SUMO network file pass the &lt;code&gt;-i&lt;/code&gt; argument with a path to a SUMO network file. This way, the network file is read and its contents written
into a new database file. The second call with &lt;code&gt;--db2mosaic&lt;/code&gt; now creates a complete MOSAIC scenario structure, while keeping the existing
SUMO files from the original scenario.&lt;/p&gt;
&lt;p&gt;Example calls for this approach would look like this: &lt;br&gt;
&lt;strong&gt;First call:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scenario-convert.bat --sumo2db -i &#39;/path/to/sumo.net.xml&#39; --import-zone 33n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The import zone is important for the projection of the coordinates. It is the UTM zone your scenario lies in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second call:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scenario-convert.bat --db2mosaic -d &#39;/path/to/database.db&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Additional Arguments with &lt;code&gt;--sumo2xxx&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--import-lat &amp;lt;Double&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Center latitude of imported region. Used to project coordinates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--import-lon &amp;lt;Double&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Center longitude of imported region. Used to project coordinates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--import-zone &amp;lt;String&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;UTM zone of location for projecting coords in default format (e.g. 32u)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-s; --sumo-prefix &amp;lt;String&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Prefix for the SUMO files generated during the process (uses database name when not defined)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-createimport-routes-for-existing-mosaic-scenario&#34;&gt;&lt;strong&gt;▶️ Create/Import routes for existing MOSAIC scenario&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Often you have an existing database representing your road network but no routes for vehicles yet. Routes can be either created from
scratch or imported from SUMO route files using scenario-convert.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Import a SUMO route file into a database:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Importing a route file is possible with just a single call of scenario-convert. This call reads the routes in the file, saves each routes id
and edges, and creates objects in the database for them.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scenario-convert.bat --sumo2db -d &#39;/path/to/database.db&#39; -i &#39;/path/to/routefile.rou.xml&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Notice that the argument &lt;code&gt;--sumo2db&lt;/code&gt; has different functionality depending on if the input &lt;code&gt;-i&lt;/code&gt; is a &lt;strong&gt;route.rou.xml&lt;/strong&gt; or a
&lt;strong&gt;network.net.xml&lt;/strong&gt; file. Both load the respective routes/network into the database if the &lt;code&gt;-d&lt;/code&gt; argument is given as well, but it is not
possible to create a database from a route file by omitting the &lt;code&gt;-d&lt;/code&gt; argument, which is possible for network files.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2. Creating new routes:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Creating new routes with scenario-convert can be done in two ways. Either by creating random routes through the network using only
&lt;code&gt;--generate-routes&lt;/code&gt; or by additionally specifying start and end point of the route you want to create. Random routes are always created
based on road end points in your network, meaning they always range from one edge of the map to another or from dead end to dead end.
You can also specify start and end point of a route, either in geo coordinates or through node IDs.&lt;/p&gt;
&lt;p&gt;The following examples showcase multiple approaches to generating routes using scenario-convert.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Generate X random end-to-end routes using &lt;code&gt;-g / --generate-routes&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you want to generate many routes fast this option is the best possibility to do that.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scenario-convert.bat --generate-routes -d &#39;/path/to/database.db&#39; --max-number-of-routes X
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can cap the number of routes generated by passing the argument &lt;code&gt;--max-number-of-routes X&lt;/code&gt;, where X is a positive integer.
Scenario-convert then generates a maximum of X routes. If you don&amp;rsquo;t pass this argument, all possible routes for your road network are
calculated. This is not recommended for large networks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Calculate a single route from point A to point B:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In contrast to the example above, if a start and end point is given, scenario-convert only calculates a single route between these points
if &lt;code&gt;--max-number-of-routes&lt;/code&gt; is not given.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scenario-convert.bat --generate-routes -d &#39;/path/to/database.db&#39; --route-begin-latlon 52.526371,13.314075 --route-end-latlon 52.512879,13.320099
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The points can be given in geo coordinates or as node IDs. If given in geo coordinates, make sure the coordinates are within the area of
your scenario network.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Calculate X alternative routes from point A to point B:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If start and end point are given and &lt;code&gt;--max-number-of-routes X&lt;/code&gt; is passed, where X is a positive integer, scenario-convert calculates
multiple routes between the points, with a maximum of X alternatives. It is not guaranteed, that X routes are calculated.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scenario-convert.bat --generate-routes -d &#39;/path/to/database.db&#39; --route-begin-latlon 52.526371,13.314075 --route-end-latlon 52.512879,13.320099 --max-number-of-routes X
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Calculate all possible routes between a list of points:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you want to calculate routes between multiple points you can pass a list of node IDs with the argument &lt;code&gt;--route-matrix&lt;/code&gt;.
This will generate all possible routes between all points in this list.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scenario-convert.bat --generate-routes -d &#39;/path/to/database.db&#39; --route-matrix &#39;12345,98765,13579&#39; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. View all routes in a database:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you have already created routes and want to view them without using external tools you can use the argument &lt;code&gt;--list-routes&lt;/code&gt;.
In combination with &lt;code&gt;-d&lt;/code&gt; to set the path to the database you want to view, this outputs a summary of all routes in the database consisting
of route ID, start node ID, end node ID, and route length in meter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;View routes in a database by using the follwing call:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scenario-convert.bat --list-routes -d &#39;/path/to/database.db&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Additional arguments with &lt;code&gt;--generate-routes&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--clear-routes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Clear existing routes from the database before adding new ones&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--list-routes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;List all existing routes from the scenario database&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--route-begin-lat &amp;lt;Double&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Latitude of route starting point, needs &lt;code&gt;--route-begin-lon&lt;/code&gt; as well&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--route-begin-lon &amp;lt;Double&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Longitude of route starting point, needs &lt;code&gt;--route-begin-lat&lt;/code&gt; as well&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--route-begin-latlon &amp;lt;Double,Double&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Latitude and longitude of route starting point&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--route-begin-node-id &amp;lt;String&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;OSM node id of the starting point (use instead of lat/lon)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--route-end-lat &amp;lt;Double&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Latitude of route end point, needs &lt;code&gt;--route-end-lon&lt;/code&gt; as well&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--route-end-lon &amp;lt;Double&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Longitude of route end point, needs &lt;code&gt;--route-end-lat&lt;/code&gt; as well&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--route-end-latlon &amp;lt;Double,Double&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Latitude and longitude of route end point&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--route-end-node-id &amp;lt;String&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;OSM node id of the end point (use instead of lat/lon)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--route-matrix &amp;lt;String,String&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Calculates all possible routes starting and ending at the given nodes, given as comma-separated list&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-import-height-information-to-existing-mosaic-scenario&#34;&gt;&lt;strong&gt;▶️ Import height information to existing MOSAIC scenario&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Importing height information into the database can be done with the argument &lt;code&gt;--srtm2db&lt;/code&gt;. It requires a SRTM file, whose elevation data
is then written to the nodes of an existing database.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An example call would look like this:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scenario-convert.bat --srtm2db -i &#39;/path/to/srtm.geotiff&#39; -d &#39;/path/to/database.db&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;-export-database-or-routes-to-geojson-files&#34;&gt;&lt;strong&gt;▶️ Export database or routes to GeoJson files&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes you might want to export the contents of your database into a GeoJSON format. For example for visualizations of your road network
using QGIS.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use this scenario convert call for this purpose:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scenario-convert.bat --db2geojson -d &#39;/path/to/database.db&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will export the database content into a .geojson file with the same name as the database.&lt;/p&gt;
&lt;h2 id=&#34;configuration-files-for-scenario-convert&#34;&gt;Configuration-files for scenario-convert&lt;/h2&gt;
&lt;p&gt;Scenario-convert offers a way to safe your conversion-parameters in a &lt;code&gt;JSON&lt;/code&gt; configuration file using
the option &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--config-file&lt;/code&gt;.&lt;br&gt;
The following listing shows how to save the options used in the example above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;#34;operatingMode&amp;#34;: &amp;#34;osm2mosaic&amp;#34;,
  &amp;#34;inputFile&amp;#34;: &amp;#34;steglitz.osm&amp;#34;,
  &amp;#34;executeOsmosis&amp;#34;: true,
  &amp;#34;generateRoutes&amp;#34;: true,
  &amp;#34;routeBeginLatLon&amp;#34;: &amp;#34;52.457616,13.318392&amp;#34;,
  &amp;#34;routeEndLatLon&amp;#34;: &amp;#34;52.454774,13.333554&amp;#34;,
  &amp;#34;maxNumberOfRoutes&amp;#34;: 3
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;speed-files&#34;&gt;Speed-files&lt;/h2&gt;
&lt;p&gt;Below you can find a properties file which can be used during the import of OSM data
in order to define speeds for ways, which do not have a maxspeeds-tag defined. For this purpose use the
option &lt;code&gt;--osm-speeds-file &amp;lt;FILE&amp;gt;&lt;/code&gt;. In the speed properties file, for each way type a speed value can
be defined, according to the OSM 




&lt;a href=&#34;http://wiki.openstreetmap.org/wiki/Key:highway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;highway&lt;/code&gt;&lt;/a&gt; key.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# the unit the speed values are defined in [kmh, ms]
speed.unit = kmh

# the default speed for all way types which are not defined here
speed.default = 30
        
# autobahn
highway.motorway = 130
highway.motorway_link = 70

# bundesstrasse (germany)
highway.trunk = 70
highway.trunk_link = 65

# linking bigger town
highway.primary = 65
highway.primary_link = 60

# linking towns &amp;#43; villages
highway.secondary = 60
highway.secondary_link = 50

#streets without middle line separation
highway.tertiary = 50
highway.tertiary_link = 40
highway.residential = 30

#special roads
highway.living_street = 5
highway.service = 20

# unclassified roads
highway.unclassified = 30
highway.road = 20

# forest tracks
highway.track 15
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Additional Scenario Configuration</title>
      <link>https://www.eclipse.dev/mosaic/docs/scenarios/scenario_configuration/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/scenarios/scenario_configuration/</guid>
      <description>&lt;p&gt;This page aims to give you a brief overview of additional simulators and visualizers that can be used with Eclipse MOSAIC. For this the Steglitz scenario from 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/tutorials/create_new_scenario/&#34;&gt;&amp;ldquo;Create a new Scenario&amp;rdquo;-Tutorial&lt;/a&gt; is being used. For more detailed explanations of the configurations have a
look at 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/&#34;&gt;the overview&lt;/a&gt;.&lt;br&gt;
If you already played with the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/tutorials/barnim_simulation_basics/&#34;&gt;Barnim&lt;/a&gt;-tutorial, you probably noticed that it contains far
more folders in the scenario structure compared to the Steglitz example. Those additional directories contain
configurations for various simulators.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ Barnim
   ├─ application
   ├─ cell
   ├─ environment
   ├─ mapping
   ├─ ns3
   ├─ output
   ├─ sns
   ├─ sumo
   └─ scenario_config.json .................. General configuration of the simulation scenario
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;let-the-cars-loose&#34;&gt;Let the cars loose&lt;/h2&gt;
&lt;p&gt;As a starting point we&amp;rsquo;ll look at the scenario that we created using this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scenario-convert.sh --osm2mosaic -i steglitz.osm --generate-routes
--route-begin-latlon 52.4551693,13.3193474 --route-end-latlon 52.4643101,13.3206834 --max-number-of-routes 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll end up with a folder looking like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ steglitz
   ├─ application
   |  └─ steglitz.db
   ├─ mapping
   |  └─ mapping_config.json
   ├─ sumo
   |  ├─ steglitz.net.xml
   |  └─ steglitz.sumocfg
   └─ scenario_config.json .................. General configuration of the simulation scenario
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have a look in the 





  
  

    

    
    

    
    
      
        
          
            
            
            
          
        
      
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/files/steglitz_mapping_config.json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mapping_config.json&lt;/a&gt;,
you can see that the scenario-convert script automatically assigns cars to the three routes created. You can use this
file as a blueprint for your own scenario, have a look 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/#applications-and-mapping&#34;&gt;here&lt;/a&gt;
to get more details on possible adaptions.&lt;br&gt;
Below is a short video of the scenario displayed in the SUMO-GUI. We marked the three different routes the cars
follow.&lt;/p&gt;












  


&lt;video controls &gt;
  &lt;source src=&#34;../images/steglitz_routes.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;h2 id=&#34;communication-simulators-cell-ns3-omnetpp-sns&#34;&gt;Communication Simulators (cell, ns3, omnetpp, sns)&lt;/h2&gt;
&lt;p&gt;We won&amp;rsquo;t implement any functionality for the steglitz example here but rather have a look at the






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/tutorials/barnim_simulation_basics/&#34;&gt;Barnim&lt;/a&gt;-tutorial. In the &lt;code&gt;scenario_config.json&lt;/code&gt; of the Barnim scenario you can see where the
communication simulators are activated:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;federates&amp;quot;: {
    &amp;quot;cell&amp;quot;: false,
    &amp;quot;omnetpp&amp;quot;: false,
    &amp;quot;ns3&amp;quot;: false,
    &amp;quot;sns&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/tutorials/&#34;&gt;tutorials&lt;/a&gt; and 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/tutorials/additional_examples/&#34;&gt;additional examples&lt;/a&gt; demonstrate use cases for
communication usages and you should have a look at them if you are uncertain where to start. Furthermore we
recommend copying the configuration-files for the simulator you are going to use from the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/tutorials/barnim_simulation_basics/&#34;&gt;Barnim scenario&lt;/a&gt;. It
contains the most complete configurations and is well maintained.&lt;br&gt;
If you are an expert with one of the external network simulators (





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_ns3/&#34;&gt;ns3&lt;/a&gt;,






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_omnetpp/&#34;&gt;OMNeT++&lt;/a&gt;) the Barnim scenario will also give
you an overview on how to configure those.&lt;/p&gt;
&lt;h2 id=&#34;other-simulators&#34;&gt;Other Simulators&lt;/h2&gt;
&lt;p&gt;In order to employ other simulators for the scenario, make sure to have it enabled in the &lt;code&gt;scenario_config.json&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;environment-simulator&#34;&gt;Environment Simulator&lt;/h3&gt;
&lt;p&gt;The Environment Simulator can be used to emit events to vehicles inside predefined borders. In the Barnim scenario
the Environment Simulator is used to simulate an icy area, which is then noticed by the sensors of equipped vehicles.&lt;br&gt;
Every defined event requires a type, a defined geographical area (e.g. circular, rectangular), the strength and a time frame. Have a look
at the 





  
  

    

    
    

    
    
      
        
          
            
            
            
          
        
      
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/files/eventserver_config.json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;environment_config.json&lt;/a&gt; to see how this can be configured.&lt;/p&gt;
&lt;h3 id=&#34;battery-simulator&#34;&gt;Battery Simulator&lt;/h3&gt;
&lt;p&gt;The Battery Simulator allows to simulate discharging and recuperation of electric vehicles, and in connection with the
Charging Station Simulator also re-charging. It offers a lot of customization, as you can
dynamically load your own battery, vehicle and environment models. Have a look a the 





  
  

    

    
    

    
    
      
        
          
            
            
            
          
        
      
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/files/battery_config.json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;battery_config.json&lt;/a&gt;,
taken from the Barnim scenario.&lt;/p&gt;
&lt;h3 id=&#34;charging-station-simulator&#34;&gt;Charging Station Simulator&lt;/h3&gt;
&lt;p&gt;The Charging Station Simulator extends the modeling possibilities of the Battery Simulator for re-charging.
Since Charging Stations are also application units in the Application Simulator, most of the configuration and modeling is
provided by mapping a possible application to the charging station.
Accordingly, the 





  
  

    

    
    

    
    
      
        
          
            
            
            
          
        
      
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/files/charging_config.json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;charging_config.json&lt;/a&gt; covers, with the charging station range, merely one parameter.&lt;/p&gt;
&lt;h2 id=&#34;output&#34;&gt;Output&lt;/h2&gt;
&lt;p&gt;There are various options to generate output results of your simulations (see the






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/visualization/filevis/&#34;&gt;Visualization chapter&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The first step is to create a file called &lt;code&gt;output_config.xml&lt;/code&gt; in a new directory called &lt;code&gt;output&lt;/code&gt;.
If you used the scenario-convert tool the file should be generated automatically.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ steglitz
   ├─ application
   |  └─ steglitz.db
   ├─ mapping
   |  └─ mapping_config.json
   ├─ output
   |  └─ output_config.xml
   ├─ sumo
   |  ├─ steglitz.net.xml
   |  └─ steglitz.sumocfg
   └─ scenario_config.json .................. General configuration of the simulation scenario
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example configuration for output generation can be taken from the example scenarios from the tutorials section.&lt;/p&gt;
&lt;p&gt;Finally, make sure the visualization federate is activated in the &lt;code&gt;scenario_config.json&lt;/code&gt;.&lt;/p&gt;
&lt;!--
```xml
&lt;!-- Visualization -- &gt;
&lt;federate id=&#34;output&#34; active=&#34;true&#34;/&gt;
```

Now we have to configure the statistics visualizer itself. This [visualizer_config.xml](/docs/scenarios/files/steglitz_visualizer_config.xml) contains the basic
configuration to calculate the average travel times for the vehicles. If you want to make adaptions, please
refer to [statistics visualizer](/docs/visualization/statistics).  
Go ahead and run the simulation one more time. Afterwards the log-directory should contain a file called 
`AverageVehicleTravelTime.csv` in a directory called `StatisticsVisualizer`:
```csv
group;group-value;total;
Car;186.369;336;
```
This tells us that there was a total amount of 336 vehicles of the type `Car` in the simulation, which traveled
for 186.369  seconds on average.
--&gt;
</description>
    </item>
    
    <item>
      <title>Run Simulation Series</title>
      <link>https://www.eclipse.dev/mosaic/docs/scenarios/run_simulation_series/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/scenarios/run_simulation_series/</guid>
      <description>&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;The &lt;strong&gt;Simulation Runner&lt;/strong&gt; is part of &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This chapter explains how to efficiently run a simulation series of a scenario using the Simulation Runner.&lt;/p&gt;
&lt;p&gt;The Simulation Runner is a tool for automatic simulation parametrization and execution. It provides a comfortable way to configure the execution of multiple simulations, e.g. of simulation series including several runs where only few parameters are changed in each run. With the Simulation Runner, a simulation series can be defined, for example, where the V2X penetration rate is changed in each simulation run. As a result, all  Eclipse MOSAIC simulation runs are started automatically according to the defined parameters.&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;The Simulation Runner is started as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./simulation-runner.sh -c /scenarios/&amp;lt;scenario_name&amp;gt;/simrunner_config.xml -u &amp;lt;user-id&amp;gt; -p &amp;lt;number_of_parallel_simulations&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;On Windows use &lt;code&gt;simulation-runner.bat&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The configuration file &lt;code&gt;/scenarios/&amp;lt;scenario_name&amp;gt;/mosaic/simrunner_config.xml&lt;/code&gt; contains the parameterization information.&lt;/p&gt;
&lt;p&gt;With the option &lt;code&gt;-e&lt;/code&gt; the Eclipse MOSAIC executable can be passed. Passing the Eclipse MOSAIC executable is optional if it is located in the mosaic folder or given in the &lt;code&gt;simrunner_config.xml&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The following example shows a complete configuration. Using this configuration, the Simulation Runner would try to run a scenario called Barnim while adapting the mapping, the configuration file of SNS, and Eclipse MOSAIC configuration files. The actual simulation is triggered by generating an adapted scenario folder and calling the same executable the user would normally trigger himself.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;configuration&amp;gt;

  &amp;lt;!-- basic configuration --&amp;gt;
  &amp;lt;mosaic 
      location=&amp;quot;/path/to/mosaic_folder&amp;quot; 
      executable=&amp;quot;mosaic.sh&amp;quot; 
      parallelSimulations=&amp;quot;2&amp;quot; /&amp;gt;
  &amp;lt;scenario 
      name=&amp;quot;Barnim&amp;quot; 
      config=&amp;quot;scenarios/Barnim/scenario_config.json&amp;quot; 
      persistent=&amp;quot;false&amp;quot; 
      progressLogger=&amp;quot;false&amp;quot;&amp;gt;
      &amp;lt;!--argument&amp;gt;-o TRACE&amp;lt;/argument--&amp;gt;
      &amp;lt;!--argument&amp;gt;-w 0&amp;lt;/argument--&amp;gt;
  &amp;lt;/scenario&amp;gt;
  
  &amp;lt;!-- define connected values for controlled changes --&amp;gt;
  &amp;lt;dimension name=&amp;quot;PenetrationRates&amp;quot;&amp;gt;
     &amp;lt;parameter name=&amp;quot;V2XVehiclePercentage&amp;quot; 
         file=&amp;quot;mapping/mapping_config.json&amp;quot; 
         fileFormat=&amp;quot;json&amp;quot; item=&amp;quot;vehicles[0].types[0].weight&amp;quot; 
         type=&amp;quot;ValueList&amp;quot;&amp;gt;
         &amp;lt;value&amp;gt;0.0&amp;lt;/value&amp;gt;
         &amp;lt;value&amp;gt;0.5&amp;lt;/value&amp;gt;
         &amp;lt;value&amp;gt;0.75&amp;lt;/value&amp;gt;
     &amp;lt;/parameter&amp;gt;
     &amp;lt;parameter name=&amp;quot;ClassicVehiclePercentage&amp;quot; 
         file=&amp;quot;mapping/mapping_config.json&amp;quot; 
         fileFormat=&amp;quot;json&amp;quot; 
         item=&amp;quot;vehicles[0].types[1].weight&amp;quot; type=&amp;quot;ValueList&amp;quot;&amp;gt;
         &amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;
         &amp;lt;value&amp;gt;0.5&amp;lt;/value&amp;gt;
         &amp;lt;value&amp;gt;0.25&amp;lt;/value&amp;gt;
     &amp;lt;/parameter&amp;gt;
     &amp;lt;parameter name=&amp;quot;Simulationtime&amp;quot; 
         file=&amp;quot;scenario_config.json&amp;quot; 
         fileFormat=&amp;quot;json&amp;quot; 
         item=&amp;quot;simulation.duration&amp;quot;
         type=&amp;quot;ValueList&amp;quot;&amp;gt;
         &amp;lt;value&amp;gt;100&amp;lt;/value&amp;gt;
         &amp;lt;value&amp;gt;100&amp;lt;/value&amp;gt;
         &amp;lt;value&amp;gt;100&amp;lt;/value&amp;gt;
     &amp;lt;/parameter&amp;gt;
  &amp;lt;/dimension&amp;gt;
  
  &amp;lt;!-- define values for automatically permuted simulations --&amp;gt;
  &amp;lt;parameter name=&amp;quot;SinglehopRadius&amp;quot; 
      file=&amp;quot;sns/sns_config.json&amp;quot; 
      fileFormat=&amp;quot;json&amp;quot; 
      item=&amp;quot;singlehopRadius&amp;quot; 
      type=&amp;quot;ValueList&amp;quot;&amp;gt;
      &amp;lt;value&amp;gt;500&amp;lt;/value&amp;gt;
      &amp;lt;value&amp;gt;600&amp;lt;/value&amp;gt;
  &amp;lt;/parameter&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration contains three distinct parts of configuration. The system specific definition, the scenario definition and the parametrization. While the first two parts will be explained as part of this section, the parametrization will be explained in it’s own section.&lt;/p&gt;
&lt;h3 id=&#34;system-specific-definition&#34;&gt;System Specific Definition&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;mosaic 
   location=&amp;quot;/path/to/mosaic_folder&amp;quot;
   executable=&amp;quot;mosaic.sh&amp;quot; 
   parallelSimulations=&amp;quot;2&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The system specific part of the configuration above is the only part of the configuration that can be overwritten using a second configuration file. It contains the following attributes:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Attribute&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;location&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Location of the Eclipse MOSAIC installation to use (can be relative or absolute). This attribute can be omitted in case the mosaic executable is in the same location as the simulation-runner executable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;executable&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The provided executable is used to start the simulation. This value is optional and will automatically be set to the default *.bat or *.sh file when omitted. (relative path to &lt;code&gt;location&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;parallelSimulations&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines how many simulations are started in parallel to speed up things. Be aware that you should only use this if you have multiple cores available. This might also coincide with the threads option in the Eclipse MOSAIC configuration. The default is &lt;code&gt;1&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;scenario-definition&#34;&gt;Scenario Definition&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;scenario 
   name=&amp;quot;Barnim&amp;quot; 
   config=&amp;quot;scenarios/Barnim/scenario_config.json&amp;quot; 
   persistent=&amp;quot;false&amp;quot; 
   progressLogger=&amp;quot;false&amp;quot;&amp;gt;
   &amp;lt;!--argument&amp;gt;-o TRACE&amp;lt;/argument--&amp;gt;
   &amp;lt;!--argument&amp;gt;-w 0&amp;lt;/argument--&amp;gt;
&amp;lt;/scenario&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The scenario definition above contains everything needed to identify the scenario to execute along with parameters that need to be passed to the Eclipse MOSAIC executable. It contains the following attributes:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Attribute&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The name of the simulation to run. This is expected to be the same as the scenario&amp;rsquo;s folder name and is used to automatically generate the path pointing to the scenario&amp;rsquo;s &lt;code&gt;scenario_config.json&lt;/code&gt; in a default case. It can be omitted if the config option is set.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;config&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This is an optional value containing the concrete path to the scenario&amp;rsquo;s &lt;code&gt;scenario_config.json&lt;/code&gt;. This can be used if the scenario is not placed in the default scenarios folder (which is discouraged) and overwrites the path generated by the name attribute. Either name or config have to be defined! (path relative to &lt;code&gt;location&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;persistent&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines if the generated files in the Simulation Runner (scenarios with adapted configurations), etc (hohsts.json, logback.xml, runtime.json) and tmp directories will be kept after simulation (value &lt;code&gt;true&lt;/code&gt;) or deleted (value &lt;code&gt;false&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;progressLogger&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Writes summary of Simulation Runner execution to std out (value &lt;code&gt;true&lt;/code&gt;), default is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;stdoutLogger&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Writes log messages from the Eclipse MOSAIC executable to stdout when (value &lt;code&gt;true&lt;/code&gt;), default is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The configuration can also contain a number of additional arguments that are passed to the executable without any changes, separated by spaces.&lt;/p&gt;
&lt;h2 id=&#34;parametrization&#34;&gt;Parametrization&lt;/h2&gt;
&lt;p&gt;The heart of this tool is the parametrization of simulations. Using this, one can define values in the default configuration that are adapted between simulation runs. How many simulation runs are performed is defined by the number of changes configured, enriched with the information about simulation repetitions.
For the example in listing &amp;lsquo;Example Configuration&amp;rsquo; it is expected that the mapping file to be changed has one &lt;code&gt;vehicles&lt;/code&gt; definition spawning multiple cars with a weighted &lt;code&gt;type&lt;/code&gt; distribution defining first the equipped and then the unequipped vehicles.&lt;/p&gt;
&lt;h3 id=&#34;parameters&#34;&gt;Parameters&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;parameter name=&amp;quot;V2XVehiclePercentage&amp;quot; file=&amp;quot;mapping/mapping_config.json&amp;quot; fileFormat=&amp;quot;json&amp;quot; item=&amp;quot;vehicles[0].types[0].weight&amp;quot; type=&amp;quot;ValueList&amp;quot;&amp;gt;
  &amp;lt;value&amp;gt;0&amp;lt;/value&amp;gt;
  &amp;lt;value&amp;gt;50&amp;lt;/value&amp;gt;
  &amp;lt;value&amp;gt;75&amp;lt;/value&amp;gt;
&amp;lt;/parameter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each value that should be changed in a run is defined by a &lt;code&gt;parameter&lt;/code&gt; element identified by a &lt;code&gt;name&lt;/code&gt; (see listing above). The base value is the &lt;code&gt;file&lt;/code&gt; which should be changed (relative to the scenario folder). Currently it is needed to define what &lt;code&gt;fileFormat&lt;/code&gt; is expected from that file, which has impact on the syntax of the item definition which denotes what part of this file should be changed (this will be explained in a bit). The final value is the &lt;code&gt;type&lt;/code&gt; which denotes how the value change behaves. The child elements depend on this definition and will also be explained in a bit.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fileFormat&lt;/code&gt; can be one of &lt;code&gt;xml&lt;/code&gt; or &lt;code&gt;json&lt;/code&gt;. The item syntax is as followed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xml&lt;/code&gt;: contains an XPath1 expression&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json&lt;/code&gt;: contains an array-style definition of the target value. The value in the listing above would change line 13 in the listing below. (In the first entry of vehicles the attribute weight of the types first entry).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;prototypes&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;Car&amp;quot; } ],
  &amp;quot;vehicles&amp;quot;: [
    {
      &amp;quot;startingTime&amp;quot;: 5.0,
      &amp;quot;targetFlow&amp;quot;: 1200,
      &amp;quot;maxNumberVehicles&amp;quot;: 250,
      &amp;quot;route&amp;quot;: &amp;quot;1&amp;quot;,
      &amp;quot;types&amp;quot;: [
        {
          &amp;quot;applications&amp;quot;: [ &amp;quot;org.eclipse.mosaic.app.tutorial.WeatherWarningApp&amp;quot; ],
          &amp;quot;name&amp;quot;: &amp;quot;Car&amp;quot;,
          &amp;quot;weight&amp;quot;: 0.2
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;Car&amp;quot;,
          &amp;quot;weight&amp;quot;: 0.8
        }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt; can currently only have two entries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ValueList&lt;/code&gt;: This expects a list of values as child elements of the parameter. Each value will be used for at least one permutation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IntegerGenerator&lt;/code&gt;: This automatically generates integer values to write as values. The generated numbers can be configured by adding these optional attributes to the parameter element:&lt;br&gt;
– &lt;code&gt;start&lt;/code&gt;: denoting a minimal number where generation should start (this will be the first value), default is &lt;code&gt;0&lt;/code&gt;.&lt;br&gt;
– &lt;code&gt;step&lt;/code&gt;: denoting the number that will be added to the previous value to generate the new one, default is &lt;code&gt;1&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;end&lt;/code&gt;: denoting the maximum number (exclusive), default is &lt;code&gt;start + 10 * step&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;permutation-of-parameters&#34;&gt;Permutation of parameters&lt;/h3&gt;
&lt;p&gt;When multiple such parameter elements are defined, a permutation for each specific value definition is generated. Lets say defined are parameters A and B and each parameter has values a and b. The resulting permutations would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A=a, B=a
A=b, B=a
A=a, B=b
A=b, B=b
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dimensions&#34;&gt;Dimensions&lt;/h3&gt;
&lt;p&gt;Sometimes it is wanted to group some value changes. This can be necessary when changed values need to sum up to a specific value or when specific (named) output files need to be defined. This can be done by enclosing the affected &lt;code&gt;parameters&lt;/code&gt; into a &lt;code&gt;dimension&lt;/code&gt; definition. Doing this the values of each &lt;code&gt;parameter&lt;/code&gt; are connected by their index. For this to work the number of values for each parameter have to be the same. The example in listing &amp;lsquo;Example Configuration&amp;rsquo; utilizes this function to make sure the vehicle percentages sum up to 100. The generated permutations for the dimension enclosed parameters are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;V2XVehiclePercentage=0,  ClassicVehiclePercentage=100
V2XVehiclePercentage=50, ClassicVehiclePercentage=50
V2XVehiclePercentage=75, ClassicVehiclePercentage=25
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When additionally parameters are defined which are not enclosed in the &lt;code&gt;dimension&lt;/code&gt; tag or another dimension tag is defined, then the permutations will be extended even further. The full permutation for listing &amp;lsquo;Example Configuration&amp;rsquo; is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PenetrationRates(V2XVehiclePercentage=0,  ClassicVehiclePercentage=100), SinglehopRadius=500
PenetrationRates(V2XVehiclePercentage=50, ClassicVehiclePercentage=50),  SinglehopRadius=500
PenetrationRates(V2XVehiclePercentage=75, ClassicVehiclePercentage=25),  SinglehopRadius=500
PenetrationRates(V2XVehiclePercentage=0,  ClassicVehiclePercentage=100), SinglehopRadius=600
PenetrationRates(V2XVehiclePercentage=50, ClassicVehiclePercentage=50),  SinglehopRadius=600
PenetrationRates(V2XVehiclePercentage=75, ClassicVehiclePercentage=25),  SinglehopRadius=600
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h2&gt;
&lt;p&gt;These are some side effects to remember when working with this tool.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ports:&lt;/strong&gt; The Simulation Runner supports automatic assigning of free ports for federates. This means that all federates configured in the &lt;code&gt;simrunner_config.xml&lt;/code&gt; will get a free port configured by default. This enables multiple simulations to be run simultaneously as long as the federates are started by Eclipse MOSAIC. If some federates are not started through Eclipse MOSAIC but are already running, this will not work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paths:&lt;/strong&gt; Relative paths of the files to be modified will be expanded with the deployment directory of the current simulation run, as defined in the value &lt;code&gt;location&lt;/code&gt;, to an absolute one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adaptations:&lt;/strong&gt; All values will be modified in copies of the original scenario. The copies will be placed in the Simulation Runner folder in the Eclipse MOSAIC base directory and will be (if not deactivated by configuration) deleted upon completion of the simulation.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
