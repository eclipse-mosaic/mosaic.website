<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebSocket Visualizer | Eclipse MOSAIC â€“ A Multi-Domain and Multi-Scale Simulation Framework for Connected and Automated Mobility</title>
    <link>https://www.eclipse.dev/mosaic/docs/visualization/</link>
      <atom:link href="https://www.eclipse.dev/mosaic/docs/visualization/index.xml" rel="self" type="application/rss+xml" />
    <description>WebSocket Visualizer</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 05 May 2019 00:00:00 +0100</lastBuildDate>
    <image>
      <url>https://www.eclipse.dev/mosaic/images/logo.svg</url>
      <title>WebSocket Visualizer</title>
      <link>https://www.eclipse.dev/mosaic/docs/visualization/</link>
    </image>
    
    <item>
      <title>File Output Generator</title>
      <link>https://www.eclipse.dev/mosaic/docs/visualization/filevis/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/visualization/filevis/</guid>
      <description>&lt;p&gt;The File Output Generator is a tool which gives you the opportunity to log specific Eclipse MOSAIC interaction types. For
each interaction the File Output receives, one line (or more in case of an iteration object) is added
to a CSV output file. This allows to track the movements of vehicles or to monitor the V2X message exchange.&lt;/p&gt;
&lt;p&gt;One example output could be the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;CELL_CONFIGURATION;6000000000;veh_0;true;7200000000;1400000000
V2X_MESSAGE_TRANSMISSION;6000000000;DENM;3;rsu_0;52.65027;13.545;0.0;CELL_GEOCAST;/255.255.255.255;null
VEHICLE_UPDATES;7000000000;veh_0;35.501624617716296;186.33236029307432;52.655993308955196;13.569065826100868;0.0;35.501624617716296;-0.6083753822837039;0.0;false;1;4067968_28830219_3290027832_2450938914;0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;false;false;false
VEHICLE_REGISTRATION;7000000000;veh_1;ElectricVehicle;null;Unequipped;5.0;2.5;70.0;2.6;4.5;0.5;1.0;1.0;0.0;1;1;0.0
VEHICLE_UPDATES;8000000000;veh_0;34.978651295430026;186.33236029306624;52.65568017869267;13.569019012494635;0.0;70.48027591314633;-0.5229733222862691;0.0;false;1;4067968_28830219_3290027832_2450938914;0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;false;false;false
V2X_MESSAGE_TRANSMISSION;8000000000;DENM;4;rsu_0;52.65027;13.545;0.0;CELL_GEOCAST;/255.255.255.255;null
VEHICLE_UPDATES;9000000000;veh_0;35.73455352933612;186.33236029306624;52.65536028153272;13.56897118787549;0.0;106.21482944248245;0.7559022339060917;0.0;false;1;4067968_28830219_3290027832_2450938914;0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;false;false;false
VEHICLE_UPDATES;9000000000;veh_1;35.52345835176762;186.33265000325784;52.65599046030636;13.569112899208802;0.0;35.52345835176762;-0.5865416482323766;0.0;false;1;4067968_28830219_3290027832_2450938914;1;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;false;false;false
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configuring-the-fileoutput&#34;&gt;Configuring the FileOutput&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The main configuration file is located at &lt;code&gt;&amp;lt;mosaic-root&amp;gt;/scenarios/&amp;lt;scenarioName&amp;gt;/output/output_config.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;basic-configuration&#34;&gt;Basic configuration&lt;/h4&gt;
&lt;p&gt;The following listing shows a basic example for the configuration of the FileOutput:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;output id=&amp;quot;fileoutput&amp;quot; enabled=&amp;quot;true&amp;quot; update=&amp;quot;5&amp;quot; loader=&amp;quot;org.eclipse.mosaic.fed.output.generator.file.FileOutputLoader&amp;quot;&amp;gt;
    &amp;lt;filename&amp;gt;output.csv&amp;lt;/filename&amp;gt;
    &amp;lt;directory&amp;gt;.&amp;lt;/directory&amp;gt;
    &amp;lt;separator&amp;gt;;&amp;lt;/separator&amp;gt;
    &amp;lt;decimalSeparator&amp;gt;.&amp;lt;/decimalSeparator&amp;gt;
    &amp;lt;subscriptions&amp;gt;
        &amp;lt;subscription id=&amp;quot;...&amp;quot;&amp;gt;
        ...
        &amp;lt;/subscription&amp;gt;
        ...
    &amp;lt;/subscriptions&amp;gt;
&amp;lt;/output&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Note: The &lt;code&gt;&amp;lt;decimalSeparator&amp;gt;&lt;/code&gt;-element is an optional parameter defining how floating-point numbers will be written.
Be careful not to use the same characters for &lt;code&gt;&amp;lt;separator&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;decimalSeparator&amp;gt;&lt;/code&gt; as it will break the output.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Basic configuration parameters for FileOutput&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The usage of the parameters is described in the following table:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets the id for the output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If set to &amp;ldquo;false&amp;rdquo;, output is not used (default value is &amp;ldquo;true&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets the update interval in seconds for the output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;start&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets the start time in seconds for output generation. This has nothing to do with the run time of the actual simulation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets the end time in seconds for output generation. This has nothing to do with the run time of the actual simulation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;loader&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets where the output is loaded from using the Java-class (see previous listing)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;interaction-record&#34;&gt;Interaction record&lt;/h4&gt;
&lt;p&gt;Each interaction record is derived from a certain interaction type and composed of several entries,which are separated by Element &lt;code&gt;separator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The configuration of the file output is explained at the example of the &lt;code&gt;VehicleUpdates&lt;/code&gt; interaction:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;subscription id=&amp;quot;VehicleUpdates&amp;quot; enabled=&amp;quot;true&amp;quot;&amp;gt;
    &amp;lt;entries&amp;gt;
        &amp;lt;entry&amp;gt;&amp;quot;UPDATE_VEHICLE&amp;quot;&amp;lt;/entry&amp;gt;
        &amp;lt;entry&amp;gt;Time&amp;lt;/entry&amp;gt;
        &amp;lt;entry&amp;gt;Updated:Name&amp;lt;/entry&amp;gt;
        &amp;lt;entry&amp;gt;Updated:Speed&amp;lt;/entry&amp;gt;
        &amp;lt;entry&amp;gt;Updated:Position.Latitude&amp;lt;/entry&amp;gt;
        &amp;lt;entry&amp;gt;Updated:Position.Longitude&amp;lt;/entry&amp;gt;
    &amp;lt;/entries&amp;gt;
&amp;lt;/subscription&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Specific Configuration for interaction&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attribute &lt;code&gt;id&lt;/code&gt; indicates the interaction type, namely the class name of the interaction.&lt;/li&gt;
&lt;li&gt;The element &lt;code&gt;entries&lt;/code&gt; defines the format and content of the handled subscription record.&lt;/li&gt;
&lt;li&gt;The element &lt;code&gt;entries&lt;/code&gt; is composed of several sub-elements &lt;code&gt;entry&lt;/code&gt;, which correspond to columns of a subscription
record and the sequence of the columns is the same as that of sub-elements entry.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In total, there are three basic types of entries:&lt;/p&gt;
&lt;h4 id=&#34;constant&#34;&gt;Constant&lt;/h4&gt;
&lt;p&gt;Every quoted entry is defined as a constant. The content inside the quotation will be directly written
into each corresponding interaction record.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;entry&amp;gt;&amp;quot;UPDATE_VEHICLE&amp;quot;&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for constant type entry&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;basic-method&#34;&gt;Basic method&lt;/h4&gt;
&lt;p&gt;The Basic method type accesses values of the interaction object by using the appropriate &lt;code&gt;getXXX()&lt;/code&gt; methods. For an entry, the
root object for method invoking is the corresponding interaction class, here &lt;code&gt;VehicleUpdates&lt;/code&gt;. As this object provides
the simulation time by calling the getter method &lt;code&gt;getTime()&lt;/code&gt;, the entry &lt;code&gt;Time&lt;/code&gt; retrieves the requested value.
If a null object is returned before the last method of cascaded methods is invoked, then &lt;code&gt;null&lt;/code&gt; will be written
to the corresponding field.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;entry&amp;gt;Time&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for constant type entry&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;iteration&#34;&gt;Iteration&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;entry&amp;gt;Updated:Id&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for method type entry with iteration&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first part of this example is &lt;code&gt;Updated&lt;/code&gt; , which means to invoke the getUpdated method of class
&lt;code&gt;VehicleUpdates&lt;/code&gt;. Then a list of &lt;code&gt;VehicleInfo&lt;/code&gt; objects is returned. The character &lt;code&gt;:&lt;/code&gt; indicates the iteration,
which means that for each of the &lt;code&gt;VehicleInfo&lt;/code&gt; objects in the returned list the &lt;code&gt;getId&lt;/code&gt; method is invoked.&lt;/p&gt;
&lt;h4 id=&#34;cascading&#34;&gt;Cascading&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;entry&amp;gt;Updated:Position.Latitude&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for method type entry with iteration and cascading&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this example, there is a dot operation, which is a cascade operation. Here &lt;code&gt;getPosition&lt;/code&gt; method of &lt;code&gt;VehicleInfo&lt;/code&gt;
class is called and a &lt;code&gt;GlobalPosition&lt;/code&gt; object is returned. Then we continuously invoke the &lt;code&gt;getLatitude&lt;/code&gt;
method of this &lt;code&gt;GlobalPosition&lt;/code&gt; object.&lt;/p&gt;
&lt;h4 id=&#34;extended-method&#34;&gt;Extended Method&lt;/h4&gt;
&lt;p&gt;All the methods involved above are the basic methods. There also is some functionality, which we cannot
extract from these existing methods. So an extended method set is offered to meet these requirements
and also as an extension point in the future.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;entry&amp;gt;TimeInSec&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for simple extended method type entry&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With existing methods of &lt;code&gt;VehicleUpdates&lt;/code&gt; and its super class &lt;code&gt;Interaction&lt;/code&gt;, we cannot get the timestamp of
a interaction in seconds (only &lt;code&gt;Interaction.Time&lt;/code&gt;, which returns a time in ns, is available). Here, &lt;code&gt;TimeInSec&lt;/code&gt; and &lt;code&gt;TimeInMs&lt;/code&gt;
are method extensions for any &lt;code&gt;Interaction&lt;/code&gt; class.&lt;/p&gt;
&lt;h4 id=&#34;extended-methods-for-v2x-message-interactions&#34;&gt;Extended Methods for V2X Message Interactions&lt;/h4&gt;
&lt;p&gt;Interactions &lt;code&gt;V2xMessageReception&lt;/code&gt; and &lt;code&gt;V2xMessageTransmission&lt;/code&gt; are furthermore extended with the method &lt;code&gt;Type&lt;/code&gt;, which
provides a shortcut to the type of the sent or received &lt;code&gt;V2xMessage&lt;/code&gt;. Additionally, for &lt;code&gt;V2xMessageReception&lt;/code&gt; the extended method
&lt;code&gt;Message&lt;/code&gt; is available, which provides the actual &lt;code&gt;V2xMessage&lt;/code&gt;. It is important to note, that &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;Message&lt;/code&gt; for
&lt;code&gt;V2xMessageReception&lt;/code&gt; is only available, if &lt;code&gt;V2xMessageTransmission&lt;/code&gt; is configured in the list of subscribed interactions.
If only &lt;code&gt;V2xMessageReception&lt;/code&gt; interactions should be printed out, then &lt;code&gt;V2xMessageTransmission&lt;/code&gt; has to be added with an empty list of fields.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;subscription id=&amp;quot;V2xMessageTransmission&amp;quot;/&amp;gt;
&amp;lt;subscription id=&amp;quot;V2xMessageReception&amp;quot;&amp;gt;
    &amp;lt;entries&amp;gt;
        &amp;lt;entry&amp;gt;Time&amp;lt;/entry&amp;gt;
        &amp;lt;entry&amp;gt;Type&amp;lt;/entry&amp;gt;
        &amp;lt;entry&amp;gt;Message.Payload.EffectiveLength&amp;lt;/entry&amp;gt;
        &amp;lt;entry&amp;gt;ReceiverName&amp;lt;/entry&amp;gt;
    &amp;lt;/entries&amp;gt;
&amp;lt;/subscription&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for printing V2X message reception events.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;further-details&#34;&gt;Further details&lt;/h2&gt;
&lt;p&gt;The method type of entry definition supports cascaded iteration as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;entry&amp;gt;List1:List2:Id&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for cascaded iteration&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It is possible to handle several different iterating operations, coming from the entry definition:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;entry&amp;gt;Senders:Id&amp;lt;/entry&amp;gt;
&amp;lt;entry&amp;gt;Receivers:Id&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for multi-level iteration&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getSenders()&lt;/code&gt; and &lt;code&gt;getReceivers()&lt;/code&gt; are two different iterations. In this case, a combination of both Ids from
the lists will be generated. The result may look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;sender1, receiver1
sender1, receiver2
sender2, receiver1
sender2, receiver2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Output result of the above listing&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Note: the longest matched prefix will be considered as the same iterating operation, which means they are in the same level of iteration structure.&lt;/p&gt;
&lt;h3 id=&#34;use-inductionloopdetector-or-laneareadetector&#34;&gt;Use InductionLoopDetector or LaneAreaDetector&lt;/h3&gt;
&lt;p&gt;Eclipse MOSAIC has to subscribe to updates from detectors. Currently this is done in the TMC unit. In order to receive detector updates from SUMO, which can be then recorded by the output generator, the detector has to be mapped to at least one TMC.&lt;/p&gt;
&lt;h2 id=&#34;additional-features&#34;&gt;Additional features&lt;/h2&gt;
&lt;h4 id=&#34;limit-output-on-time-frame&#34;&gt;Limit output on time frame&lt;/h4&gt;
&lt;p&gt;You can configure the File Output Generator to write out interactions within a specific frame of simulation time.
This can be configured by setting the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; attributes accordingly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;output id=&amp;quot;fileoutput&amp;quot; enabled=&amp;quot;true&amp;quot; 
            start=&amp;quot;300&amp;quot; end=&amp;quot;1000&amp;quot; update=&amp;quot;5&amp;quot; 
            loader=&amp;quot;org.eclipse.mosaic.fed.output.generator.file.FileOutputLoader&amp;quot;&amp;gt;
    ...
&amp;lt;/output&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for restricting output generation of interactions within a time frame&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;compress-output&#34;&gt;Compress Output&lt;/h4&gt;
&lt;p&gt;The tag &lt;code&gt;&amp;lt;write&amp;gt;file+compress&amp;lt;/write&amp;gt;&lt;/code&gt; can be added to the output configuration, in order
to compress the output using gzip compression. This feature is suitable for large-scale scenarios with
many outputs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;output id=&amp;quot;output&amp;quot; loader=&amp;quot;org.eclipse.mosaic.fed.output.generator.file.FileOutputLoader&amp;quot;&amp;gt;
    &amp;lt;write&amp;gt;file+compress&amp;lt;/write&amp;gt;
    ...
&amp;lt;/output&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Statistics Output</title>
      <link>https://www.eclipse.dev/mosaic/docs/visualization/statistics/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/visualization/statistics/</guid>
      <description>&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;The &lt;strong&gt;Statistics Output Generator&lt;/strong&gt; is part of &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Statistics Output is another output generating tool to easily measure basic simulation outcomes.
You will be able to obtain short or detailed results of the simulation, e.g., travel times or the average speeds
of groups of vehicles, or the average flow on induction loops.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The main configuration file for all output generators is located at &lt;code&gt;&amp;lt;scenarioName&amp;gt;/output/output_config.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to use the Statistics Output, the attribute &lt;code&gt;enabled&lt;/code&gt; of the root element &lt;code&gt;output&lt;/code&gt; must be
set to &amp;ldquo;true&amp;rdquo;, as shown in the following listing.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;output id=&amp;quot;statistics&amp;quot; enabled=&amp;quot;true&amp;quot; loader=&amp;quot;com.dcaiti.mosaic.fed.visualizer.StatisticsVisualizerLoader&amp;quot;&amp;gt;
   &amp;lt;statistic&amp;gt;
      [...]
   &amp;lt;/statistic&amp;gt;

   &amp;lt;subscriptions&amp;gt;
      &amp;lt;subscription id=&amp;quot;VehicleRegistration&amp;quot;/&amp;gt;
      &amp;lt;subscription id=&amp;quot;VehicleUpdates&amp;quot;/&amp;gt;
      &amp;lt;subscription id=&amp;quot;TrafficDetectorUpdates&amp;quot;/&amp;gt;
   &amp;lt;/subscriptions&amp;gt;
&amp;lt;/output&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Configuration header for Statistics Output&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;specification&#34;&gt;Specification&lt;/h2&gt;
&lt;p&gt;In this section, we take a closer look at the Statistics Output by using examples and demonstrations. For
each type of retrieving data we create a &lt;code&gt;&amp;lt;statistic&amp;gt;&amp;lt;/statistic&amp;gt;&lt;/code&gt; block. Inside the block we define
one certain data type we want to retrieve in a &lt;source&gt; element. If you want to retrieve different data
types, just create another &lt;code&gt;&amp;lt;statistic&amp;gt;&lt;/code&gt; block for each of them.&lt;/p&gt;
&lt;p&gt;You can also set the wanted file name in the attribute filename of the statistic element. If the
attribute has not been given, each &lt;code&gt;&amp;lt;statistic&amp;gt;&lt;/code&gt; block will get the name accordingly to the order number,
for example &lt;code&gt;1. StatisticsVisualizer-Block.csv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the output attribute two options (&lt;code&gt;short&lt;/code&gt;|&lt;code&gt;verbose&lt;/code&gt;) can be selected. The short option provides us
a compact log file with information about only the highest level of the retrieved data (e.g., aggregate
values of grouped vehicles) in contrast to the verbose option which also provides information about every
individual vehicle in each group.&lt;/p&gt;
&lt;p&gt;For a successful start, the element source must be placed in the first position in the &lt;code&gt;statistic&lt;/code&gt; children
element list. Different options of possible data types, one of which must be specified in the source
element can be seen below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;statistic filename=&amp;quot;ChooseItYourself&amp;quot; output=&amp;quot;short&amp;quot;&amp;gt;
	&amp;lt;source&amp;gt;NameOfSource&amp;lt;/source&amp;gt;
&amp;lt;/statistic&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Source options of Statistics Output&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;application&#34;&gt;Application&lt;/h2&gt;
&lt;p&gt;This section will demonstrate the basic idea and usage of the Statistics Output depending on the
individual requirements. Next to retrieving raw data, the Statistics Output has further features for
processing of the obtained data.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt;: Data to obtain, choose between:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VehicleSpeeds&lt;/code&gt; - Obtain the speeds of the vehicles within each simulation step.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VehicleStops&lt;/code&gt; - The total number of stops during the journey of each vehicle.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VehicleTravelTimes&lt;/code&gt; - The total travel time in s of the vehicles.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VehicleDelayTimes&lt;/code&gt; - The deviation of the travel time compared to the fastest travel time possible for the vehicles (in s).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VehicleTravelledDistances&lt;/code&gt; - The traveled distance of the vehicles in m.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VehicleFuelConsumptions&lt;/code&gt; - The fuel consumptions of the vehicles in l per km.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VehicleHeadways&lt;/code&gt; - Obtain the headway towards the leading vehicle of each vehicle for each simulation step. To get this value, an application has to be deployed on the vehicles that activate the front distance sensor.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DetectorFlow&lt;/code&gt; - The flows of each subscribed induction loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;For using the detector flow type, inductions loops need to be configured in the SUMO and mapping configuration files (e.g., Highway tutorial).
The detectors have to be mapped to at least one TMC in order to be noticed in the output generator.
If you want to exclude detector flow updates containing zeros, use &lt;code&gt;&amp;lt;filter filterType=&amp;quot;keep&amp;quot;&amp;gt;MoreThan:0&amp;lt;/filter&amp;gt;&lt;/code&gt;.
You cannot group by &lt;code&gt;VehicleType&lt;/code&gt; or &lt;code&gt;VehicleGroup&lt;/code&gt; for the &lt;code&gt;DetectorFlow&lt;/code&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;group-by&lt;/code&gt;: The vehicles can be grouped by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;its vehicle type name (&lt;code&gt;VehicleType&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the group they belong to (&lt;code&gt;VehicleGroup&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the time (&lt;code&gt;TimeInterval:200&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;or obtained data value (&lt;code&gt;Interval:200&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;aggregation&lt;/code&gt;: &lt;code&gt;Average&lt;/code&gt; | &lt;code&gt;Harmonic&lt;/code&gt; | &lt;code&gt;Min&lt;/code&gt; | &lt;code&gt;Max&lt;/code&gt; | &lt;code&gt;Sum&lt;/code&gt; | &lt;code&gt;Count&lt;/code&gt; aggregation of the obtained
values. For &lt;code&gt;Average&lt;/code&gt; and &lt;code&gt;Harmonic&lt;/code&gt; an attribute &lt;code&gt;deviation&lt;/code&gt;
can be set to true or false (itâ€™s false if the attribute is not given). This attribute can be used for
grouped values to get the deviation of each value from the aggregated group value or to get a
standard deviation based on biased sample variance for groups (in the short output version).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;filter&lt;/code&gt;: Filtering with the attribute &lt;code&gt;filterType&lt;/code&gt; (possible values are &lt;code&gt;keep&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filtering by required value slots with two options to specify them: &lt;code&gt;MoreThan:Value&lt;/code&gt; or &lt;code&gt;LessThan:Value&lt;/code&gt; (e.g. &lt;code&gt;MoreThan:5&lt;/code&gt; to collect values which are bigger than 5 only)&lt;/li&gt;
&lt;li&gt;Filtering by vehicle type. &lt;code&gt;VehicleType:Type&lt;/code&gt; (e.g. &lt;code&gt;VehicleType:Car&lt;/code&gt; to collect values only of vehicles of type &amp;ldquo;Car&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Filtering by time. &lt;code&gt;Time:From-To&lt;/code&gt; (e.g. &lt;code&gt;Time:0-100&lt;/code&gt; to collect values only of the first 100s of simulation time)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following example will show an example of how you can specify the Statistics Output according to
your desired criteria.
VehicleTravelTimes are the data we want to retrieve from vehicles.
We want to group vehicles by the abstract group we can define in the mapping configuration file (see e.g., Barnim
scenario) and then calculate the average vehicle travel time value for each of these groups.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;output id=&amp;quot;statistics&amp;quot; enabled=&amp;quot;true&amp;quot; loader=&amp;quot;com.dcaiti.mosaic.fed.visualizer.StatisticsVisualizerLoader&amp;quot;&amp;gt;
	&amp;lt;statistic filename=&amp;quot;AverageVehicleTravelTimes&amp;quot; output=&amp;quot;short&amp;quot;&amp;gt;
		&amp;lt;source&amp;gt;VehicleTravelTimes&amp;lt;/source&amp;gt;
		&amp;lt;group-by&amp;gt;VehicleGroup&amp;lt;/group-by&amp;gt;
		&amp;lt;aggregation&amp;gt;Average&amp;lt;/aggregation&amp;gt;
	&amp;lt;/statistic&amp;gt;

   &amp;lt;subscriptions&amp;gt;
      &amp;lt;subscription id=&amp;quot;VehicleRegistration&amp;quot;/&amp;gt;
      &amp;lt;subscription id=&amp;quot;VehicleUpdates&amp;quot;/&amp;gt;
      &amp;lt;subscription id=&amp;quot;TrafficDetectorUpdates&amp;quot;/&amp;gt;
   &amp;lt;/subscriptions&amp;gt;
&amp;lt;/output&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Getting the Average time by vehicle class&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can also combine filters if you want to get a certain interval with upper and lower boundaries. With
the following input instruction, only vehicles with the obtained data values between 250 and 500 will be
left after filtering.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;filter filterType=&amp;quot;keep&amp;quot;&amp;gt;LessThan:500&amp;lt;/filter&amp;gt;
&amp;lt;filter filterType=&amp;quot;remove&amp;quot;&amp;gt;LessThan:250&amp;lt;/filter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for filtering&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Please notice that some sources are being not only obtained in each simulation step but also collected for
further processing as separate values for each of these steps (like &lt;code&gt;VehicleSpeeds&lt;/code&gt;, &lt;code&gt;VehicleHeadways&lt;/code&gt;).
These data types need to be aggregated to one value per vehicle if you want to group them by value or
filter them.&lt;/p&gt;
&lt;p&gt;For demonstration, the Statistics Output is configured for the scenario Barnim and calculates the
average travel times of the vehicles and additionally groups them. As a result, the simulation produces
the following CSV file in the log directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;Group;Value;Total;
AdHoc;399.14;24;
Cellular;463.87;12;
Unequipped;459.18;84;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;The AverageVehicleTravelTime.csv file produced by the Statistics Output in the Barnim scenario&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3D Visualization</title>
      <link>https://www.eclipse.dev/mosaic/docs/visualization/3d-vis/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/visualization/3d-vis/</guid>
      <description>&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;The 3D visualization is part of &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The Eclipse MOSAIC 3D Visualization Tool is based on the PHABMACS vehicle simulator and uses the same 




&lt;a href=&#34;https://github.com/fabmax/kool&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3D engine&lt;/a&gt;
and models to visualize vehicle movements and various events which occur during the simulation.
Next to the road network, which can be optionally rendered by the visualizer, the following units and
events are visualized:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vehicle movements coming from the traffic simulation&lt;/li&gt;
&lt;li&gt;Road Side Units at their defined location&lt;/li&gt;
&lt;li&gt;V2X-messages sent via cellular communication (indicated as green circles)&lt;/li&gt;
&lt;li&gt;V2X-messages sent via ITS-G5 communication (indicated as blue circles)&lt;/li&gt;
&lt;li&gt;V2X-messages received by vehicles (indicated as red circles)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;














&lt;figure id=&#34;figure-visualize-the-map-of-the-scenario&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/mosaic-vis-0.jpg&#34; data-caption=&#34;Visualize the map of the scenario.&#34;&gt;


  &lt;img src=&#34;../images/mosaic-vis-0.jpg&#34; alt=&#34;&#34; width=&#34;60%&#34; &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Visualize the map of the scenario.
  &lt;/figcaption&gt;


&lt;/figure&gt;
















&lt;figure id=&#34;figure-track-vehicle-movements&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/mosaic-vis-1.jpg&#34; data-caption=&#34;Track vehicle movements.&#34;&gt;


  &lt;img src=&#34;../images/mosaic-vis-1.jpg&#34; alt=&#34;&#34; width=&#34;60%&#34; &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Track vehicle movements.
  &lt;/figcaption&gt;


&lt;/figure&gt;
















&lt;figure id=&#34;figure-see-communication-events&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/mosaic-vis-2.jpg&#34; data-caption=&#34;See communication events.&#34;&gt;


  &lt;img src=&#34;../images/mosaic-vis-2.jpg&#34; alt=&#34;&#34; width=&#34;60%&#34; &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    See communication events.
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The main configuration file for all output generators is located at &lt;code&gt;&amp;lt;scenarioName&amp;gt;/output/output_config.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A new output generator with the following configuration has to be added:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;output id=&amp;quot;3d-visualization&amp;quot; enabled=&amp;quot;true&amp;quot; loader=&amp;quot;com.dcaiti.mosaic.fed.visualizer.Mosaic3dVisualizerLoader&amp;quot;&amp;gt;
    &amp;lt;map&amp;gt;Barnim.osm.gz&amp;lt;/map&amp;gt;&amp;lt;!-- must be placed in &amp;lt;scenario&amp;gt;/output/assets/maps --&amp;gt;
    &amp;lt;models&amp;gt;
        &amp;lt;vehicle model=&amp;quot;s-class.model.gz&amp;quot; colors=&amp;quot;magenta,red&amp;quot;/&amp;gt;
        &amp;lt;vehicle model=&amp;quot;b-class-detailed.model.gz&amp;quot; colors=&amp;quot;green&amp;quot;/&amp;gt;
        &amp;lt;vehicle model=&amp;quot;smart_fortwo.model.gz&amp;quot; colors=&amp;quot;red,blue,yellow&amp;quot;/&amp;gt;
    &amp;lt;/models&amp;gt;
    &amp;lt;subscriptions&amp;gt;
        &amp;lt;subscription id=&amp;quot;VehicleRegistration&amp;quot; enabled=&amp;quot;true&amp;quot;/&amp;gt;
        &amp;lt;subscription id=&amp;quot;VehicleUpdates&amp;quot; enabled=&amp;quot;true&amp;quot;/&amp;gt;
        &amp;lt;subscription id=&amp;quot;V2xMessageReception&amp;quot; enabled=&amp;quot;true&amp;quot;/&amp;gt;
        &amp;lt;subscription id=&amp;quot;V2xMessageTransmission&amp;quot; enabled=&amp;quot;false&amp;quot;/&amp;gt;
    &amp;lt;/subscriptions&amp;gt;
&amp;lt;/output&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;map-file&#34;&gt;Map File&lt;/h3&gt;
&lt;p&gt;The Map file (&lt;code&gt;*.osm&lt;/code&gt; - OpenStreetMap) must be placed inside the path &lt;code&gt;&amp;lt;scenarioName&amp;gt;/output/assets/maps&lt;/code&gt; and then referenced
in the &lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt; tag of the configuration.&lt;/p&gt;
&lt;h3 id=&#34;3d-models&#34;&gt;3D Models&lt;/h3&gt;
&lt;p&gt;For each vehicle a 3D-model is chosen from a set of available models.
The visualizer includes the following models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Small car (Smart Fortwo): &lt;code&gt;smart_fortwo.model.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Compact Van (Mercedes B-Class): &lt;code&gt;b-class-detailed.model.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Long Limousine (Mercedes S-Class): &lt;code&gt;s-class.model.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Truck : &lt;code&gt;truck.model.gz&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can furthermore assign specific models to be used for specific 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_mapping/#prototypes&#34;&gt;vehicle prototype&lt;/a&gt; only:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;models&amp;gt;
    &amp;lt;vehicle vehicleType=&amp;quot;Car&amp;quot; model=&amp;quot;s-class.model.gz&amp;quot; colors=&amp;quot;magenta,red&amp;quot;/&amp;gt;
    &amp;lt;vehicle vehicleType=&amp;quot;Truck&amp;quot; model=&amp;quot;truck.model.gz&amp;quot; colors=&amp;quot;green&amp;quot;/&amp;gt;
&amp;lt;/models&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If no &lt;code&gt;vehicleType&lt;/code&gt; is given, the model is used for any vehicle to be visualized.&lt;/p&gt;
&lt;p&gt;Generally, it is possible to use own custom models.
These must be converted by &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;us&lt;/a&gt;&lt;/strong&gt; from a Jollada file before they are able to be used in the visualizer.&lt;/p&gt;
&lt;h3 id=&#34;vehicle-colors&#34;&gt;Vehicle Colors&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;colors&lt;/code&gt; field is a comma-separated list
of which one color is chosen randomly when a vehicle is inserted. The following colors are available:
&lt;code&gt;black&lt;/code&gt;, &lt;code&gt;dark_gray&lt;/code&gt;, &lt;code&gt;gray&lt;/code&gt;, &lt;code&gt;light_gray&lt;/code&gt;, &lt;code&gt;white&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;orange&lt;/code&gt;, &lt;code&gt;lime&lt;/code&gt;, &lt;code&gt;light_red&lt;/code&gt;,
&lt;code&gt;light_green&lt;/code&gt;, &lt;code&gt;light_blue&lt;/code&gt;, &lt;code&gt;light_yellow&lt;/code&gt;, &lt;code&gt;light_cyan&lt;/code&gt;, &lt;code&gt;light_magenta&lt;/code&gt;, &lt;code&gt;light_orange&lt;/code&gt;, &lt;code&gt;dark_red&lt;/code&gt;, &lt;code&gt;dark_green&lt;/code&gt;, &lt;code&gt;dark_blue&lt;/code&gt;,
&lt;code&gt;dark_yellow&lt;/code&gt;, &lt;code&gt;dark_cyan&lt;/code&gt;, &lt;code&gt;dark_magenta&lt;/code&gt;, &lt;code&gt;dark_orange&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;visualization-window&#34;&gt;Visualization Window&lt;/h2&gt;
&lt;h3 id=&#34;pausing-the-simulation&#34;&gt;Pausing the Simulation&lt;/h3&gt;
&lt;p&gt;It is possible to pause the simulation by pressing &lt;kbd&gt;Spacebar&lt;/kbd&gt; on your keyboard. It is important to start MOSAIC Extended
with the parameter &lt;code&gt;-w 0&lt;/code&gt; when using this feature, as otherwise the visualizer would interrupt the simulation when pausing too long.&lt;/p&gt;
&lt;h3 id=&#34;tracking-of-vehicles&#34;&gt;Tracking of Vehicles&lt;/h3&gt;
&lt;p&gt;Initially, the first spawned vehicle is focused and followed in the visualizer.
Vehicle tracking can be disabled by pressing &lt;kbd&gt;Esc&lt;/kbd&gt; on your keyboard.
Furthermore, you can double-click on any vehicle to track it.&lt;/p&gt;
&lt;h3 id=&#34;simulation-speed&#34;&gt;Simulation Speed&lt;/h3&gt;
&lt;p&gt;For better visualization it may be required to slow down simulation, since MOSAIC always tries to simulate as fast as possible.
To do so, you can start MOSAIC Extended with the parameter &lt;code&gt;-b 2&lt;/code&gt; (i.e., slowing down to not faster than 2 times realtime) or any other suitable value.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
