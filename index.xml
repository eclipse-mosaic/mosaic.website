<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eclipse MOSAIC – A Multi-Domain and Multi-Scale Simulation Framework for Connected and Automated Mobility</title>
    <link>https://www.eclipse.dev/mosaic/</link>
      <atom:link href="https://www.eclipse.dev/mosaic/index.xml" rel="self" type="application/rss+xml" />
    <description>Eclipse MOSAIC – A Multi-Domain and Multi-Scale Simulation Framework for Connected and Automated Mobility</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 20 Apr 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.eclipse.dev/mosaic/images/logo.svg</url>
      <title>Eclipse MOSAIC – A Multi-Domain and Multi-Scale Simulation Framework for Connected and Automated Mobility</title>
      <link>https://www.eclipse.dev/mosaic/</link>
    </image>
    
    <item>
      <title></title>
      <link>https://www.eclipse.dev/mosaic/group/fokus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/group/fokus/</guid>
      <description></description>
    </item>
    
    <item>
      <title>File Output Generator</title>
      <link>https://www.eclipse.dev/mosaic/docs/visualization/filevis/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/visualization/filevis/</guid>
      <description>&lt;p&gt;The File Output Generator is a tool which gives you the opportunity to log specific Eclipse MOSAIC interaction types. For
each interaction the File Output receives, one line (or more in case of an iteration object) is added
to a CSV output file. This allows to track the movements of vehicles or to monitor the V2X message exchange.&lt;/p&gt;
&lt;p&gt;One example output could be the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;CELL_CONFIGURATION;6000000000;veh_0;true;7200000000;1400000000
V2X_MESSAGE_TRANSMISSION;6000000000;DENM;3;rsu_0;52.65027;13.545;0.0;CELL_GEOCAST;/255.255.255.255;null
VEHICLE_UPDATES;7000000000;veh_0;35.501624617716296;186.33236029307432;52.655993308955196;13.569065826100868;0.0;35.501624617716296;-0.6083753822837039;0.0;false;1;4067968_28830219_3290027832_2450938914;0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;false;false;false
VEHICLE_REGISTRATION;7000000000;veh_1;ElectricVehicle;null;Unequipped;5.0;2.5;70.0;2.6;4.5;0.5;1.0;1.0;0.0;1;1;0.0
VEHICLE_UPDATES;8000000000;veh_0;34.978651295430026;186.33236029306624;52.65568017869267;13.569019012494635;0.0;70.48027591314633;-0.5229733222862691;0.0;false;1;4067968_28830219_3290027832_2450938914;0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;false;false;false
V2X_MESSAGE_TRANSMISSION;8000000000;DENM;4;rsu_0;52.65027;13.545;0.0;CELL_GEOCAST;/255.255.255.255;null
VEHICLE_UPDATES;9000000000;veh_0;35.73455352933612;186.33236029306624;52.65536028153272;13.56897118787549;0.0;106.21482944248245;0.7559022339060917;0.0;false;1;4067968_28830219_3290027832_2450938914;0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;false;false;false
VEHICLE_UPDATES;9000000000;veh_1;35.52345835176762;186.33265000325784;52.65599046030636;13.569112899208802;0.0;35.52345835176762;-0.5865416482323766;0.0;false;1;4067968_28830219_3290027832_2450938914;1;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;0.0;false;false;false
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configuring-the-fileoutput&#34;&gt;Configuring the FileOutput&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The main configuration file is located at &lt;code&gt;&amp;lt;mosaic-root&amp;gt;/scenarios/&amp;lt;scenarioName&amp;gt;/output/output_config.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;basic-configuration&#34;&gt;Basic configuration&lt;/h4&gt;
&lt;p&gt;The following listing shows a basic example for the configuration of the FileOutput:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;output id=&amp;quot;fileoutput&amp;quot; enabled=&amp;quot;true&amp;quot; update=&amp;quot;5&amp;quot; loader=&amp;quot;org.eclipse.mosaic.fed.output.generator.file.FileOutputLoader&amp;quot;&amp;gt;
    &amp;lt;filename&amp;gt;output.csv&amp;lt;/filename&amp;gt;
    &amp;lt;directory&amp;gt;.&amp;lt;/directory&amp;gt;
    &amp;lt;separator&amp;gt;;&amp;lt;/separator&amp;gt;
    &amp;lt;decimalSeparator&amp;gt;.&amp;lt;/decimalSeparator&amp;gt;
    &amp;lt;subscriptions&amp;gt;
        &amp;lt;subscription id=&amp;quot;...&amp;quot;&amp;gt;
        ...
        &amp;lt;/subscription&amp;gt;
        ...
    &amp;lt;/subscriptions&amp;gt;&amp;gt;
&amp;lt;/output&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Note: The &lt;code&gt;&amp;lt;decimalSeparator&amp;gt;&lt;/code&gt;-element is an optional parameter defining how floating-point numbers will be written.
Be careful not to use the same characters for &lt;code&gt;&amp;lt;separator&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;decimalSeparator&amp;gt;&lt;/code&gt; as it will break the output.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Basic configuration parameters for FileOutput&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The usage of the parameters is described in the following table:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets the id for the output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If set to &amp;ldquo;false&amp;rdquo;, output is not used (default value is &amp;ldquo;true&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets the update interval in seconds for the output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;start&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets the start time in seconds for output generation. This has nothing to do with the run time of the actual simulation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets the end time in seconds for output generation. This has nothing to do with the run time of the actual simulation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;loader&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets where the output is loaded from using the Java-class (see previous listing)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;interaction-record&#34;&gt;Interaction record&lt;/h4&gt;
&lt;p&gt;Each interaction record is derived from a certain interaction type and composed of several entries,which are separated by Element &lt;code&gt;separator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The configuration of the file output is explained at the example of the &lt;code&gt;VehicleUpdates&lt;/code&gt; interaction:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;subscription id=&amp;quot;VehicleUpdates&amp;quot; enabled=&amp;quot;true&amp;quot;&amp;gt;
    &amp;lt;entries&amp;gt;
        &amp;lt;entry&amp;gt;&amp;quot;UPDATE_VEHICLE&amp;quot;&amp;lt;/entry&amp;gt;
        &amp;lt;entry&amp;gt;Time&amp;lt;/entry&amp;gt;
        &amp;lt;entry&amp;gt;Updated:Name&amp;lt;/entry&amp;gt;
        &amp;lt;entry&amp;gt;Updated:Speed&amp;lt;/entry&amp;gt;
        &amp;lt;entry&amp;gt;Updated:Position.Latitude&amp;lt;/entry&amp;gt;
        &amp;lt;entry&amp;gt;Updated:Position.Longitude&amp;lt;/entry&amp;gt;
    &amp;lt;/entries&amp;gt;
&amp;lt;/subscription&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Specific Configuration for interaction&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attribute &lt;code&gt;id&lt;/code&gt; indicates the interaction type, namely the class name of the interaction.&lt;/li&gt;
&lt;li&gt;The element &lt;code&gt;entries&lt;/code&gt; defines the format and content of the handled subscription record.&lt;/li&gt;
&lt;li&gt;The element &lt;code&gt;entries&lt;/code&gt; is composed of several sub-elements &lt;code&gt;entry&lt;/code&gt;, which correspond to columns of a subscription
record and the sequence of the columns is the same as that of sub-elements entry.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In total, there are three basic types of entries:&lt;/p&gt;
&lt;h4 id=&#34;constant&#34;&gt;Constant&lt;/h4&gt;
&lt;p&gt;Every quoted entry is defined as a constant. The content inside the quotation will be directly written
into each corresponding interaction record.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;entry&amp;gt;&amp;quot;UPDATE_VEHICLE&amp;quot;&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for constant type entry&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;basic-method&#34;&gt;Basic method&lt;/h4&gt;
&lt;p&gt;The Basic method type accesses values of the interaction object by using the appropriate &lt;code&gt;getXXX()&lt;/code&gt; methods. For an entry, the
root object for method invoking is the corresponding interaction class, here &lt;code&gt;VehicleUpdates&lt;/code&gt;. As this object provides
the simulation time by calling the getter method &lt;code&gt;getTime()&lt;/code&gt;, the entry &lt;code&gt;Time&lt;/code&gt; retrieves the requested value.
If a null object is returned before the last method of cascaded methods is invoked, then &lt;code&gt;null&lt;/code&gt; will be written
to the corresponding field.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;entry&amp;gt;Time&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for constant type entry&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;iteration&#34;&gt;Iteration&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;entry&amp;gt;Updated:Id&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for method type entry with iteration&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first part of this example is &lt;code&gt;Updated&lt;/code&gt; , which means to invoke the getUpdated method of class
&lt;code&gt;VehicleUpdates&lt;/code&gt;. Then a list of &lt;code&gt;VehicleInfo&lt;/code&gt; objects is returned. The character &lt;code&gt;:&lt;/code&gt; indicates the iteration,
which means that for each of the &lt;code&gt;VehicleInfo&lt;/code&gt; objects in the returned list the &lt;code&gt;getId&lt;/code&gt; method is invoked.&lt;/p&gt;
&lt;h4 id=&#34;cascading&#34;&gt;Cascading&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;entry&amp;gt;Updated:Position.Latitude&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for method type entry with iteration and cascading&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this example, there is a dot operation, which is a cascade operation. Here &lt;code&gt;getPosition&lt;/code&gt; method of &lt;code&gt;VehicleInfo&lt;/code&gt;
class is called and a &lt;code&gt;GlobalPosition&lt;/code&gt; object is returned. Then we continuously invoke the &lt;code&gt;getLatitude&lt;/code&gt;
method of this &lt;code&gt;GlobalPosition&lt;/code&gt; object.&lt;/p&gt;
&lt;h4 id=&#34;extended-method&#34;&gt;Extended Method&lt;/h4&gt;
&lt;p&gt;All the methods involved above are the basic methods. There also is some functionality, which we cannot
extract from these existing methods. So an extended method set is offered to meet these requirements
and also as an extension point in the future.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;entry&amp;gt;TimeInSec&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for simple extended method type entry&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With existing methods of &lt;code&gt;VehicleUpdates&lt;/code&gt; and its super class &lt;code&gt;Interaction&lt;/code&gt;, we cannot get the timestamp of
a interaction in second. (only &lt;code&gt;Interaction.getTime&lt;/code&gt;, which returns a time in ns, is available). Here, &lt;code&gt;getTimeInSec&lt;/code&gt;
is a method extension for &lt;code&gt;Interaction&lt;/code&gt; class. The extended method set will be listed later.&lt;/p&gt;
&lt;h2 id=&#34;further-details&#34;&gt;Further details&lt;/h2&gt;
&lt;p&gt;The method type of entry definition supports cascaded iteration as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;entry&amp;gt;List1:List2:Id&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for cascaded iteration&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It is possible to handle several different iterating operations, coming from the entry definition:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;entry&amp;gt;Senders:Id&amp;lt;/entry&amp;gt;
&amp;lt;entry&amp;gt;Receivers:Id&amp;lt;/entry&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for multi-level iteration&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getSenders()&lt;/code&gt; and &lt;code&gt;getReceivers()&lt;/code&gt; are two different iterations. In this case, a combination of both Ids from
the lists will be generated. The result may look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;sender1, receiver1
sender1, receiver2
sender2, receiver1
sender2, receiver2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Output result of the above listing&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Note: the longest matched prefix will be considered as the same iterating operation, which means they are in the same level of iteration structure.&lt;/p&gt;
&lt;h2 id=&#34;additional-features&#34;&gt;Additional features&lt;/h2&gt;
&lt;h4 id=&#34;limit-output-on-time-frame&#34;&gt;Limit output on time frame&lt;/h4&gt;
&lt;p&gt;You can configure the File Output Generator to write out interactions within a specific frame of simulation time.
This can be configured by setting the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; attributes accordingly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;output id=&amp;quot;fileoutput&amp;quot; enabled=&amp;quot;true&amp;quot; 
            start=&amp;quot;300&amp;quot; end=&amp;quot;1000&amp;quot; update=&amp;quot;5&amp;quot; 
            loader=&amp;quot;org.eclipse.mosaic.fed.output.generator.file.FileOutputLoader&amp;quot;&amp;gt;
    ...
&amp;lt;/output&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for restricting output generation of interactions within a time frame&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;compress-output&#34;&gt;Compress Output&lt;/h4&gt;
&lt;p&gt;The tag &lt;code&gt;&amp;lt;write&amp;gt;file+compress&amp;lt;/write&amp;gt;&lt;/code&gt; can be added to the output configuration, in order
to compress the output using gzip compression. This feature is suitable for large-scale scenarios with
many outputs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;output id=&amp;quot;output&amp;quot; loader=&amp;quot;org.eclipse.mosaic.fed.output.generator.file.FileOutputLoader&amp;quot;&amp;gt;
    &amp;lt;write&amp;gt;file+compress&amp;lt;/write&amp;gt;
    ...
&amp;lt;/output&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse MOSAIC Application Simulator</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/application_simulator/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/application_simulator/</guid>
      <description>&lt;p&gt;The &lt;strong&gt;Application Simulator&lt;/strong&gt; plays an important role in the simulation of vehicles and its functions. It provides the capability
to model the application logic for different simulation units (e.g. vehicles, road side units (RSUs), traffic lights, and others)
as well as possible interaction attempts between the units via different communication links.&lt;/p&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Learn more about how to 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/&#34;&gt;develop applications&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;This simulator does not need to be installed. It is delivered as part of the Eclipse MOSAIC installation package.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The Application simulator offers configuration possibilities for several aspects, e.g.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the simulator itself&lt;/li&gt;
&lt;li&gt;the developed and simulated application(s) (depending on the application)&lt;/li&gt;
&lt;li&gt;the mapping.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In terms of the scenario folder structure, the configuration files are located in the folders, as outlined in the overview:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   ├─ application
   |  ├─ application_config.json ............. Configuration file for the application simulator.
   |  ├─ &amp;lt;scenario_name&amp;gt;.db .................. Database file for navigation.
   |  ├─ YourApplication.jar ................. Application(s) to be simulated.
   |  └─ your_application_config.json ........ Optional configuration for application(s).
   └─ mapping
      └─ mapping_config.json ................. Configuration file for the application mapping.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;Application Simulator&lt;/strong&gt; is configured in the file &lt;code&gt;&amp;lt;scenario_name&amp;gt;/application/application_config.json&lt;/code&gt;.
It is not necessary to provide the file, as in this case of a non-existing file, the following default configuration options are used:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;messageCacheTime&amp;quot;: &amp;quot;30s&amp;quot;,
    &amp;quot;encodePayloads&amp;quot;: true,
    &amp;quot;navigationConfiguration&amp;quot; : {
        &amp;quot;type&amp;quot;: &amp;quot;database&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Furthermore, depending on the deployed &lt;strong&gt;Applications&lt;/strong&gt;, the applications itself may offer configuration options
in custom configuration files (e.g. &lt;code&gt;EtsiApplication.json&lt;/code&gt; or &lt;code&gt;EtsiApplication_veh_0.json&lt;/code&gt; - 





  
  

&lt;a href=&#34;#etsi-application-for-vehicles&#34;&gt;see below&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;The &lt;strong&gt;Mapping&lt;/strong&gt; configuration is presented in close detail in 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_mapping/&#34;&gt;Application - Mapping&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;application-architecture&#34;&gt;Application Architecture&lt;/h2&gt;
&lt;p&gt;Each simulation unit (e.g. vehicle, RSU, traffic light ..) can have different applications (depending on their application






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_mapping/&#34;&gt;Mapping&lt;/a&gt;. The applications
for the units are basically compiled JAVA classes, which &lt;strong&gt;extend&lt;/strong&gt; the abstract class &lt;code&gt;AbstractApplication&lt;/code&gt;. Those
classes have to be deployed as pre-compiled JAR files into the &lt;code&gt;application&lt;/code&gt; folder of the simulated scenario.&lt;/p&gt;















&lt;figure id=&#34;figure-overview-of-interaction-between-applications-and-the-units-operating-system-with-its-modules-an-example-v2x-message-propagation-is-presented&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/application_overview.svg&#34; data-caption=&#34;Overview of interaction between applications and the unit&amp;rsquo;s operating system with its modules. An example V2X message propagation is presented.&#34;&gt;


  &lt;img src=&#34;../images/application_overview.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Overview of interaction between applications and the unit&amp;rsquo;s operating system with its modules. An example V2X message propagation is presented.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;application-operating-system&#34;&gt;Application Operating System&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;AbstractApplication&lt;/code&gt; possesses a unit-specific &lt;code&gt;OperatingSystem&lt;/code&gt;, which allows interactions with the simulated parameters.
The operating system provides access to information like the current time or position of the units and could control unit-specific
actions (like &lt;code&gt;slowDown()&lt;/code&gt; for vehicles).&lt;/p&gt;
&lt;p&gt;As the interaction types for navigation (retrieving road network information and calculating routes) and communication (preparing and
sending messages) are more complex, they are separated into the specific modules &lt;code&gt;NavigationModule&lt;/code&gt; (Navigation + Routing for
vehicles) / &lt;code&gt;RoutingModule&lt;/code&gt; (Routing-only for static units) and &lt;code&gt;AdHocModule&lt;/code&gt; / &lt;code&gt;CellModule&lt;/code&gt; with APIs dedicated to their purpose.&lt;/p&gt;
&lt;p&gt;The following table lists all modules a unit&amp;rsquo;s operating system could provide.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NavigationModule&lt;/td&gt;
&lt;td&gt;Full featured access to the central navigation component for vehicles&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RoutingModule&lt;/td&gt;
&lt;td&gt;Access to routing functionalities for static units as RSUs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AdHocModule&lt;/td&gt;
&lt;td&gt;Communication via ad hoc mode, using WIFI or ITS G5 specific means (e.g. for addressing)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CellModule&lt;/td&gt;
&lt;td&gt;Communication via cellular services (different configuration / addressing modes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PerceptionModule&lt;/td&gt;
&lt;td&gt;Access to perception capabilities via the central perception component&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;The presented communication modules &lt;code&gt;AdHocModule&lt;/code&gt;, &lt;code&gt;CellModule&lt;/code&gt; are used for the sending part of a transmission. The message
reception is realized by Application Interfaces provided by the &lt;code&gt;CommunicationApplication&lt;/code&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;basic-applications&#34;&gt;Basic Applications&lt;/h2&gt;
&lt;p&gt;Eclipse MOSAIC is shipped with several example applications which can be loaded on the vehicles. Next to the applications shipped with
the tutorial scenarios &lt;strong&gt;Barnim&lt;/strong&gt; and &lt;strong&gt;Tiergarten&lt;/strong&gt;, there are further example applications to be found on our website.&lt;/p&gt;
&lt;p&gt;Additionally, we provide an ETSI conform application which implement specific CAM generation rules for vehicles
(&lt;code&gt;org.eclipse.mosaic.fed.application.app.etsi.VehicleCamSendingApp&lt;/code&gt;), which is described in the following:&lt;/p&gt;
&lt;h3 id=&#34;etsi-application-for-vehicles&#34;&gt;ETSI Application for vehicles&lt;/h3&gt;
&lt;p&gt;This application generates ETSI data for its simulation unit (e.g. heading, position, speed and time for
vehicles). According to its configuration, the application then sends out CAMs to other vehicles in range.
Note that the messages are only send when the time lies between the configured minimum and maximum
interval.&lt;/p&gt;
&lt;p&gt;Currently, the default configuration (&lt;code&gt;EtsiApplication.json&lt;/code&gt;) for the ETSI application looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    /* The minimal length in bytes assumed for the payload to be send with each CAM. */
    &amp;quot;minimalPayloadLength&amp;quot;: 200,
    /* The maximum time offset (here 1 second) of sending CA-messages 
     * (the offset will be different for every single vehicle to avoid interference) */
    &amp;quot;maxStartOffset&amp;quot;: &amp;quot;1s&amp;quot;,  
    /* CAMs are sent at most every 1 second */
    &amp;quot;minInterval&amp;quot;: &amp;quot;500ms&amp;quot;,
    /* CAMs are sent at least every 1 second */
    &amp;quot;maxInterval&amp;quot;: &amp;quot;1s&amp;quot;,
    /* CAMs are sent when the position of the vehicle changes at least about 4 meters */
    &amp;quot;positionChange&amp;quot;: 4,
    /* CAMs are sent when the heading of the vehicle changes at least about 4 degrees */
    &amp;quot;headingChange&amp;quot;: 4,
    /* CAMs are sent when the velocity of the vehicle changes at least about 0.5 m/s */
    &amp;quot;velocityChange&amp;quot;: 0.5
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CAMs sent out by this application consist of four parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Header with generic information&lt;/li&gt;
&lt;li&gt;MessageBody&lt;/li&gt;
&lt;li&gt;TaggedValue list&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First of all, generic information like protocol version and creation time stamp are transmitted. Normally
this data set follows a network beacon, already containing data like position and speed. Nevertheless
this functionality must be implemented in the network layer, i.e. in the network simulator. At
the moment this is not supported and is therefore compensated in the next message part, the message
body. The body contains vehicle awareness data, including data like vehicle width, length, position, speed, type and heading.
However, the specification is not completely implemented. Last but not least a message can contain optional data.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simulation Entities and Application Mapping</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/application_mapping/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/application_mapping/</guid>
      <description>&lt;p&gt;Closely related to the Application Simulator, the &lt;strong&gt;Mapping&lt;/strong&gt; Ambassador is used for the initial choreography of a simulation.
It defines two major aspects for the simulation units:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;number, properties, position (e.g. of RSUs, traffic lights) or initial routes (of vehicles, simulated in a traffic/vehicle simulator)&lt;/li&gt;
&lt;li&gt;specific application(s) to be &amp;ldquo;mapped&amp;rdquo; on the simulation units and simulated in the Application Simulation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The JSON based configuration is located in &lt;code&gt;&amp;lt;scenario_name&amp;gt;/mapping/mapping_config.json&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The Mapping configuration is divided into different parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pre Definitions of &lt;code&gt;prototypes&lt;/code&gt; and &lt;code&gt;deviations&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Entity Definitions of &lt;code&gt;vehicles&lt;/code&gt;, &lt;code&gt;rsus&lt;/code&gt;, &lt;code&gt;tls&lt;/code&gt; &lt;code&gt;servers&lt;/code&gt; and &lt;code&gt;tmcs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Advanced Vehicle Definitions (including route generation) in &lt;code&gt;matrixMappers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Common Definitions in &lt;code&gt;config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;prototypes&#34;&gt;Prototypes&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;prototypes&lt;/code&gt; define models for other objects, which can be reused later in the other sections of the Mapping. This allows reusing the
definition of certain entities such as vehicles or the combination of multiple applications, reducing redundancies and resulting in
shorter Mapping configurations.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;prototypes&amp;quot;: [
    {
        &amp;quot;name&amp;quot;: &amp;quot;CamVehicle&amp;quot;,
        &amp;quot;accel&amp;quot;: 2.6,
        &amp;quot;decel&amp;quot;: 4.5,
        &amp;quot;length&amp;quot;: 5.00,
        &amp;quot;maxSpeed&amp;quot;: 70.0,
        &amp;quot;applications&amp;quot;: [ &amp;quot;org.eclipse.mosaic.fed.application.app.etsi.VehicleCamSendingApp&amp;quot; ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Prototypes can be created for all types of entities. Next to the list of &lt;code&gt;applications&lt;/code&gt; which is available for all types of entities,
vehicle types provide various other parameters to be adjusted.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Deviation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vehicleClass&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The class of the vehicle, e.g. &lt;code&gt;Car&lt;/code&gt;, &lt;code&gt;ElectricVehicle&lt;/code&gt;, &lt;code&gt;EmergencyVehicle&lt;/code&gt;, &lt;code&gt;Bicycle&lt;/code&gt;, &lt;code&gt;HeavyGoodsVehicle&lt;/code&gt;, and more.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;accel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The maximum acceleration of the vehicle in $m/s^2$.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;decel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The maximum deceleration of the vehicle in $m/s^2$, e.g. when stopping for traffic lights.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;emergencyDecel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The maximum deceleration of the vehicle in $m/s^2$, in order to avoid accidents.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;length&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The length of the vehicle in $m$.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;maxSpeed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The maximum speed of the vehicle in $m/s$.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;minGap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The minimum gap towards the leader in $m$, i.e. the space in front in a traffic jam.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sigma&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The driver&amp;rsquo;s imperfection $[0,1]$.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tau&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The reaction time (or time headway) of the vehicle in $s$.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;speedFactor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;This factor is used to determine the speed limit to comply on roads, e.g. &lt;code&gt;1.1&lt;/code&gt; would exceed the speed limit by 10%.&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;laneChangeMode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The lane changing behavior of the vehicle: &lt;code&gt;COOPERATIVE&lt;/code&gt;. &lt;code&gt;CAUTIOUS&lt;/code&gt;, &lt;code&gt;AGGRESSIVE&lt;/code&gt;, &lt;code&gt;PASSIVE&lt;/code&gt;, &lt;code&gt;OFF&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;applications&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The list of applications to map onto this vehicle type.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For the majority of the parameters above (see column &amp;ldquo;Deviation&amp;rdquo;), a normal distribution can be created. In that case, each individual
vehicle spawned with this prototype will be loaded with a random value within this distribution. To achieve this, a separate &lt;code&gt;deviations&lt;/code&gt;
attribute must be added to the type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;prototypes&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;Car&amp;quot;,
            &amp;quot;length&amp;quot;: 5.0, 
            &amp;quot;maxSpeed&amp;quot;: 70.0,
            &amp;quot;deviations&amp;quot;: {
                &amp;quot;length&amp;quot;: 1.2,
                &amp;quot;maxSpeed&amp;quot;: 5.0
            }
        }
    ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to the config above, the basic parameter value conforms to the expected value, and the given value in the &lt;code&gt;deviations&lt;/code&gt;
attribute conforms to the $\sigma$ of the Gaussian distribution(meaning for the example of maxSpeed that ~68% of the values will
be located in the interval [65.0, 75.0]). The deviation will be limited to ±2$\sigma$.&lt;/p&gt;
&lt;h3 id=&#34;entities&#34;&gt;Entities&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Vehicles&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;vehicles&lt;/code&gt;-section is the centerpiece of the Mapping configuration. It defines the departures (times and number),
routes, and types of the vehicles.&lt;/p&gt;
&lt;p&gt;Each spawner in this list generates a traffic stream of vehicles on a certain &lt;code&gt;route&lt;/code&gt;. The vehicles stream begins at &lt;code&gt;startingTime&lt;/code&gt; and
generates vehicles until &lt;code&gt;maxNumberVehicles&lt;/code&gt; is reached. The time between two consecutively vehicles is implicitly given by the
&lt;code&gt;targetFlow&lt;/code&gt; property, which defines how many vehicles per hour are going to be spawned.&lt;/p&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;All times (e.g., &lt;code&gt;startingTime&lt;/code&gt;) can be defined as numbers or alternatively using a string and defining a unit (e.g. &lt;code&gt;&amp;quot;5.0 s&amp;quot;&lt;/code&gt;).
As some configurations use nanoseconds and others use seconds you are always on the save side using the string declaration as
MOSAIC will convert values correctly.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Each vehicle spawner must refer to at least one vehicle type (&lt;code&gt;types&lt;/code&gt;). A vehicle type must either refer to a type from the &lt;code&gt;prototypes&lt;/code&gt;
section by using its &lt;code&gt;name&lt;/code&gt;, or be defined as a completely new vehicle type with all necessary parameters. If more than one vehicle type
is referenced in the &lt;code&gt;types&lt;/code&gt; attribute, &lt;code&gt;weight&lt;/code&gt;s can be used to specify the ratios to choose between them when loading an individual
vehicle. If no weights are defined, individual vehicle types are assumed to be distributed equally.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;If at least one vehicle type has a weight defined, all types without a defined weight are ignored.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;vehicles&amp;quot;: [
    {
        &amp;quot;startingTime&amp;quot;: 5.0,
        &amp;quot;targetFlow&amp;quot;: 1800,
        &amp;quot;maxNumberVehicles&amp;quot;: 120,
        &amp;quot;route&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;types&amp;quot;: [
            {
                &amp;quot;name&amp;quot;: &amp;quot;CAMVehicle&amp;quot;,
                &amp;quot;weight&amp;quot;: 0.1
            },
            {
                &amp;quot;name&amp;quot;: &amp;quot;NormalVehicle&amp;quot;, // this vehicle has no applications 
                &amp;quot;applications&amp;quot;: [ ],  
                &amp;quot;weight&amp;quot;: 0.2
            }
        ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additional notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;route&lt;/code&gt; refers to a route usually defined in the scenario database file (&lt;code&gt;*.db&lt;/code&gt;) of the scenario.&lt;/li&gt;
&lt;li&gt;In order to define only one single vehicle to be spawned, the &lt;code&gt;maxNumberVehicles&lt;/code&gt; property can be set to &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;By defining the &lt;code&gt;endingTime&lt;/code&gt; property, the flow is stopped from being generated when the given simulation time is reached.&lt;/li&gt;
&lt;li&gt;By defining the &lt;code&gt;spawningMode&lt;/code&gt; to one of the following values, the departure time of the individual vehicles can be adjusted:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CONSTANT&lt;/code&gt; - default case, all vehicles have equal time distance to match &lt;code&gt;target_flow&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POISSON&lt;/code&gt; -  vehicles depart within a Poisson distribution, resulting in a more natural traffic flow.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GROW&lt;/code&gt; - the flow of departing vehicles increases linear up to &lt;code&gt;target_flow&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SHRINK&lt;/code&gt; - the flow of departing vehicles decreases linear starting at &lt;code&gt;target_flow&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GROW_AND_SHRINK&lt;/code&gt; - the flow of departing vehicles increases up to &lt;code&gt;target_flow&lt;/code&gt; and decreases afterwards.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;By defining the &lt;code&gt;laneSelectionMode&lt;/code&gt; to one the following values, the selection of the departure lane can be adjusted:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DEFAULT&lt;/code&gt; - selects the lane for the next vehicle based on the list of given &lt;code&gt;lanes&lt;/code&gt; in a roundrobin manner.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ROUNDROBIN_HIGHWAY&lt;/code&gt; - trucks will be spawned on the rightmost lane, all other vehicles according to &lt;code&gt;DEFAULT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HIGHWAY&lt;/code&gt; - trucks will be spawned on the rightmost lane, all other vehicles according to &lt;code&gt;BEST&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RANDOM&lt;/code&gt; - the vehicle will be placed randomly on one of the available lanes of the road.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FREE&lt;/code&gt; - the vehicle will be placed on a free lane of the road.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BEST&lt;/code&gt; - the vehicle will be placed on the best lane of the road, according to the current traffic situation and departure speed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Road Side Units&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;rsus&lt;/code&gt;-section offers the possibility to define instances of application supported Road Side Units (RSU)s and place them on a
defined position (&lt;code&gt;lat&lt;/code&gt;, &lt;code&gt;lon&lt;/code&gt; coordinates). Referring to &lt;code&gt;prototype&lt;/code&gt; definitions with simply specifying its name in the &lt;code&gt;name&lt;/code&gt;
property will automatically fill in relevant properties of the RSU.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;rsus&amp;quot;: [
    {
        &amp;quot;lat&amp;quot;: 52.65027,
        &amp;quot;lon&amp;quot;: 13.54500,
        &amp;quot;name&amp;quot;: &amp;quot;WeatherServer&amp;quot;,
        &amp;quot;applications&amp;quot;: [ &amp;quot;org.eclipse.mosaic.app.tutorial.WeatherServerApp&amp;quot; ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Traffic Lights&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;trafficLights&lt;/code&gt;-section, applications can be mapped to traffic light groups. Usually, individual traffic lights are part of
traffic light groups to control a whole junction, whereas the junction possesses a certain position. The traffic light groups and
their positions are defined in the simulator specific configuration file (e.g. the *.net.xml for SUMO and *.ttl.json for PHABMACS).
The &lt;code&gt;tlGroupId&lt;/code&gt;-property allows mapping of applications to the traffic light groups, referring them by Id.&lt;/p&gt;
&lt;p&gt;Alternatively, the definition of the &lt;code&gt;weight&lt;/code&gt;-property leads to a random distribution of the referred applications through ALL traffic lights of the
scenario (Note: The weights do not have to add up to 100 or 1). Consequently, all traffic lights will be mapped using the specified
prototypes as soon as one weight differs from zero. So in case you don’t want all traffic lights to have applications running on them you
have to define one traffic light without any applications and add a weight to it. If neither tlGroupId nor weight are defined for an app, the weight will be set to 1.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;trafficLights&amp;quot;: [
    {
        &amp;quot;tlGroupId&amp;quot;: &amp;quot;26704448&amp;quot;,
        &amp;quot;applications&amp;quot;: [ &amp;quot;org.eclipse.mosaic.app.tutorial.TrafficLightApp&amp;quot; ]
    },
    {
        &amp;quot;tlGroupId&amp;quot;: &amp;quot;252864802&amp;quot;,
        &amp;quot;applications&amp;quot;: [ &amp;quot;org.eclipse.mosaic.app.tutorial.TrafficLightApp&amp;quot; ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more information, explained for detailed examples with different mapping options regarding traffic lights, please refer to






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/#traffic-lights&#34;&gt;Simulation Scenarios - Traffic Lights&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Servers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;servers&lt;/code&gt;-array can be used to specify server units, which can be used to communicate with other units via the cell module.
Capacity configurations for servers should be done when enabling the &lt;code&gt;CellModule&lt;/code&gt;. Delay and transmission models are configured
in the &lt;code&gt;network.json&lt;/code&gt; of the cell module (see 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_cell/&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;The &lt;code&gt;group&lt;/code&gt; parameter in the mapping configuration has to match with the id in the network configuration in order to properly function.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;servers&amp;quot;: [
    {
        &amp;quot;name&amp;quot;: &amp;quot;MyServer&amp;quot;,
        &amp;quot;group&amp;quot;: &amp;quot;TestServers&amp;quot;,
        &amp;quot;applications&amp;quot;: [ &amp;quot;ServerApp1&amp;quot;, &amp;quot;ServerApp2&amp;quot; ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Traffic Management Centers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;tmc&lt;/code&gt;-section offers the possibility to define instances of a Traffic Management Center (TMC). A TMC
provides the possibility to interact with the infrastructure of the road, i.e. retrieving traffic properties
from detectors (e.g. traffic flow), and changing properties from the road (e.g. speed limits).
Additionally, TMCs are an extension of Servers and can be configured in the same way that servers are&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;tmcs&amp;quot;: [
    {
        &amp;quot;name&amp;quot;: &amp;quot;HighwayManagement&amp;quot;,
        &amp;quot;group&amp;quot;: &amp;quot;TestTmcServers&amp;quot;,
        &amp;quot;applications&amp;quot;: [ &amp;quot;org.eclipse.mosaic.app.tutorial.HighwayManagementApp(&#39;3&#39;, 3)&amp;quot; ],
        &amp;quot;inductionLoops&amp;quot;: [ &amp;quot;detector_0&amp;quot;, &amp;quot;detector_1&amp;quot;, &amp;quot;detector_2&amp;quot; ],
        &amp;quot;laneAreaDetectors&amp;quot;: [ ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;All unit spawners could be realized in two different ways. The Deterministic Mapping produces the exact same sequence of mapped vehicles
in every simulation run with regard to the given ratios at each point in time the simulation).
The Stochastic Mapping results in a random order of mapped units.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;use-type-distributions-in-complex-traffic-scenarios&#34;&gt;Use Type Distributions in Complex Traffic Scenarios&lt;/h3&gt;
&lt;p&gt;In the case, you have many vehicle spawners defined and you want to distribute prototypes on those vehicles equally without defining them
again and again, you can use &lt;code&gt;typeDistributions&lt;/code&gt;. By doing so, it is very simple to adjust the list of types and weights at only one
place in the configuration file.&lt;/p&gt;
&lt;p&gt;Instead of defining an equal list of types and weights for each single vehicle spawner, like in this example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;vehicles&amp;quot;: [
    {
        &amp;quot;startingTime&amp;quot;: 5.0,
        &amp;quot;targetFlow&amp;quot;: 1800,
        &amp;quot;maxNumberVehicles&amp;quot;: 120,
        &amp;quot;route&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;types&amp;quot;: [
            { &amp;quot;name&amp;quot;: &amp;quot;TypeA&amp;quot;, &amp;quot;weight&amp;quot;: 0.1 },
            { &amp;quot;name&amp;quot;: &amp;quot;TypeB&amp;quot;, &amp;quot;weight&amp;quot;: 0.9 }        
        ]
    },
    {
        &amp;quot;startingTime&amp;quot;: 55.0,
        &amp;quot;targetFlow&amp;quot;: 1800,
        &amp;quot;maxNumberVehicles&amp;quot;: 120,
        &amp;quot;route&amp;quot;: &amp;quot;2&amp;quot;,
        &amp;quot;types&amp;quot;: [
            { &amp;quot;name&amp;quot;: &amp;quot;TypeA&amp;quot;, &amp;quot;weight&amp;quot;: 0.1 },
            { &amp;quot;name&amp;quot;: &amp;quot;TypeB&amp;quot;, &amp;quot;weight&amp;quot;: 0.9 }        
        ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;hellip; you can use &lt;code&gt;typeDistributions&lt;/code&gt; to define the distribution of types for each vehicle once and reuse them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;typeDistributions&amp;quot;: {
    &amp;quot;exampleTypeDist&amp;quot; : [
        { &amp;quot;name&amp;quot;: &amp;quot;TypeA&amp;quot;, &amp;quot;weight&amp;quot;: 0.1 },
        { &amp;quot;name&amp;quot;: &amp;quot;TypeB&amp;quot;, &amp;quot;weight&amp;quot;: 0.9 }       
    ]
},
&amp;quot;vehicles&amp;quot;: [
    {
        &amp;quot;startingTime&amp;quot;: 5.0,
        &amp;quot;targetFlow&amp;quot;: 1800,
        &amp;quot;maxNumberVehicles&amp;quot;: 120,
        &amp;quot;route&amp;quot;: &amp;quot;1&amp;quot;,
        &amp;quot;typeDistribution&amp;quot;: &amp;quot;exampleTypeDist&amp;quot;
    },
    {
        &amp;quot;startingTime&amp;quot;: 55.0,
        &amp;quot;targetFlow&amp;quot;: 1800,
        &amp;quot;maxNumberVehicles&amp;quot;: 120,
        &amp;quot;route&amp;quot;: &amp;quot;2&amp;quot;,
        &amp;quot;typeDistribution&amp;quot;: &amp;quot;exampleTypeDist&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Charging Stations&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;While you can define Charging Stations in your mapping configuration the necessary &lt;strong&gt;Charging Station and Battery Simulators&lt;/strong&gt;
are part of 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;chargingStations&lt;/code&gt;-section can be used to specify charging stations which handle electric vehicle battery charging.
A charging station is defined by a position, and a collection of charging spots, where each charging spot represents a
possibility for an electric vehicle to dock. The charging spots can be defined separately from each other supporting different
charging types (&lt;code&gt;AC_3_PHASE&lt;/code&gt;, &lt;code&gt;AC_1_PHASE&lt;/code&gt; and &lt;code&gt;DC&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt; &amp;quot;chargingStations&amp;quot;: [
     {
         &amp;quot;position&amp;quot;: {
             &amp;quot;latitude&amp;quot;: 52.51284101639178,
             &amp;quot;longitude&amp;quot;: 13.328037261722278
         },
         &amp;quot;group&amp;quot;: &amp;quot;chargingStation&amp;quot;,
         &amp;quot;chargingSpots&amp;quot;: [
             {
                 &amp;quot;chargingType&amp;quot;: &amp;quot;AC_3_PHASE&amp;quot;,
                 &amp;quot;maxVoltage&amp;quot;: 400,
                 &amp;quot;maxCurrent&amp;quot;: 16
             },
             {
                 &amp;quot;chargingType&amp;quot;: &amp;quot;AC_3_PHASE&amp;quot;,
                 &amp;quot;maxVoltage&amp;quot;: 400,
                 &amp;quot;maxCurrent&amp;quot;: 16
             }
         ],
         &amp;quot;applications&amp;quot;: [
             &amp;quot;&amp;lt;package&amp;gt;.ChargingStationApp&amp;quot;
         ]
     }
 ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;advanced-vehicle-spawners-with-route-generation&#34;&gt;Advanced vehicle spawners with route generation&lt;/h3&gt;
&lt;p&gt;It is also possible to define and use OD (origin-destination) matrices by adding a ODMatrixMapper to the &lt;code&gt;matrixMappers&lt;/code&gt;-list.
Each MatrixMapper consists of a list of &lt;code&gt;points&lt;/code&gt;, the vehicle-&lt;code&gt;types&lt;/code&gt; to be used and the actual flow-values (&lt;code&gt;odValues&lt;/code&gt;) between each
of the points. It is possible to define multiple matrices using different values for &lt;code&gt;startingTime&lt;/code&gt; and &lt;code&gt;maxTime&lt;/code&gt;.
This way can achieve distinctively different compositions of the vehicle flows.&lt;/p&gt;
&lt;p&gt;The MatrixMapper will be called before the actual execution of the simulation and will generate vehicle-spawners for the flow between
each of the points.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;
&amp;quot;matrixMappers&amp;quot;: [
    {
        &amp;quot;points&amp;quot;: [ 
            {
                &amp;quot;name&amp;quot;: &amp;quot;CityA&amp;quot;, 
                &amp;quot;position&amp;quot;: {
                    &amp;quot;center&amp;quot;: {
                        &amp;quot;latitude&amp;quot;: 52,
                        &amp;quot;longitude&amp;quot;: 13
                    },
                    &amp;quot;radius&amp;quot;: 1000
                }       
            },
            {
                &amp;quot;name&amp;quot;: &amp;quot;CityB&amp;quot;, 
                &amp;quot;position&amp;quot;: {
                    &amp;quot;center&amp;quot;: {
                        &amp;quot;latitude&amp;quot;: 48,
                        &amp;quot;longitude&amp;quot;: 10
                    },
                    &amp;quot;radius&amp;quot;: 1000
                }       
            }
        ],
        &amp;quot;types&amp;quot;: [
            {
                &amp;quot;name&amp;quot;: &amp;quot;CAMVehicle&amp;quot;
            }
        ],
        &amp;quot;odValues&amp;quot;: [
            [0, 100], //100 vehicles from CityA to CityB
            [200, 0]  //200 vehicles from CityB to CityA
        ]
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;common-configuration&#34;&gt;Common Configuration&lt;/h3&gt;
&lt;p&gt;Next to the specific configuration of prototypes and simulation entities, some general parameters can be adjusted:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;config&amp;quot;: {
        &amp;quot;scaleTraffic&amp;quot; : 1.0, 
        &amp;quot;start&amp;quot;: 0, 
        &amp;quot;end&amp;quot;: 500,
        &amp;quot;adjustStartingTimes&amp;quot;: false,
        &amp;quot;randomizeFlows&amp;quot;: false,
        &amp;quot;randomizeStartingTimes&amp;quot; : false,
        &amp;quot;randomizeWeights&amp;quot;: false
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;scaleTraffic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Scales the &lt;code&gt;targetFlow&lt;/code&gt; of spawned vehicles per hour as well as the &lt;code&gt;maxNumberVehicles&lt;/code&gt; by the given factor.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;start&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Adjusts the point in time (in $s$) to start spawning vehicles. Any vehicle spawner with a lower &lt;code&gt;startingTime&lt;/code&gt; will be ignored.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Adjusts the point in time (in $s$) to end spawning vehicles. Any vehicle spawner with a greater &lt;code&gt;startingTime&lt;/code&gt; will be ignored.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;adjustStartingTimes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If set to &lt;code&gt;true&lt;/code&gt;, the starting time of each spawner is reduced by the value in &lt;code&gt;start&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;randomizeFlows&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If set to &lt;code&gt;true&lt;/code&gt;, the departure time of vehicles within a vehicle spawner is slightly randomized.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;randomizeStartingTimes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If set to &lt;code&gt;true&lt;/code&gt;, the starting time of each vehicle spawner is slightly randomized.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;randomizeWeights&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If set to &lt;code&gt;true&lt;/code&gt;, each &lt;code&gt;weight&lt;/code&gt; greater than zero is slightly randomized.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Read the detailed documentation of the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/mapping_ambassador_config/&#34;&gt;Mapping Configuration&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;unit-identifiers&#34;&gt;Unit Identifiers&lt;/h2&gt;
&lt;p&gt;Every traffic object in Eclipse MOSAIC has a globally unique string identifier. These identifiers are used to identify
a traffic object in Eclipse MOSAIC as well as in different ambassadors. From user’s aspect, these identifiers will be seen in the log files
which are generated after a simulation. The following table explains, which identifier belongs to which traffic object.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Traffic Object&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Eclipse MOSAIC Internal ID&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Vehicle&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;veh_&amp;lt;seq_nr&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;RSU&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rsu_&amp;lt;seq_nr&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;TMC&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tmc_&amp;lt;seq_nr&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Traffic Light&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tl_&amp;lt;group_id&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;seq_nr&lt;/code&gt; is the sequence number of simulated vehicles, RSUs, TMCs, each starting from zero.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_id&lt;/code&gt; is the group id of the traffic light.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Create a New Scenario</title>
      <link>https://www.eclipse.dev/mosaic/docs/scenarios/create_a_new_scenario/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/scenarios/create_a_new_scenario/</guid>
      <description>&lt;p&gt;For creating new scenarios, but also for importing and exporting data from
external sources like OpenStreetMap, SUMO etc into your existing scenarios, we provide the tool &lt;strong&gt;Scenario Convert&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;&lt;strong&gt;scenario-convert&lt;/strong&gt; is part of &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;However, you can use scenario-convert &lt;strong&gt;for free&lt;/strong&gt; to generate scenarios which are executable with Eclipse MOSAIC. &lt;strong&gt;




&lt;a href=&#34;https://www.dcaiti.tu-berlin.de/research/simulation/download/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Get it here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;


    

&lt;a class=&#34;mosaic-btn mosaic-btn-primary&#34; href=&#34;https://www.dcaiti.tu-berlin.de/research/simulation/download/&#34; title=&#34;Download scenario-convert from DCAITI mirror&#34;&gt;&lt;i class=&#34;fas fa-download&#34;&gt;&lt;/i&gt;Download scenario-convert from DCAITI mirror&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;Download &lt;code&gt;scenario-convert&lt;/code&gt; via the link above&lt;/li&gt;
&lt;li&gt;Extract the &lt;code&gt;.zip&lt;/code&gt; and go to the extracted folder&lt;/li&gt;
&lt;li&gt;To use the commands listed later, rename the extracted &lt;code&gt;scenario-convert-&amp;lt;version&amp;gt;.jar&lt;/code&gt; (e.g. &lt;code&gt;scenario-convert-20.0&lt;/code&gt;) into &lt;code&gt;scenario-convert&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Move &lt;code&gt;scenario-convert&lt;/code&gt; to an arbitrary location where you want to create your scenario&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;scenario-convert&lt;/code&gt; will create a database, which is the basis for all map-related tasks performed by Eclipse MOSAIC (e.g. navigation,
route calculation&amp;hellip;).&lt;br&gt;
Based on a MOSAIC database, scenario-convert can export the data to SUMO-conform formats.
Furthermore one can choose, whether to use routes generated by &lt;code&gt;scenario-convert&lt;/code&gt;, use existing
routes or  build own routes via route generation tools (e.g. DUAROUTER by SUMO).&lt;/p&gt;
&lt;p&gt;This chapter intends to highlight the most common workflows for the work with &lt;code&gt;scenario-convert&lt;/code&gt;.
We will be using 





  
  

    

    
    

    
    
      
        
          
            
            
            
          
        
      
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/files/steglitz.osm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;steglitz.osm&lt;/a&gt; OSM-file for most of the
use cases. Best is to save &lt;code&gt;steglitz.osm&lt;/code&gt; in the same directory where &lt;code&gt;scenario-convert&lt;/code&gt; is located.
So feel free follow along with the steps to get a better understanding on how the &lt;code&gt;scenario-convert&lt;/code&gt;-script functions.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;





  
  

&lt;a href=&#34;#reference-documentation-for-scenario-convert&#34;&gt;Here&lt;/a&gt; you can find a complete reference to all options scenario-convert offers.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;















&lt;figure id=&#34;figure-osm-file-of-steglitz&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/osm_uncleaned.png&#34; data-caption=&#34;OSM-File of Steglitz&#34;&gt;


  &lt;img src=&#34;../images/osm_uncleaned.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    OSM-File of Steglitz
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;creating-a-complete-eclipse-mosaic-scenario-from-an-osm-file-with-one-command&#34;&gt;Creating a complete Eclipse MOSAIC-scenario from an OSM-file with one command&lt;/h2&gt;
&lt;p&gt;This is the most straight forward way to create a scenario from your OSM-file.
We will use the option &lt;code&gt;--osm2mosaic&lt;/code&gt;, which is a combination of the options &lt;code&gt;--osm2db&lt;/code&gt;
and &lt;code&gt;--db2mosaic&lt;/code&gt;.&lt;br&gt;
Let&amp;rsquo;s start off by showing you how a complete call could look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar scenario-convert.jar --osm2mosaic -i steglitz.osm
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;In this section we use the scenario name &lt;code&gt;steglitz.*&lt;/code&gt; as synonym for &lt;code&gt;path/to/steglitz.*&lt;/code&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Please be aware that the scenario generated with the call above contains no routes yet, see 





  
  

&lt;a href=&#34;#importing-routes-to-your-scenario&#34;&gt;Import Routes&lt;/a&gt; for more details.
The complete call achieves a couple of things. First off the script is going to create a SQLite-database,
which is used by Eclipse MOSAIC. Furthermore, a directory will be created, which should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;working-directory&amp;gt;
   └─ steglitz
       ├─ steglitz.osm
       ├─ application
       |  └─ steglitz.db
       ├─ cell
       |  ├─ cell_config.json
       |  ├─ network.json
       |  └─ regions.json
       ├─ environment
       |  └─ environment_config.json
       ├─ mapping
       |  └─ mapping_config.json
       ├─ ns3
       |  ├─ ns3_config.json
       |  └─ ns3_federate_config.xml
       ├─ omnetpp
       |  ├─ omnetpp_config.json
       |  └─ omnetpp.ini      
       ├─ output
       |  └─ output_config.xml
       ├─ sns
       |  └─ sns_config.json
       ├─ sumo
       |  ├─ steglitz.net.xml
       |  └─ steglitz.sumocfg
       └─ scenario_config.json .................. General configuration of the simulation scenario
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s walk through all these files:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First the &lt;code&gt;steglitz.db&lt;/code&gt; will be created using the &lt;code&gt;steglitz.osm&lt;/code&gt;-file.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;steglitz.db&lt;/code&gt; will be used to create &lt;code&gt;steglitz.con.xml&lt;/code&gt;, &lt;code&gt;steglitz.edg.xml&lt;/code&gt; and &lt;code&gt;steglitz.nod.xml&lt;/code&gt;, which are files used by SUMO.&lt;/li&gt;
&lt;li&gt;




&lt;a href=&#34;https://sumo.dlr.de/wiki/NETCONVERT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SUMO Netconvert&lt;/a&gt; is used to create &lt;code&gt;steglitz.net.xml&lt;/code&gt;, which is a 




&lt;a href=&#34;https://sumo.dlr.de/wiki/Networks/SUMO_Road_Networks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;network representation&lt;/a&gt; in SUMO.&lt;/li&gt;
&lt;li&gt;Now the SUMO-configuration &lt;code&gt;steglitz.sumo.cfg&lt;/code&gt; is written.&lt;/li&gt;
&lt;li&gt;Afterwards the &lt;code&gt;mapping_config.json&lt;/code&gt; and &lt;code&gt;scenario_config.json&lt;/code&gt; are created and all files are moved to the right place.
In the &lt;code&gt;scenario_config.json&lt;/code&gt; values like the center coordinate will automatically be set using data from the SUMO related files.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While this is technically sufficient to start working on your scenario, like 





  
  

&lt;a href=&#34;#importing-routes-to-your-scenario&#34;&gt;importing routes&lt;/a&gt; to it, there are a couple of other things
you can do to achieve better results.&lt;/p&gt;
&lt;h3 id=&#34;clean-the-osm-file-using-osmosis&#34;&gt;Clean the OSM-file using Osmosis&lt;/h3&gt;
&lt;p&gt;Osmosis will automatically be used to create a new OSM-file with the suffix &lt;code&gt;_cleaned&lt;/code&gt;. The created
file will contain much less clutter and usually is better suited for simulation purposes.
Check the images below to see the difference the clean-up process can make.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar scenario-convert.jar --osm2mosaic -i steglitz.osm
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;row&#34;&gt;
    &lt;div class=&#34;col-6&#34;&gt;
        














&lt;figure id=&#34;figure-uncleaned-osm-file&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/osm_uncleaned.png&#34; data-caption=&#34;Uncleaned OSM-file&#34;&gt;


  &lt;img src=&#34;../images/osm_uncleaned.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Uncleaned OSM-file
  &lt;/figcaption&gt;


&lt;/figure&gt;

    &lt;/div&gt;
    &lt;div class=&#34;col-6&#34;&gt;
        














&lt;figure id=&#34;figure-cleaned-osm-file&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/osm_cleaned.png&#34; data-caption=&#34;Cleaned OSM-file&#34;&gt;


  &lt;img src=&#34;../images/osm_cleaned.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Cleaned OSM-file
  &lt;/figcaption&gt;


&lt;/figure&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;row&#34;&gt;
    &lt;div class=&#34;col-6&#34;&gt;
        














&lt;figure id=&#34;figure-uncleaned-net-file&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/netfile_uncleaned.png&#34; data-caption=&#34;Uncleaned Net-file&#34;&gt;


  &lt;img src=&#34;../images/netfile_uncleaned.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Uncleaned Net-file
  &lt;/figcaption&gt;


&lt;/figure&gt;

    &lt;/div&gt;
    &lt;div class=&#34;col-6&#34;&gt;
        














&lt;figure id=&#34;figure-cleaned-net-file&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/netfile_cleaned.png&#34; data-caption=&#34;Cleaned Net-file&#34;&gt;


  &lt;img src=&#34;../images/netfile_cleaned.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Cleaned Net-file
  &lt;/figcaption&gt;


&lt;/figure&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To avoid &amp;ldquo;cleaning&amp;rdquo; the OSM-file, please use the option &amp;ldquo;skip-osm-filter&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar scenario-convert.jar --osm2mosaic -i steglitz.osm --skip-osm-filter
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;generating-routes&#34;&gt;Generating Routes&lt;/h3&gt;
&lt;p&gt;The scenario-convert also offers the option &lt;code&gt;--generate-routes&lt;/code&gt;, which will generate
a route-file, given some additional information. For example purposes we will run the
command below. In case you generated the &lt;code&gt;steglitz scenario&lt;/code&gt; in one of the steps above already, please delete or rename the &lt;code&gt;steglitz&lt;/code&gt; directory and run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar scenario-convert.jar --osm2mosaic -i steglitz.osm --generate-routes
--route-begin-latlon 52.4551693,13.3193474 --route-end-latlon 52.4643101,13.3206834 --number-of-routes 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will calculate three routes between the two given coordinates.&lt;/p&gt;
&lt;p&gt;Alternatively you can use the following command in order to generate routes with node-id&amp;rsquo;s as start and end point, which can be found in the &lt;code&gt;steglitz.nod.xml&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar scenario-convert.jar --osm2mosaic -i steglitz.osm --generate-routes
--route-begin-node-id 267350668 --route-end-node-id 313139970 --number-of-routes 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See 





  
  

&lt;a href=&#34;#reference-documentation-for-scenario-convert&#34;&gt;below&lt;/a&gt; for all command line options.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This wraps up one of the main workflows with the scenario-convert-script.
A quick reminder on what we achieved:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cleaned up an OSM-file to only contain relevant data.&lt;/li&gt;
&lt;li&gt;Converted that OSM-file to formats that Eclipse MOSAIC/SUMO can handle.&lt;/li&gt;
&lt;li&gt;Created the project structure for a scenario.&lt;/li&gt;
&lt;li&gt;Calculated routes between two coordinates.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With all of this you can now start further developing your scenario. For a more detailed description on the next steps
please have a look at 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/scenario_configuration/&#34;&gt;Additional Scenario Configuration&lt;/a&gt; and






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/&#34;&gt;Application Development&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can now move your &lt;code&gt;steglitz&lt;/code&gt; directory to &lt;code&gt;/scenarios&lt;/code&gt; and test it by running
&lt;code&gt;./mosaic.sh -s steglitz&lt;/code&gt; on Linux or &lt;code&gt;.\mosaic.bat -s steglitz&lt;/code&gt; on Windows.&lt;/p&gt;
&lt;p&gt;While this is the &amp;lsquo;happy world&amp;rsquo; workflow, it is often necessary to manually adapt routes and
insert them into your scenario. The following workflow
will explain how that is done and you will also get a more detailed overview of the scenario-convert-functions.&lt;/p&gt;
&lt;h2 id=&#34;importing-routes-to-your-scenario&#34;&gt;Importing Routes to your scenario&lt;/h2&gt;
&lt;p&gt;As mentioned above your routes won&amp;rsquo;t always be created by the scenario-convert script. We generated some routes
for the steglitz-scenario using SUMO&amp;rsquo;s 




&lt;a href=&#34;http://sumo.dlr.de/wiki/DUAROUTER&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;duarouter&lt;/a&gt;, which you can find






  
  

    

    
    

    
    
      
        
          
            
            
            
          
        
      
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/files/steglitz.rou.xml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. We&amp;rsquo;ll start with only the &lt;code&gt;steglitz.osm&lt;/code&gt; and
&lt;code&gt;steglitz.rou.xml&lt;/code&gt; files:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;working-directory&amp;gt;
   ├─ steglitz.osm
   └─ steglitz.rou.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;creating-the-database&#34;&gt;Creating the database&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll start off by solely creating the database and applying OSMOSIS with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;java -jar scenario-convert.jar --osm2db -i steglitz.osm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The directory should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;working-directory&amp;gt;
   ├─ steglitz.db
   ├─ steglitz.osm
   ├─ steglitz.rou.xml
   └─ steglitz_cleaned.osm
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;importing-the-route-file&#34;&gt;Importing the route-file&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s import our routes into the database.&lt;br&gt;
We achieve this by calling:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -jar scenario-convert.jar --sumo2db -i steglitz.rou.xml -d .\steglitz.db
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now all new routes are imported into our database. The following image shows a visualization of one of
the created routes.&lt;/p&gt;















&lt;figure id=&#34;figure-visualization-of-one-of-the-routes&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/steglitz_route.png&#34; data-caption=&#34;Visualization of one of the routes&#34;&gt;


  &lt;img src=&#34;../images/steglitz_route.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Visualization of one of the routes
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;creating-the-scenario&#34;&gt;Creating the scenario&lt;/h3&gt;
&lt;p&gt;The final step is to create the scenario from the files we created so far.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -jar scenario-convert.jar --db2mosaic -d .\steglitz.db
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of copying our SUMO-files this will generate all necessary files and move them into a Eclipse MOSAIC-conform
folder structure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;working-directory&amp;gt;
   ├─ steglitz.osm
   └─ steglitz
      ├─ application
      |  └─ steglitz.db
      ├─ mapping
      |  └─ mapping_config.json
      ├─ sumo
      |  ├─ steglitz.net.xml
      |  └─ steglitz.sumocfg
      └─ scenario_config.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see the resulting folder structure looks just like the final output from the first workflow described.&lt;/p&gt;
&lt;h3 id=&#34;conclusion-1&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;You should now know how you can manually add routes to your scenario and have a deeper understanding of the way that
some of the script parameters work.&lt;/p&gt;
&lt;h3 id=&#34;attached-files&#34;&gt;Attached Files&lt;/h3&gt;
&lt;p&gt;A list of all attached files in this chapter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;





  
  

    

    
    

    
    
      
        
          
            
            
            
          
        
      
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/files/steglitz.osm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Steglitz OSM-file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;





  
  

    

    
    

    
    
      
        
          
            
            
            
          
        
      
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/files/steglitz.rou.xml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Steglitz Route-file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference-documentation-for-scenario-convert&#34;&gt;Reference documentation for scenario-convert&lt;/h2&gt;
&lt;h3 id=&#34;usage-of-scenario-convert&#34;&gt;Usage of scenario-convert&lt;/h3&gt;
&lt;p&gt;The following listing shows an overview for the usage of scenario-convert:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;usage: scenario-convert [OPERATION] [OPTIONS]

Examples:
1. Import an osm file and write data into database
   &amp;gt; scenario-convert --osm2db -i &amp;lt;OSMFILE&amp;gt; [-d &amp;lt;DATABASE&amp;gt;]
2. Export database content to SUMO-readable files
   &amp;gt; scenario-convert --db2sumo -d &amp;lt;DATABASE&amp;gt; [-s &amp;lt;SUMOPREFIX&amp;gt;]
3. Import a SUMO routefile into a database
   &amp;gt; scenario-convert --sumo2db -d &amp;lt;DATABASE&amp;gt; -i &amp;lt;ROUTEFILE&amp;gt;.rou.xml
4. Combine steps 1 and 2
   &amp;gt; scenario-convert --osm2sumo -d &amp;lt;DATABASE&amp;gt; -i &amp;lt;OSMFILE&amp;gt; [-s &amp;lt;SUMOPREFIX&amp;gt;]
5. Export db content to Shapefile format
   &amp;gt; scenario-convert --db2shp -d &amp;lt;DATABASE&amp;gt;
6. Import an srtm file and write elevation data to nodes of an existing database
   &amp;gt; scenario-convert --srtm2db -i &amp;lt;SRTMFILE&amp;gt; -d &amp;lt;DATABASE&amp;gt;
7. Create a complete MOSAIC scenario from an osm file
   &amp;gt; scenario-convert --osm2mosaic -i &amp;lt;OSMFILE&amp;gt;
8. Create a scenario database from an SUMO net file
   &amp;gt; scenario-convert --sumo2db -i &amp;lt;NETFILE&amp;gt;.net.xml
9. Calculate a route from node 123 to node 456
   &amp;gt; scenario-convert --generate-routes -d &amp;lt;DATABASE&amp;gt; --route-begin-node-id 123 --route-end-node-id 456

The following arguments are available:
 -h,--help                                 Prints this help screen.

 -c,--config-file &amp;lt;PATH&amp;gt;                   Optional, refers to a configuration file which contains all parameters in
                                           JSON format.
    --osm2db                               Converts a OpenStreetMap file to a new scenario database.
    --sumo2db                              Imports a SUMO Network/Routefile. Be aware that you may have to re-export an
                                           imported network.
    --srtm2db                              Imports an SRTM file and writes elevation data to nodes.
    --db2sumo                              Exports the network to SUMO node and edge files.
    --db2shp                               Exports the database into Shapefile format.
    --db2mosaic                            Creates directory structure for a MOSAIC scenario based on the database
                                           contents.
    --osm2sumo                             Combination of osm2db and db2sumo.
    --osm2mosaic                           Combination of osm2db and db2mosaic.
    --update                               Updates the database to the current scheme.

 -d,--database &amp;lt;PATH&amp;gt;                      The path to the database.
                                           For import: File to import to. If not given, a new file is created.
                                           For export: File to load from.
                                           For update operations: file to update.
 -i,--input &amp;lt;PATH&amp;gt;                         Defines an input file to use in an import. File type depends on the import
                                           operation (OSM File/Database file/SUMO net file/SUMO rou file).
 -s,--sumo-prefix &amp;lt;STRING&amp;gt;                 Prefix for the generated sumo files  (uses database name when not defined).
 -f,--force                                Force overwrite of existing files instead of incrementing file names.
 -m,--mapping-file &amp;lt;PATH&amp;gt;                  Uses the given mapping configuration to export existing vehicleTypes and
                                           vehicles data to *.rou.xml.
    --import-lat &amp;lt;DOUBLE&amp;gt;                  Center latitude of imported region to project coordinates.
    --import-lon &amp;lt;DOUBLE&amp;gt;                  Center longitude of imported region to project coordinates.
    --import-zone &amp;lt;STRING&amp;gt;                 UTM zone of location for projecting coords in default format (e.g. 32n).

 -g,--generate-routes                      Generates route(s) from one point to another. The begin and end for the route
                                           must be known (see below options).
    --route-begin-lat &amp;lt;DOUBLE&amp;gt;             Latitude of the starting point, needs --route-begin-lon as well.
    --route-begin-lon &amp;lt;DOUBLE&amp;gt;             Longitude of the starting point, needs --route-begin-lat as well.
    --route-begin-latlon &amp;lt;DOUBLE,DOUBLE&amp;gt;   [latitude],[longitude] of the starting point.
    --route-begin-node-id &amp;lt;STRING&amp;gt;         OSM node id of the starting point (use instead of lat/lon).
    --route-end-lat &amp;lt;DOUBLE&amp;gt;               Latitude of the starting point, needs --route-end-lon as well.
    --route-end-lon &amp;lt;DOUBLE&amp;gt;               Longitude of the starting point, needs --route-end-lat as well.
    --route-end-latlon &amp;lt;DOUBLE,DOUBLE&amp;gt;     [latitude],[longitude] of the ending point.
    --route-end-node-id &amp;lt;STRING&amp;gt;           OSM node id of the ending point (use instead of lat/lon).
    --route-matrix &amp;lt;STRING,STRING,...&amp;gt;     Calculates all possible routes starting and ending at the given nodes, given
                                           as comma-separated list (e.g. 12345,87123,89123)
    --number-of-routes &amp;lt;INTEGER&amp;gt;           Defines the number of alternative routes to be calculated (default=1).

    --import-buildings                     Activates import of building information (only with osm2xxx).
    --skip-osm-filter                      Skips automatic filtering of the OSM file (only with osm2xxx).
    --skip-turn-restrictions               Ignore all defined turn restrictions on OSM import.
    --skip-graph-cleanup                   Turns off the removal of unconnected parts from the main traffic network
                                           graph . Since several components of MOSAIC require one main graph without
                                           disconnected ways and nodes, this option should be used only if the cleanup
                                           procedure is faulty.
    --skip-netconvert                      Skips starting sumo netconvert for creating netfile (only with xxx2sumo).
    --skip-traffic-lights-export           Skips exporting traffic light information for nodes (only with xxx2sumo).
    --osm-speeds-file &amp;lt;PATH&amp;gt;               Define a property file which contains speed information which are used to set
                                           the speed for OSM ways without a max speed tag (only with osm2xxx).
    --osm-speeds-overwrite                 If set to true , the maxspeed tags of ways are ignored and replaced by either
                                           default values , or by speed information defined via the --osm-speeds-file
                                           option (only with osm2xxx).

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;configuration-files-for-scenario-convert&#34;&gt;Configuration-files for scenario-convert&lt;/h3&gt;
&lt;p&gt;Scenario-convert offers a way to safe your conversion-parameters in a &lt;code&gt;JSON&lt;/code&gt; configuration file using
the option &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--config-file&lt;/code&gt;.&lt;br&gt;
The following listing shows how to save the options used in the example above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;#34;operatingMode&amp;#34;: &amp;#34;osm2mosaic&amp;#34;,
  &amp;#34;inputFile&amp;#34;: &amp;#34;steglitz.osm&amp;#34;,
  &amp;#34;executeOsmosis&amp;#34;: true,
  &amp;#34;generateRoutes&amp;#34;: true,
  &amp;#34;routeBeginLatLon&amp;#34;: &amp;#34;52.457616,13.318392&amp;#34;,
  &amp;#34;routeEndLatLon&amp;#34;: &amp;#34;52.454774,13.333554&amp;#34;,
  &amp;#34;numberOfRoutes&amp;#34;: 3
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;speed-files&#34;&gt;Speed-files&lt;/h3&gt;
&lt;p&gt;Below you can find a properties file which can be used during the import of OSM data
in order to define speeds for ways, which do not have a maxspeeds-tag defined. For this purpose use the
option &lt;code&gt;--osm-speeds-file &amp;lt;FILE&amp;gt;&lt;/code&gt;. In the speed properties file, for each way type a speed value can
be defined, according to the OSM 




&lt;a href=&#34;http://wiki.openstreetmap.org/wiki/Key:highway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;highway&lt;/code&gt;&lt;/a&gt; key.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# the unit the speed values are defined in [kmh, ms]
speed.unit = kmh

# the default speed for all way types which are not defined here
speed.default = 30
        
# autobahn
highway.motorway = 130
highway.motorway_link = 70

# bundesstrasse (germany)
highway.trunk = 70
highway.trunk_link = 65

# linking bigger town
highway.primary = 65
highway.primary_link = 60

# linking towns &amp;#43; villages
highway.secondary = 60
highway.secondary_link = 50

#streets without middle line separation
highway.tertiary = 50
highway.tertiary_link = 40
highway.residential = 30

#special roads
highway.living_street = 5
highway.service = 20

# unclassified roads
highway.unclassified = 30
highway.road = 20

# forest tracks
highway.track 15
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Event Scheduling</title>
      <link>https://www.eclipse.dev/mosaic/docs/develop_applications/event_scheduling/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/develop_applications/event_scheduling/</guid>
      <description>&lt;p&gt;Applications are implemented by reacting to specific events. Those events are, amongst others:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The simulation has started: All static units (e.g. road side units) are set up (&lt;code&gt;onStartup()&lt;/code&gt; is called)&lt;/li&gt;
&lt;li&gt;Once a vehicle has been added to the simulation, all its configured applications are initialized (&lt;code&gt;onStartup()&lt;/code&gt; is called)&lt;/li&gt;
&lt;li&gt;The data of the vehicle has changed, e.g. after the traffic simulator has finished one simulationstep (&lt;code&gt;onVehicleUpdated()&lt;/code&gt; is called).&lt;/li&gt;
&lt;li&gt;A unit has received a V2X message from another entity (&lt;code&gt;onMessageReceived&lt;/code&gt; is called).&lt;/li&gt;
&lt;li&gt;A unit which has send a V2X message via a ITS-G5 topocast receives an acknowledgement (&lt;code&gt;onAcknowledgementReceived()&lt;/code&gt; is called).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another example:&lt;/p&gt;



&lt;div class=&#34;svg-wrap mt-1 mb-4&#34;&gt;
  &lt;div class=&#34;inner&#34;&gt;
    &lt;svg aria-labelledby=&#34;chart-title-mermaid-1666691301138 chart-desc-mermaid-1666691301138&#34; role=&#34;img&#34; viewBox=&#34;-50 -10 903 875&#34; style=&#34;max-width: 903px; background-color: white;&#34; xmlns:xlink=&#34;http://www.w3.org/1999/xlink&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;100%&#34; id=&#34;mermaid-1666691301138&#34;&gt;&lt;title id=&#34;chart-title-mermaid-1666691301138&#34;/&gt;&lt;desc id=&#34;chart-desc-mermaid-1666691301138&#34;/&gt;&lt;style&gt;#mermaid-1666691301138 {font-family:&#34;trebuchet ms&#34;,verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-1666691301138 .error-icon{fill:#552222;}#mermaid-1666691301138 .error-text{fill:#552222;stroke:#552222;}#mermaid-1666691301138 .edge-thickness-normal{stroke-width:2px;}#mermaid-1666691301138 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1666691301138 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1666691301138 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1666691301138 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1666691301138 .marker{fill:#333333;stroke:#333333;}#mermaid-1666691301138 .marker.cross{stroke:#333333;}#mermaid-1666691301138 svg{font-family:&#34;trebuchet ms&#34;,verdana,arial,sans-serif;font-size:16px;}#mermaid-1666691301138 .actor{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1666691301138 text.actor&amp;gt;tspan{fill:black;stroke:none;}#mermaid-1666691301138 .actor-line{stroke:grey;}#mermaid-1666691301138 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#333;}#mermaid-1666691301138 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#333;}#mermaid-1666691301138 #arrowhead path{fill:#333;stroke:#333;}#mermaid-1666691301138 .sequenceNumber{fill:white;}#mermaid-1666691301138 #sequencenumber{fill:#333;}#mermaid-1666691301138 #crosshead path{fill:#333;stroke:#333;}#mermaid-1666691301138 .messageText{fill:#333;stroke:none;}#mermaid-1666691301138 .labelBox{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1666691301138 .labelText,#mermaid-1666691301138 .labelText&amp;gt;tspan{fill:black;stroke:none;}#mermaid-1666691301138 .loopText,#mermaid-1666691301138 .loopText&amp;gt;tspan{fill:black;stroke:none;}#mermaid-1666691301138 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);}#mermaid-1666691301138 .note{stroke:#aaaa33;fill:#fff5ad;}#mermaid-1666691301138 .noteText,#mermaid-1666691301138 .noteText&amp;gt;tspan{fill:black;stroke:none;}#mermaid-1666691301138 .activation0{fill:#f4f4f4;stroke:#666;}#mermaid-1666691301138 .activation1{fill:#f4f4f4;stroke:#666;}#mermaid-1666691301138 .activation2{fill:#f4f4f4;stroke:#666;}#mermaid-1666691301138 .actorPopupMenu{position:absolute;}#mermaid-1666691301138 .actorPopupMenuPanel{position:absolute;fill:#ECECFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-1666691301138 .actor-man line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;}#mermaid-1666691301138 .actor-man circle,#mermaid-1666691301138 line{stroke:hsl(259.6261682243, 59.7765363128%, 87.9019607843%);fill:#ECECFF;stroke-width:2px;}#mermaid-1666691301138 :root{--mermaid-font-family:&#34;trebuchet ms&#34;,verdana,arial,sans-serif;}&lt;/style&gt;&lt;g/&gt;&lt;defs&gt;&lt;symbol height=&#34;24&#34; width=&#34;24&#34; id=&#34;computer&#34;&gt;&lt;path d=&#34;M2 2v13h20v-13h-20zm18 11h-16v-9h16v9zm-10.228 6l.466-1h3.524l.467 1h-4.457zm14.228 3h-24l2-6h2.104l-1.33 4h18.45l-1.297-4h2.073l2 6zm-5-10h-14v-7h14v7z&#34; transform=&#34;scale(.5)&#34;/&gt;&lt;/symbol&gt;&lt;/defs&gt;&lt;defs&gt;&lt;symbol clip-rule=&#34;evenodd&#34; fill-rule=&#34;evenodd&#34; id=&#34;database&#34;&gt;&lt;path d=&#34;M12.258.001l.256.004.255.005.253.008.251.01.249.012.247.015.246.016.242.019.241.02.239.023.236.024.233.027.231.028.229.031.225.032.223.034.22.036.217.038.214.04.211.041.208.043.205.045.201.046.198.048.194.05.191.051.187.053.183.054.18.056.175.057.172.059.168.06.163.061.16.063.155.064.15.066.074.033.073.033.071.034.07.034.069.035.068.035.067.035.066.035.064.036.064.036.062.036.06.036.06.037.058.037.058.037.055.038.055.038.053.038.052.038.051.039.05.039.048.039.047.039.045.04.044.04.043.04.041.04.04.041.039.041.037.041.036.041.034.041.033.042.032.042.03.042.029.042.027.042.026.043.024.043.023.043.021.043.02.043.018.044.017.043.015.044.013.044.012.044.011.045.009.044.007.045.006.045.004.045.002.045.001.045v17l-.001.045-.002.045-.004.045-.006.045-.007.045-.009.044-.011.045-.012.044-.013.044-.015.044-.017.043-.018.044-.02.043-.021.043-.023.043-.024.043-.026.043-.027.042-.029.042-.03.042-.032.042-.033.042-.034.041-.036.041-.037.041-.039.041-.04.041-.041.04-.043.04-.044.04-.045.04-.047.039-.048.039-.05.039-.051.039-.052.038-.053.038-.055.038-.055.038-.058.037-.058.037-.06.037-.06.036-.062.036-.064.036-.064.036-.066.035-.067.035-.068.035-.069.035-.07.034-.071.034-.073.033-.074.033-.15.066-.155.064-.16.063-.163.061-.168.06-.172.059-.175.057-.18.056-.183.054-.187.053-.191.051-.194.05-.198.048-.201.046-.205.045-.208.043-.211.041-.214.04-.217.038-.22.036-.223.034-.225.032-.229.031-.231.028-.233.027-.236.024-.239.023-.241.02-.242.019-.246.016-.247.015-.249.012-.251.01-.253.008-.255.005-.256.004-.258.001-.258-.001-.256-.004-.255-.005-.253-.008-.251-.01-.249-.012-.247-.015-.245-.016-.243-.019-.241-.02-.238-.023-.236-.024-.234-.027-.231-.028-.228-.031-.226-.032-.223-.034-.22-.036-.217-.038-.214-.04-.211-.041-.208-.043-.204-.045-.201-.046-.198-.048-.195-.05-.19-.051-.187-.053-.184-.054-.179-.056-.176-.057-.172-.059-.167-.06-.164-.061-.159-.063-.155-.064-.151-.066-.074-.033-.072-.033-.072-.034-.07-.034-.069-.035-.068-.035-.067-.035-.066-.035-.064-.036-.063-.036-.062-.036-.061-.036-.06-.037-.058-.037-.057-.037-.056-.038-.055-.038-.053-.038-.052-.038-.051-.039-.049-.039-.049-.039-.046-.039-.046-.04-.044-.04-.043-.04-.041-.04-.04-.041-.039-.041-.037-.041-.036-.041-.034-.041-.033-.042-.032-.042-.03-.042-.029-.042-.027-.042-.026-.043-.024-.043-.023-.043-.021-.043-.02-.043-.018-.044-.017-.043-.015-.044-.013-.044-.012-.044-.011-.045-.009-.044-.007-.045-.006-.045-.004-.045-.002-.045-.001-.045v-17l.001-.045.002-.045.004-.045.006-.045.007-.045.009-.044.011-.045.012-.044.013-.044.015-.044.017-.043.018-.044.02-.043.021-.043.023-.043.024-.043.026-.043.027-.042.029-.042.03-.042.032-.042.033-.042.034-.041.036-.041.037-.041.039-.041.04-.041.041-.04.043-.04.044-.04.046-.04.046-.039.049-.039.049-.039.051-.039.052-.038.053-.038.055-.038.056-.038.057-.037.058-.037.06-.037.061-.036.062-.036.063-.036.064-.036.066-.035.067-.035.068-.035.069-.035.07-.034.072-.034.072-.033.074-.033.151-.066.155-.064.159-.063.164-.061.167-.06.172-.059.176-.057.179-.056.184-.054.187-.053.19-.051.195-.05.198-.048.201-.046.204-.045.208-.043.211-.041.214-.04.217-.038.22-.036.223-.034.226-.032.228-.031.231-.028.234-.027.236-.024.238-.023.241-.02.243-.019.245-.016.247-.015.249-.012.251-.01.253-.008.255-.005.256-.004.258-.001.258.001zm-9.258 20.499v.01l.001.021.003.021.004.022.005.021.006.022.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.023.018.024.019.024.021.024.022.025.023.024.024.025.052.049.056.05.061.051.066.051.07.051.075.051.079.052.084.052.088.052.092.052.097.052.102.051.105.052.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.048.144.049.147.047.152.047.155.047.16.045.163.045.167.043.171.043.176.041.178.041.183.039.187.039.19.037.194.035.197.035.202.033.204.031.209.03.212.029.216.027.219.025.222.024.226.021.23.02.233.018.236.016.24.015.243.012.246.01.249.008.253.005.256.004.259.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.021.224-.024.22-.026.216-.027.212-.028.21-.031.205-.031.202-.034.198-.034.194-.036.191-.037.187-.039.183-.04.179-.04.175-.042.172-.043.168-.044.163-.045.16-.046.155-.046.152-.047.148-.048.143-.049.139-.049.136-.05.131-.05.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.053.083-.051.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.05.023-.024.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.023.01-.022.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.127l-.077.055-.08.053-.083.054-.085.053-.087.052-.09.052-.093.051-.095.05-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.045-.118.044-.12.043-.122.042-.124.042-.126.041-.128.04-.13.04-.132.038-.134.038-.135.037-.138.037-.139.035-.142.035-.143.034-.144.033-.147.032-.148.031-.15.03-.151.03-.153.029-.154.027-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.01-.179.008-.179.008-.181.006-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.006-.179-.008-.179-.008-.178-.01-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.027-.153-.029-.151-.03-.15-.03-.148-.031-.146-.032-.145-.033-.143-.034-.141-.035-.14-.035-.137-.037-.136-.037-.134-.038-.132-.038-.13-.04-.128-.04-.126-.041-.124-.042-.122-.042-.12-.044-.117-.043-.116-.045-.113-.045-.112-.046-.109-.047-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.05-.093-.052-.09-.051-.087-.052-.085-.053-.083-.054-.08-.054-.077-.054v4.127zm0-5.654v.011l.001.021.003.021.004.021.005.022.006.022.007.022.009.022.01.022.011.023.012.023.013.023.015.024.016.023.017.024.018.024.019.024.021.024.022.024.023.025.024.024.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.052.11.051.114.051.119.052.123.05.127.051.131.05.135.049.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.044.171.042.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.022.23.02.233.018.236.016.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.012.241-.015.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.048.139-.05.136-.049.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.051.051-.049.023-.025.023-.024.021-.025.02-.024.019-.024.018-.024.017-.024.015-.023.014-.023.013-.024.012-.022.01-.023.01-.023.008-.022.006-.022.006-.022.004-.021.004-.022.001-.021.001-.021v-4.139l-.077.054-.08.054-.083.054-.085.052-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.044-.118.044-.12.044-.122.042-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.035-.143.033-.144.033-.147.033-.148.031-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.009-.179.009-.179.007-.181.007-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.007-.179-.007-.179-.009-.178-.009-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.031-.146-.033-.145-.033-.143-.033-.141-.035-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.04-.126-.041-.124-.042-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.051-.093-.051-.09-.051-.087-.053-.085-.052-.083-.054-.08-.054-.077-.054v4.139zm0-5.666v.011l.001.02.003.022.004.021.005.022.006.021.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.024.018.023.019.024.021.025.022.024.023.024.024.025.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.051.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.043.171.043.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.021.23.02.233.018.236.017.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.013.241-.014.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.049.139-.049.136-.049.131-.051.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.049.023-.025.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.022.01-.023.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.153l-.077.054-.08.054-.083.053-.085.053-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.048-.105.048-.106.048-.109.046-.111.046-.114.046-.115.044-.118.044-.12.043-.122.043-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.034-.143.034-.144.033-.147.032-.148.032-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.024-.161.024-.162.023-.163.023-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.01-.178.01-.179.009-.179.007-.181.006-.182.006-.182.004-.184.003-.184.001-.185.001-.185-.001-.184-.001-.184-.003-.182-.004-.182-.006-.181-.006-.179-.007-.179-.009-.178-.01-.176-.01-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.023-.162-.023-.161-.024-.159-.024-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.032-.146-.032-.145-.033-.143-.034-.141-.034-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.041-.126-.041-.124-.041-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.048-.105-.048-.102-.048-.1-.05-.097-.049-.095-.051-.093-.051-.09-.052-.087-.052-.085-.053-.083-.053-.08-.054-.077-.054v4.153zm8.74-8.179l-.257.004-.254.005-.25.008-.247.011-.244.012-.241.014-.237.016-.233.018-.231.021-.226.022-.224.023-.22.026-.216.027-.212.028-.21.031-.205.032-.202.033-.198.034-.194.036-.191.038-.187.038-.183.04-.179.041-.175.042-.172.043-.168.043-.163.045-.16.046-.155.046-.152.048-.148.048-.143.048-.139.049-.136.05-.131.05-.126.051-.123.051-.118.051-.114.052-.11.052-.106.052-.101.052-.096.052-.092.052-.088.052-.083.052-.079.052-.074.051-.07.052-.065.051-.06.05-.056.05-.051.05-.023.025-.023.024-.021.024-.02.025-.019.024-.018.024-.017.023-.015.024-.014.023-.013.023-.012.023-.01.023-.01.022-.008.022-.006.023-.006.021-.004.022-.004.021-.001.021-.001.021.001.021.001.021.004.021.004.022.006.021.006.023.008.022.01.022.01.023.012.023.013.023.014.023.015.024.017.023.018.024.019.024.02.025.021.024.023.024.023.025.051.05.056.05.06.05.065.051.07.052.074.051.079.052.083.052.088.052.092.052.096.052.101.052.106.052.11.052.114.052.118.051.123.051.126.051.131.05.136.05.139.049.143.048.148.048.152.048.155.046.16.046.163.045.168.043.172.043.175.042.179.041.183.04.187.038.191.038.194.036.198.034.202.033.205.032.21.031.212.028.216.027.22.026.224.023.226.022.231.021.233.018.237.016.241.014.244.012.247.011.25.008.254.005.257.004.26.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.022.224-.023.22-.026.216-.027.212-.028.21-.031.205-.032.202-.033.198-.034.194-.036.191-.038.187-.038.183-.04.179-.041.175-.042.172-.043.168-.043.163-.045.16-.046.155-.046.152-.048.148-.048.143-.048.139-.049.136-.05.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.05.051-.05.023-.025.023-.024.021-.024.02-.025.019-.024.018-.024.017-.023.015-.024.014-.023.013-.023.012-.023.01-.023.01-.022.008-.022.006-.023.006-.021.004-.022.004-.021.001-.021.001-.021-.001-.021-.001-.021-.004-.021-.004-.022-.006-.021-.006-.023-.008-.022-.01-.022-.01-.023-.012-.023-.013-.023-.014-.023-.015-.024-.017-.023-.018-.024-.019-.024-.02-.025-.021-.024-.023-.024-.023-.025-.051-.05-.056-.05-.06-.05-.065-.051-.07-.052-.074-.051-.079-.052-.083-.052-.088-.052-.092-.052-.096-.052-.101-.052-.106-.052-.11-.052-.114-.052-.118-.051-.123-.051-.126-.051-.131-.05-.136-.05-.139-.049-.143-.048-.148-.048-.152-.048-.155-.046-.16-.046-.163-.045-.168-.043-.172-.043-.175-.042-.179-.041-.183-.04-.187-.038-.191-.038-.194-.036-.198-.034-.202-.033-.205-.032-.21-.031-.212-.028-.216-.027-.22-.026-.224-.023-.226-.022-.231-.021-.233-.018-.237-.016-.241-.014-.244-.012-.247-.011-.25-.008-.254-.005-.257-.004-.26-.001-.26.001z&#34; transform=&#34;scale(.5)&#34;/&gt;&lt;/symbol&gt;&lt;/defs&gt;&lt;defs&gt;&lt;symbol height=&#34;24&#34; width=&#34;24&#34; id=&#34;clock&#34;&gt;&lt;path d=&#34;M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm5.848 12.459c.202.038.202.333.001.372-1.907.361-6.045 1.111-6.547 1.111-.719 0-1.301-.582-1.301-1.301 0-.512.77-5.447 1.125-7.445.034-.192.312-.181.343.014l.985 6.238 5.394 1.011z&#34; transform=&#34;scale(.5)&#34;/&gt;&lt;/symbol&gt;&lt;/defs&gt;&lt;g&gt;&lt;line stroke=&#34;#999&#34; stroke-width=&#34;0.5px&#34; class=&#34;200&#34; y2=&#34;809&#34; x2=&#34;75&#34; y1=&#34;5&#34; x1=&#34;75&#34; id=&#34;actor0&#34;/&gt;&lt;g id=&#34;root-0&#34;&gt;&lt;rect class=&#34;actor&#34; ry=&#34;3&#34; rx=&#34;3&#34; height=&#34;65&#34; width=&#34;150&#34; stroke=&#34;#666&#34; fill=&#34;#eaeaea&#34; y=&#34;0&#34; x=&#34;0&#34;/&gt;&lt;text style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400;&#34; class=&#34;actor&#34; alignment-baseline=&#34;central&#34; dominant-baseline=&#34;central&#34; y=&#34;32.5&#34; x=&#34;75&#34;&gt;&lt;tspan dy=&#34;0&#34; x=&#34;75&#34;&gt;RTI&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g&gt;&lt;line stroke=&#34;#999&#34; stroke-width=&#34;0.5px&#34; class=&#34;200&#34; y2=&#34;809&#34; x2=&#34;316&#34; y1=&#34;5&#34; x1=&#34;316&#34; id=&#34;actor1&#34;/&gt;&lt;g id=&#34;root-1&#34;&gt;&lt;rect class=&#34;actor&#34; ry=&#34;3&#34; rx=&#34;3&#34; height=&#34;65&#34; width=&#34;150&#34; stroke=&#34;#666&#34; fill=&#34;#eaeaea&#34; y=&#34;0&#34; x=&#34;241&#34;/&gt;&lt;text style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400;&#34; class=&#34;actor&#34; alignment-baseline=&#34;central&#34; dominant-baseline=&#34;central&#34; y=&#34;32.5&#34; x=&#34;316&#34;&gt;&lt;tspan dy=&#34;0&#34; x=&#34;316&#34;&gt;ApplicationSimulator&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g&gt;&lt;line stroke=&#34;#999&#34; stroke-width=&#34;0.5px&#34; class=&#34;200&#34; y2=&#34;809&#34; x2=&#34;528&#34; y1=&#34;5&#34; x1=&#34;528&#34; id=&#34;actor2&#34;/&gt;&lt;g id=&#34;root-2&#34;&gt;&lt;rect class=&#34;actor&#34; ry=&#34;3&#34; rx=&#34;3&#34; height=&#34;65&#34; width=&#34;150&#34; stroke=&#34;#666&#34; fill=&#34;#eaeaea&#34; y=&#34;0&#34; x=&#34;453&#34;/&gt;&lt;text style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400;&#34; class=&#34;actor&#34; alignment-baseline=&#34;central&#34; dominant-baseline=&#34;central&#34; y=&#34;32.5&#34; x=&#34;528&#34;&gt;&lt;tspan dy=&#34;0&#34; x=&#34;528&#34;&gt;Application1&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;g&gt;&lt;line stroke=&#34;#999&#34; stroke-width=&#34;0.5px&#34; class=&#34;200&#34; y2=&#34;809&#34; x2=&#34;728&#34; y1=&#34;5&#34; x1=&#34;728&#34; id=&#34;actor3&#34;/&gt;&lt;g id=&#34;root-3&#34;&gt;&lt;rect class=&#34;actor&#34; ry=&#34;3&#34; rx=&#34;3&#34; height=&#34;65&#34; width=&#34;150&#34; stroke=&#34;#666&#34; fill=&#34;#eaeaea&#34; y=&#34;0&#34; x=&#34;653&#34;/&gt;&lt;text style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400;&#34; class=&#34;actor&#34; alignment-baseline=&#34;central&#34; dominant-baseline=&#34;central&#34; y=&#34;32.5&#34; x=&#34;728&#34;&gt;&lt;tspan dy=&#34;0&#34; x=&#34;728&#34;&gt;Application2&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;12&#34; markerWidth=&#34;12&#34; markerUnits=&#34;userSpaceOnUse&#34; refY=&#34;5&#34; refX=&#34;9&#34; id=&#34;arrowhead&#34;&gt;&lt;path d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;defs&gt;&lt;marker refY=&#34;4&#34; refX=&#34;16&#34; orient=&#34;auto&#34; markerHeight=&#34;8&#34; markerWidth=&#34;15&#34; id=&#34;crosshead&#34;&gt;&lt;path style=&#34;stroke-dasharray: 0, 0;&#34; d=&#34;M 9,2 V 6 L16,4 Z&#34; stroke-width=&#34;1px&#34; stroke=&#34;#000000&#34; fill=&#34;black&#34;/&gt;&lt;path style=&#34;stroke-dasharray: 0, 0;&#34; d=&#34;M 0,1 L 6,7 M 6,1 L 0,7&#34; stroke-width=&#34;1px&#34; stroke=&#34;#000000&#34; fill=&#34;none&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;28&#34; markerWidth=&#34;20&#34; refY=&#34;7&#34; refX=&#34;18&#34; id=&#34;filled-head&#34;&gt;&lt;path d=&#34;M 18,7 L9,13 L14,7 L9,1 Z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;40&#34; markerWidth=&#34;60&#34; refY=&#34;15&#34; refX=&#34;15&#34; id=&#34;sequencenumber&#34;&gt;&lt;circle r=&#34;6&#34; cy=&#34;15&#34; cx=&#34;15&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;g/&gt;&lt;g/&gt;&lt;g&gt;&lt;rect class=&#34;activation0&#34; ry=&#34;0&#34; rx=&#34;0&#34; height=&#34;570&#34; width=&#34;10&#34; stroke=&#34;#666&#34; fill=&#34;#EDF2AE&#34; y=&#34;155&#34; x=&#34;523&#34;/&gt;&lt;/g&gt;&lt;g&gt;&lt;rect class=&#34;activation0&#34; ry=&#34;0&#34; rx=&#34;0&#34; height=&#34;570&#34; width=&#34;10&#34; stroke=&#34;#666&#34; fill=&#34;#EDF2AE&#34; y=&#34;199&#34; x=&#34;723&#34;/&gt;&lt;/g&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;80&#34; x=&#34;196&#34;&gt;VehicleRegistration&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;109&#34; x2=&#34;311&#34; y1=&#34;109&#34; x1=&#34;80&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;124&#34; x=&#34;425&#34;&gt;onStartup()&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;153&#34; x2=&#34;528&#34; y1=&#34;153&#34; x1=&#34;321&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;168&#34; x=&#34;525&#34;&gt;onStartup()&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;197&#34; x2=&#34;728&#34; y1=&#34;197&#34; x1=&#34;321&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;212&#34; x=&#34;196&#34;&gt;VehicleUpdates&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;241&#34; x2=&#34;311&#34; y1=&#34;241&#34; x1=&#34;80&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;256&#34; x=&#34;422&#34;&gt;onVehicleUpdated()&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;285&#34; x2=&#34;523&#34; y1=&#34;285&#34; x1=&#34;321&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;300&#34; x=&#34;522&#34;&gt;onVehicleUpdated()&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;329&#34; x2=&#34;723&#34; y1=&#34;329&#34; x1=&#34;321&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;344&#34; x=&#34;196&#34;&gt;VehicleUpdates&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;373&#34; x2=&#34;311&#34; y1=&#34;373&#34; x1=&#34;80&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;388&#34; x=&#34;422&#34;&gt;onVehicleUpdated()&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;417&#34; x2=&#34;523&#34; y1=&#34;417&#34; x1=&#34;321&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;432&#34; x=&#34;522&#34;&gt;onVehicleUpdated()&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;461&#34; x2=&#34;723&#34; y1=&#34;461&#34; x1=&#34;321&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;476&#34; x=&#34;522&#34;&gt;sendV2xMessage()&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;505&#34; x2=&#34;321&#34; y1=&#34;505&#34; x1=&#34;723&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;520&#34; x=&#34;196&#34;&gt;V2xMessageTransmission&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;549&#34; x2=&#34;80&#34; y1=&#34;549&#34; x1=&#34;311&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;564&#34; x=&#34;196&#34;&gt;V2xMessageReceiption&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;593&#34; x2=&#34;311&#34; y1=&#34;593&#34; x1=&#34;80&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;608&#34; x=&#34;422&#34;&gt;onMessageReceived()&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;637&#34; x2=&#34;523&#34; y1=&#34;637&#34; x1=&#34;321&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;652&#34; x=&#34;196&#34;&gt;VehicleUpdates (remove)&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;681&#34; x2=&#34;311&#34; y1=&#34;681&#34; x1=&#34;80&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;696&#34; x=&#34;422&#34;&gt;onShutdown()&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;725&#34; x2=&#34;523&#34; y1=&#34;725&#34; x1=&#34;321&#34;/&gt;&lt;text style=&#34;font-size: 16px; font-weight: 400;&#34; dy=&#34;1em&#34; class=&#34;messageText&#34; alignment-baseline=&#34;middle&#34; dominant-baseline=&#34;middle&#34; text-anchor=&#34;middle&#34; y=&#34;740&#34; x=&#34;522&#34;&gt;onShutdown()&lt;/text&gt;&lt;line style=&#34;fill: none;&#34; marker-end=&#34;url(#arrowhead)&#34; stroke=&#34;none&#34; stroke-width=&#34;2&#34; class=&#34;messageLine0&#34; y2=&#34;769&#34; x2=&#34;723&#34; y1=&#34;769&#34; x1=&#34;321&#34;/&gt;&lt;g&gt;&lt;rect class=&#34;actor&#34; ry=&#34;3&#34; rx=&#34;3&#34; height=&#34;65&#34; width=&#34;150&#34; stroke=&#34;#666&#34; fill=&#34;#eaeaea&#34; y=&#34;789&#34; x=&#34;0&#34;/&gt;&lt;text style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400;&#34; class=&#34;actor&#34; alignment-baseline=&#34;central&#34; dominant-baseline=&#34;central&#34; y=&#34;821.5&#34; x=&#34;75&#34;&gt;&lt;tspan dy=&#34;0&#34; x=&#34;75&#34;&gt;RTI&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;rect class=&#34;actor&#34; ry=&#34;3&#34; rx=&#34;3&#34; height=&#34;65&#34; width=&#34;150&#34; stroke=&#34;#666&#34; fill=&#34;#eaeaea&#34; y=&#34;789&#34; x=&#34;241&#34;/&gt;&lt;text style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400;&#34; class=&#34;actor&#34; alignment-baseline=&#34;central&#34; dominant-baseline=&#34;central&#34; y=&#34;821.5&#34; x=&#34;316&#34;&gt;&lt;tspan dy=&#34;0&#34; x=&#34;316&#34;&gt;ApplicationSimulator&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;rect class=&#34;actor&#34; ry=&#34;3&#34; rx=&#34;3&#34; height=&#34;65&#34; width=&#34;150&#34; stroke=&#34;#666&#34; fill=&#34;#eaeaea&#34; y=&#34;789&#34; x=&#34;453&#34;/&gt;&lt;text style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400;&#34; class=&#34;actor&#34; alignment-baseline=&#34;central&#34; dominant-baseline=&#34;central&#34; y=&#34;821.5&#34; x=&#34;528&#34;&gt;&lt;tspan dy=&#34;0&#34; x=&#34;528&#34;&gt;Application1&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;g&gt;&lt;rect class=&#34;actor&#34; ry=&#34;3&#34; rx=&#34;3&#34; height=&#34;65&#34; width=&#34;150&#34; stroke=&#34;#666&#34; fill=&#34;#eaeaea&#34; y=&#34;789&#34; x=&#34;653&#34;/&gt;&lt;text style=&#34;text-anchor: middle; font-size: 14px; font-weight: 400;&#34; class=&#34;actor&#34; alignment-baseline=&#34;central&#34; dominant-baseline=&#34;central&#34; y=&#34;821.5&#34; x=&#34;728&#34;&gt;&lt;tspan dy=&#34;0&#34; x=&#34;728&#34;&gt;Application2&lt;/tspan&gt;&lt;/text&gt;&lt;/g&gt;&lt;/svg&gt;
  &lt;/div&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Example sequence of onStartup, onUpdate, onMessageReceived and onShutdown of two applications.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;onStartup()&lt;/code&gt; method, which enables the ITS-G5 communication module of the unit, could be implemented the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
public void onStartup() { 
    getOs().getAdHocModule().enable(new AdHocModuleConfiguration()
            .addRadio().channel(AdHocChannel.CCH).power(50).create()
    );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A &lt;code&gt;onMessageReceived()&lt;/code&gt; method, which reacts upon a &lt;strong&gt;DENM&lt;/strong&gt; message, could be implemented as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
public void onMessageReceived(ReceivedV2xMessage receivedV2xMessage) {
    final V2xMessage msg = receivedV2xMessage.getMessage();

    if (msg instanceof Denm) {        
        Denm denm = (Denm)msg;
        GeoPoint eventLocation = denm.getEventLocation();
        //TODO you can add further implementation here
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;trigger-own-events&#34;&gt;Trigger Own Events&lt;/h2&gt;
&lt;p&gt;It is possible to trigger own events at specific times within the application. For this purpose, the application has access to an own event manager. Each event requires a
simulation timestamp when it should be called, and an event processor.&lt;/p&gt;
&lt;p&gt;The following code triggers an event in 10 seconds after the application has been initialied:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
public void onStartup() {
    Event event = new Event(getOs().getSimulationTime() + 10 * TIME.SECOND, this);
    getOs().getEventManager().addEvent(event);
}

@Override
public void processEvent(Event event) {
    getLog().info(&amp;quot;Event has been triggered&amp;quot;);
    // TODO
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To address a specific method to process the event, Java lambda expressions could be used:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
public void onStartup() {
    Event event = new Event(getOs().getSimulationTime() + 10 * TIME.SECOND, this::mySpecificMethod);
    getOs().getEventManager().addEvent(event);
}

public void mySpecificMethod(Event event) {
    getLog().info(&amp;quot;Event has been triggered&amp;quot;);
    // TODO
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Run a simulation with Eclipse MOSAIC</title>
      <link>https://www.eclipse.dev/mosaic/docs/getting_started/run_mosaic/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/getting_started/run_mosaic/</guid>
      <description>&lt;p&gt;To run a single simulation via Command Line Interface (CLI), call the Eclipse MOSAIC start script with the
following command line arguments.&lt;/p&gt;
&lt;h3 id=&#34;gnulinux&#34;&gt;GNU/Linux&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./mosaic.sh -s &amp;lt;scenario-name&amp;gt;
./mosaic.sh -c ./scenarios/&amp;lt;scenario_name&amp;gt;/scenario_config.json
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;mosaic.bat -s &amp;lt;scenario-name&amp;gt;
mosaic.bat -c .\scenarios\&amp;lt;scenario_name&amp;gt;\scenario_config.json
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;p&gt;The following call starts the example scenario &amp;ldquo;Barnim&amp;rdquo; in Eclipse MOSAIC on a Windows machine and opens a






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/visualization/&#34;&gt;Visualization in your browser&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-dos&#34;&gt;mosaic.bat -s Barnim -v
&lt;/code&gt;&lt;/pre&gt;















&lt;figure id=&#34;figure-running-the-pre-bundled-example-scenario-barnim-with-eclipse-mosaic&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/mosaic-barnim.gif&#34; data-caption=&#34;Running the pre-bundled example scenario &amp;ldquo;Barnim&amp;rdquo; with Eclipse MOSAIC&#34;&gt;


  &lt;img src=&#34;../images/mosaic-barnim.gif&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Running the pre-bundled example scenario &amp;ldquo;Barnim&amp;rdquo; with Eclipse MOSAIC
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;cli-options&#34;&gt;CLI Options&lt;/h3&gt;
&lt;p&gt;The Eclipse MOSAIC start script supports the following arguments:&lt;/p&gt;
&lt;style&gt;
table th:first-of-type {
    width: 20%;
}
table th:nth-of-type(2) {
    width: 80%;
}
&lt;/style&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Option&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;-c&lt;/code&gt;&lt;br&gt;&lt;code&gt;--configuration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The primary configuration file which is scenario dependent and located in the according scenario folder. This file transitively includes other necessary configuration files. Usually you will use the file &lt;code&gt;&amp;lt;mosaic-root&amp;gt;/scenarios/&amp;lt;scenario_name&amp;gt;/scenario_config.json&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;-s&lt;/code&gt;&lt;br&gt;&lt;code&gt;--scenario&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;If the main configuration file of your scenario is located in the default scenario directory of MOSAIC (i.e. in &lt;code&gt;&amp;lt;mosaic-root&amp;gt;/scenarios/&amp;lt;scenario_name&amp;gt;/scenario_config.json&lt;/code&gt;), this option can be used instead of the &lt;code&gt;-c&lt;/code&gt; option by passing only the scenario name &lt;code&gt;-s &amp;lt;scenario_name&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;-w&lt;/code&gt;&lt;br&gt;&lt;code&gt;--watchdog-interval&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The interval of the internal alive check (in seconds) which is used by MOSAIC to detect execution stalls. This parameter is not mandatory and it is also possible to turn off the watchdog (&lt;code&gt;-w 0&lt;/code&gt;) for debug sessions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;-o&lt;/code&gt;&lt;br&gt;&lt;code&gt;--log-level&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Override all specified logging-levels. This option is useful for debugging simulations. For example logging every possible event would be done with &lt;code&gt;-o TRACE&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;-b&lt;/code&gt;&lt;br&gt;&lt;code&gt;--realtime-brake&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;With this parameter, the simulation will be slowed down to a desired Real Time Factor, if possible. When simulations already run slower than real time, this factor will have no effect. For example, use &lt;code&gt;-b 1&lt;/code&gt; to execute the simulation in real time.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;-r&lt;/code&gt;&lt;br&gt;&lt;code&gt;--random-seed&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The global random seed to set for the simulation run. This is usually defined in the &lt;code&gt;scenario_config.json&lt;/code&gt;, but can be overridden using this option.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;-v&lt;/code&gt;&lt;br&gt;&lt;code&gt;--start-visualizer&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opens a page in your default browser which visualizes all vehicle movements of the simulation on a map. This option only works, if your scenario is configured with the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/visualization/&#34;&gt;Websocket Visualizer&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;-h&lt;/code&gt;&lt;br&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Prints a help screen.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;While Eclipse MOSAIC is running, it prints some information on the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[user@gnulinux mosaic]$ ./mosaic.sh -s HelloWorld
2020-09-08 16:46:09,794 INFO  ROOT - Running Eclipse MOSAIC 23.0 on Java JRE v1.8.0_202 (AdoptOpenJdk)
2020-09-08 16:46:09,941 INFO  FederationManagement - Start federation with id &#39;HelloWorld&#39;
2020-09-08 16:46:09,943 INFO  FederationManagement - Add ambassador/federate with id &#39;application&#39;
2020-09-08 16:46:09,944 INFO  FederationManagement - Add ambassador/federate with id &#39;mapping&#39;
2020-09-08 16:46:09,945 INFO  FederationManagement - Add ambassador/federate with id &#39;sumo&#39;
2020-09-08 16:46:09,946 INFO  FederationManagement - Deploying federate &#39;sumo&#39; locally in .\tmp\sumo
2020-09-08 16:46:09,962 INFO  FederationManagement - Starting federate &#39;sumo&#39; locally in .\tmp\sumo
16:46:17 - Simulating: 195000000000ns (195.0s / 1000.0s) - 19.5% (RTF:33.10, ETC:25.2s)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The current simulation progress is shown in the following format.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;current wall clock time&lt;/li&gt;
&lt;li&gt;current simulation time in [ns] and [s]&lt;/li&gt;
&lt;li&gt;progress in %&lt;/li&gt;
&lt;li&gt;Real Time Factor (RTF) and Estimated Time to Completion (ETC)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The RTF is the ratio of simulated time to simulation duration in wall clock time, e.g. a real time factor
greater than 1.0 means, the simulation is running faster than real time. Both RTF and ETC are calculated
based on the performance of the last five seconds of the simulation and should only give a rough overview,
how long a simulation can take. Depending on the simulation setup, the values can differ heavily between
start and end of a simulation.&lt;/p&gt;
&lt;h2 id=&#34;gather-results&#34;&gt;Gather results&lt;/h2&gt;
&lt;p&gt;All active simulators as well as the according ambassadors generate certain logging output, depending on their configured logging level.
Therefore, these logs are very helpful to retrace and understand the individual states during the simulation time. The generated log
files can be found in the &lt;code&gt;&amp;lt;mosaic-root&amp;gt;/logs/log-&amp;lt;timestamp&amp;gt;&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Moreover, Eclipse MOSAIC offers uniformly formatted and visually prepared results using various
&lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/visualization/&#34;&gt;Output Generator&lt;/a&gt;&lt;/strong&gt; implementations. For  example, the &lt;code&gt;FileOutputGenerator&lt;/code&gt; generates
detailed outputs of e.g. vehicle positions, speeds, or message exchanges.
In the scenarios brought by the latest release, this output mechanism is already configured.&lt;/p&gt;
&lt;h2 id=&#34;scenario-configuration&#34;&gt;Scenario Configuration&lt;/h2&gt;
&lt;p&gt;The configuration of a simulation scenario consists of a detailed description for each coupled simulator. The main configuration file is found under &lt;code&gt;scenario_config.json&lt;/code&gt;,
which defines the list of coupled simulators:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;simulation&amp;quot;: {
        &amp;quot;id&amp;quot;: &amp;quot;Barnim&amp;quot;,
        &amp;quot;duration&amp;quot;: &amp;quot;1000s&amp;quot;,
        &amp;quot;randomSeed&amp;quot;: 268965854,
        &amp;quot;projection&amp;quot;: {
            &amp;quot;centerCoordinates&amp;quot;: {
                &amp;quot;latitude&amp;quot;: 52.511289,
                &amp;quot;longitude&amp;quot;: 13.3167457
            },
            &amp;quot;cartesianOffset&amp;quot;: {
                &amp;quot;x&amp;quot;: -385769.05,
                &amp;quot;y&amp;quot;: -5819239.29
            }
        }
    },
    &amp;quot;federates&amp;quot;: {
        &amp;quot;application&amp;quot;: true,
        &amp;quot;environment&amp;quot;: false,
        &amp;quot;cell&amp;quot;: false,
        &amp;quot;ns3&amp;quot;: false,
        &amp;quot;omnetpp&amp;quot;: false,
        &amp;quot;sns&amp;quot;: false,
        &amp;quot;sumo&amp;quot;: true,
        &amp;quot;output&amp;quot;: true
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way, simulators can be easily added or removed from the simulation. Each of the coupled simulators is configured in the directory
of the &lt;code&gt;scenario_config.json&lt;/code&gt; file. The release bundle comes with a set of tutorial scenarios, which are described in detail
in the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/tutorials/&#34;&gt;Tutorials section&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simulation Results</title>
      <link>https://www.eclipse.dev/mosaic/docs/getting_started/results/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/getting_started/results/</guid>
      <description>&lt;p&gt;Eclipse MOSAIC generates log files for each simulation run. Log files are generated for the ambassadors of each
coupled federate respectively simulator and for the RTI itself. The log files are stored in the
folder &lt;code&gt;&amp;lt;mosaic-root&amp;gt;/logs/log-&amp;lt;timestamp&amp;gt;&lt;/code&gt;. For each simulation run a new folder is created.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ log-&amp;lt;timestamp&amp;gt;
   ├─ apps
   |  └─ &amp;lt;unitType&amp;gt;_&amp;lt;unitId&amp;gt; ................. Detailed application specific logs for each unit
   |      ├─ OperatingSystem.log ............. Detailed operating system logs for the unit
   |      └─ ExampleApp.log .................. Detailed application specific logs for each application
   ├─ activities.csv ......................... Simulation details in comma separated value-format
   ├─ Application.log  ....................... Application simulator logs, including information for all units
   ├─ Battery.log ............................ Battery simulator log
   ├─ Cell.log ............................... Cellular network log
   ├─ ChargingStation.log .................... ChargingStation ambassador log
   ├─ Communication.log ...................... (Ad hoc) network simulation ambassador log (ns-3, OMNeT++, SNS)
   ├─ CommunicationDetails.log ............... Detailed output of network simulator (ns-3 or OMNeT++)
   ├─ Environment.log ........................ Logs of the environmental eventserver
   ├─ Mapping.log ............................ Mapping configuration logs
   ├─ MOSAIC.log ............................. General information, e.g. startup sequence information
   ├─ Navigation.log ......................... Detailed logs about navigation component in the application ambassador
   ├─ Traffic.log ............................ Traffic simulation log (SUMO or others)
   └─ output.csv ............................. Recorded data of the integrated File Output Generator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition to standard logging output for each federate there is a &lt;code&gt;activities.csv&lt;/code&gt; file which contains
detailed information about sent and received interactions. This file can be used to trace a
simulation run for deep debugging. To enable this feature, the log level of the logger &lt;code&gt;activities&lt;/code&gt; has to be
set to &lt;code&gt;INFO&lt;/code&gt; in the &lt;code&gt;logback.xml&lt;/code&gt; (see section below).&lt;/p&gt;
&lt;h2 id=&#34;logging&#34;&gt;Logging&lt;/h2&gt;
&lt;p&gt;The main configuration file for logging is &lt;code&gt;&amp;lt;mosaic-root&amp;gt;/etc/logback.xml&lt;/code&gt;. In this file, the log output
can be configured in great detail. This file can be adjusted to your needs, e.g. you can set up a more detailed logging
for communication components but set a less verbose output for Eclipse MOSAIC&amp;rsquo;s internal interactions or traffic
simulation depending on your simulation focus.&lt;/p&gt;
&lt;p&gt;Eclipse MOSAIC uses &lt;em&gt;LOGback&lt;/em&gt; as logging framework. &lt;em&gt;LOGback&lt;/em&gt; offers a lot of parameters to adapt the output to your needs. Please refer to





&lt;a href=&#34;https://logback.qos.ch/manual/layouts.html#ClassicPatternLayout&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this site&lt;/a&gt; for a detailed overview of all
parameters you can use in the &lt;code&gt;logback.xml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Please note that you can adjust the output to your needs by setting different log levels (&lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;,
&lt;code&gt;DEBUG&lt;/code&gt; etc.) for each component in the file at &lt;code&gt;&amp;lt;mosaic-root&amp;gt;/etc/logback.xml&lt;/code&gt;. This might also influence
the simulation performance because of a possibly high amount of data to be logged.&lt;/p&gt;
&lt;h3 id=&#34;federate-specific-logging&#34;&gt;Federate specific logging&lt;/h3&gt;
&lt;p&gt;Depending on the simulation purpose, further configuration possibilities for federate specific logging
may be of interest.&lt;/p&gt;
&lt;p&gt;For instance, OMNeT++ exhibits an elaborated logging concept. The &lt;code&gt;omnetpp.ini&lt;/code&gt; in the scenario folder
includes options to adjust the logging levels. The outputs of this federate are written to &lt;code&gt;CommunicationDetails.log&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simulator Coupling</title>
      <link>https://www.eclipse.dev/mosaic/docs/extending_mosaic/simulator_coupling/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/extending_mosaic/simulator_coupling/</guid>
      <description>&lt;p&gt;This section provides general information which helps to couple your own simulator with Eclipse MOSAIC. For a
successful coupling, two parts are required: the Federate Ambassador is the communication interface
between the RTI and your simulator. It implements predefined interfaces of the Eclipse MOSAIC core library
and is directly coupled with Eclipse MOSAIC. Second, your simulator needs to communicate with the Federate
Ambassador. For this purpose, you either need to implement your own protocol to control the simulator,
or use existing ones of your respective simulator (e.g. SUMO provides the TraCI byte buffer protocol).&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;implementing-a-federate-ambassador&#34;&gt;Implementing a Federate Ambassador&lt;/h2&gt;
&lt;p&gt;In order to simplify federate development and to make the usage of the mechanisms provided by the RTI
safer, an abstract class called &lt;code&gt;AbstractFederateAmbassador&lt;/code&gt; is provided by the Eclipse MOSAIC core package.
It implements the &lt;code&gt;FederateAmbassador&lt;/code&gt; interface and handles incoming interactions as well as time
advance grants according to the specified federate behaviour. When a federate implementation is making
use of the &lt;code&gt;AbstractFederateAmbassador&lt;/code&gt; as a super class, it has to provide two information to the
superclass while constructing an instance of the class. These are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;isTimeConstrained&lt;/code&gt;: The general way this parameter can be understood, is that if it is set to &lt;strong&gt;true&lt;/strong&gt;
the federate is sensitive towards the time stamp order of interactions. The &lt;code&gt;AbstractFederateAmbassador&lt;/code&gt;
will then queue incoming interactions and request a time advance from the RTI in order to ensure that
processing the received interaction is safe. At the time the requested time advance is granted, every
queued interaction with a time stamp smaller or equal to the granted time will be delivered to the
federate for processing. If set to &lt;strong&gt;false&lt;/strong&gt;, incoming interactions will be forwarded immediately to
the federate, thus resulting in a &lt;em&gt;receive-order&lt;/em&gt; of interactions at the federate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;isTimeRegulating&lt;/code&gt;: Specifies whether the federate will publish time stamped interactions and
thus can influence the time advances of other federates in the federation. If set to &lt;strong&gt;true&lt;/strong&gt;, the &lt;code&gt;AbstractFederateAmbassador&lt;/code&gt;
will request time advances with respect to the specified lookahead
value of the federate in order to avoid that time management schedules the execution of other
federates while queued interactions are processed. If set to &lt;strong&gt;false&lt;/strong&gt;, time advance requests that are
issued due to incoming interactions will be flagged with an unlimited lookahead, allowing the RTI to
schedule other federates while incoming interactions are processed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;















&lt;figure id=&#34;figure-flowchart-of-interaction-handling&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/flowchart_timeconstrained_timeregulating.png&#34; data-caption=&#34;Flowchart of Interaction handling&#34;&gt;


  &lt;img src=&#34;../images/flowchart_timeconstrained_timeregulating.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Flowchart of Interaction handling
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;further-notes&#34;&gt;Further notes&lt;/h3&gt;
&lt;p&gt;Coupling a multitude of different simulators and properly syncing them is a non-trivial task and requires a lot of effort in order to
function correctly. If you have read up on High Level Architecture before
(have a look 




&lt;a href=&#34;https://en.wikipedia.org/wiki/High_Level_Architecture&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; and at the linked references) you might notice, that the
previous flowchart does not completely reflect the proposed mechanisms. For instance, the &lt;code&gt;isTimeRegulating&lt;/code&gt; flag has no effect, when the
&lt;code&gt;isTimeConstrained&lt;/code&gt; flag is not set.&lt;br&gt;
So at some points you might stumble upon federates, which have their &lt;code&gt;isTimeConstrained&lt;/code&gt; and &lt;code&gt;isTimeRegulating&lt;/code&gt; flags set to different
values as you would expect. An example of this is the &lt;code&gt;ApplicationAmbassador&lt;/code&gt;. One would expect it to be time-constrained as well as
time-regulating. This isn&amp;rsquo;t the case though, because the &lt;code&gt;ApplicationAmbassador&lt;/code&gt; implements its own time- and event-management,
which would interfere with the internal mechanisms.&lt;br&gt;
When implementing your own federate, you can use the existing ones as reference.&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;p&gt;A federate that is &lt;code&gt;timeConstrained&lt;/code&gt; and &lt;code&gt;timeRegulated&lt;/code&gt; can handle a time stamped interaction
only after receiving a corresponding time advance grant. For that reason, the &lt;code&gt;AbstractFederateAmbassador&lt;/code&gt;
caches the incoming interactions in a local queue and requests a time advance with the interactions
time stamp. After getting a grant for that time stamp, it forwards the interaction via the &lt;code&gt;processInteraction&lt;/code&gt;
method call and afterwards invokes &lt;code&gt;processTimeAdvanceGrant&lt;/code&gt; to allow the federate to proceed in its
local simulation time. In the activity diagram in the following figure, the process of handling of incoming interactions
with respect to the federate configuration is illustrated.&lt;/p&gt;















&lt;figure id=&#34;figure-sequence-diagram-illustrating-the-flow-of-information&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/federate-sequence.jpeg&#34; data-caption=&#34;Sequence diagram illustrating the flow of information.&#34;&gt;


  &lt;img src=&#34;../images/federate-sequence.jpeg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Sequence diagram illustrating the flow of information.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;integration-into-eclipse-mosaic&#34;&gt;Integration into Eclipse MOSAIC&lt;/h3&gt;
&lt;p&gt;The first step to integrate a new component is the extension of the configuration file &lt;code&gt;etc/runtime.json&lt;/code&gt;.
An example for a federate configuration can be found in following listing.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;federates&amp;quot;: [
    ...
    {
        &amp;quot;id&amp;quot;: &amp;quot;omnetpp&amp;quot;,
        &amp;quot;classname&amp;quot;: &amp;quot;org.eclipse.mosaic.fed.omnetpp.ambassador.OmnetppAmbassador&amp;quot;,
        &amp;quot;configuration&amp;quot;: &amp;quot;omnetpp_config.json&amp;quot;,
        &amp;quot;configurationDeployPath&amp;quot;: &amp;quot;omnetpp-federate/simulations&amp;quot;,
        &amp;quot;priority&amp;quot;: 50,
        &amp;quot;dockerImage&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;host&amp;quot;: &amp;quot;local&amp;quot;,
        &amp;quot;port&amp;quot;: 4998,
        &amp;quot;deploy&amp;quot;: true,
        &amp;quot;start&amp;quot;: true,
        &amp;quot;subscriptions&amp;quot;: [
            &amp;quot;VehicleRegistration&amp;quot;,
            &amp;quot;RsuRegistration&amp;quot;,
            &amp;quot;TrafficLightRegistration&amp;quot;,
            ...
        ],
        &amp;quot;javaClasspathEntries&amp;quot;: []
    },
    ...       
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following parameters are available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;class&lt;/code&gt; - Attribute giving the full qualified name of the Java class which implements the Feder-
ateAmbassador interface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt; - The id of the federate. This value should be as short as possible and will be also used for
identifying the configuration folder within scenarios.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;deploy&lt;/code&gt; - If set to true, the federate placed under bin/fed/&lt;id&gt; will be copied to the execution
host (according to the host configuration file).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;start&lt;/code&gt; - If set to true, the federate will be started by the federation management using the start
command specified in the configuration file or this implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;subscriptions&lt;/code&gt; - A list of interaction names which the Federate Ambassador subscribes for. If any other
ambassador sends out one of those interactions, this ambassador will receive them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;interaction-extension&#34;&gt;Interaction extension&lt;/h2&gt;
&lt;p&gt;Another possibility to extend Eclipse MOSAIC is to add a new interaction to the set of predefined interactions. In the following
figure, the abstract class &lt;code&gt;Interaction&lt;/code&gt;, implemented interaction extensions, and a place holder for further
extensions (rectangles with grey fonts and a dotted border) are illustrated. When the InteractionManagement
forwards interactions among federates, it chooses the destination based on a interaction id and
an optional condition. Furthermore, it synchronizes the interaction delivery based on their times. The
abstract class &lt;code&gt;Interaction&lt;/code&gt; offers these attributes but no further content. The exchanged content has to be
implemented by extending the class &lt;code&gt;Interaction&lt;/code&gt;. The already implemented extensions cover the content
necessary to simulate common scenarios. However, for further scenarios further interactions might be
required.&lt;/p&gt;















&lt;figure id=&#34;figure-interaction-classes-and-their-relationships&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/mosaic-message-classes.png&#34; data-caption=&#34;Interaction classes and their relationships..&#34;&gt;


  &lt;img src=&#34;../images/mosaic-message-classes.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Interaction classes and their relationships..
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.eclipse.dev/mosaic/group/dcaiti/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/group/dcaiti/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Eclipse SUMO - Simulation of Urban MObility</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/traffic_simulator_sumo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/traffic_simulator_sumo/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Eclipse SUMO&lt;/strong&gt; is a highly portable, microscopic and continuous road traffic
simulation tool. It is designed to handle large road networks faster than real-time and simulates each vehicle
individually.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Operating System&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;GNU/Linux, &lt;em&gt;macOS&lt;/em&gt;, Microsoft Windows&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Written in&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;EPL-2.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;




&lt;a href=&#34;https://www.eclipse.dev/sumo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.eclipse.dev/sumo/&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Supported version(s)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Recommended version:&lt;br&gt;Full support:&lt;br&gt;Limited support:&lt;/td&gt;
&lt;td&gt;1.16.0&lt;br&gt;1.2.0 - 1.16.0&lt;br&gt;1.0.1, 1.1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;


&lt;a class=&#34;mosaic-btn mosaic-btn-primary&#34; href=&#34;https://sumo.dlr.de/wiki/Downloads&#34; title=&#34;Download Eclipse SUMO&#34;&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;Download Eclipse SUMO&lt;/a&gt;

&lt;p&gt;Download the SUMO binary bundle or installer from the SUMO website. Linux users may build SUMO from the source code.
Depending on the distribution, it is even possible to install SUMO as package from a software repository.
Please refer to the SUMO Wiki for further information.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;In order to run SUMO with Eclipse MOSAIC you need to make the SUMO binaries available system wide by adding the SUMO
binary folder to your
&lt;code&gt;PATH&lt;/code&gt; environment variable. Alternatively, the environment variable &lt;code&gt;SUMO_HOME&lt;/code&gt; can be used to
define the installation directory of SUMO.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;We recommend using the 64 bit version of SUMO if you want to simulate scenarios with large traffic networks.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The SUMO ambassador can be configured with a configuration file. The specific path is &lt;code&gt;&amp;lt;scenarioName&amp;gt;/sumo/sumo_config.json&lt;/code&gt;.
If no such file exists, the following default configuration options are used:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ 
    &amp;quot;updateInterval&amp;quot;: 1000, 
    &amp;quot;sumoConfigurationFile&amp;quot;: &amp;quot;&amp;lt;scenarioName&amp;gt;.sumo.cfg&amp;quot;, 
    &amp;quot;exitOnInsertionError&amp;quot;: true, 
    &amp;quot;additionalSumoParameters&amp;quot;: &amp;quot;--time-to-teleport 0  --seed 100000&amp;quot;, 
    &amp;quot;subscriptions&amp;quot;: [ &amp;quot;roadposition&amp;quot;, &amp;quot;signals&amp;quot;, &amp;quot;emissions&amp;quot; ],
    &amp;quot;subscribeToAllVehicles&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Read the detailed documentation of the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/sumo_config/&#34;&gt;SUMO Configuration&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next to &lt;code&gt;sumo_config.json&lt;/code&gt;, the following configuration files are required for every SUMO simulation scenario:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   └─ sumo
      ├─ &amp;lt;scenarioName&amp;gt;.net.xml .............. SUMO Network file
      ├─ &amp;lt;scenarioName&amp;gt;.sumocfg .............. SUMO configuration file
      └─ sumo_config.json .................... Ambassador configuraition file]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The SUMO configuration consists of sumo specific config files and the sumo-ambassador configuration
file. The main configuration file name must end with the suffix *.sumocfg, which needs to refer to the network.
The network file is mandatory and can be generated with the &lt;code&gt;scenario-convert&lt;/code&gt; tool provided with Eclipse MOSAIC.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
&lt;p&gt;When you are coming from SUMO you might notice the missing route file (&lt;code&gt;*.rou.xml&lt;/code&gt;). This is because with Eclipse MOSAIC,
the traffic definition (definition of vehicles, flows, vehicle types) is usually part of the Mapping configuration file. Routes
usually are defined in the Application database. You can however add route files to your scenario and mosaic will handle
all vehicles in coherence.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Vehicle related parameters, such as acceleration, maximum speed, and the like, are configured via the Mapping configuration file. However,
some SUMO specific parameters, like the car following model can only be configured in the &lt;code&gt;sumo_config.json&lt;/code&gt;. For example, if you have
configured a vehicle type called &lt;code&gt;MyVehicle&lt;/code&gt; in the Mapping configuration, you can set specific parameters for this type as following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    ...,
    &amp;quot;additionalVehicleTypeParameters&amp;quot;: {
        &amp;quot;MyVehicle&amp;quot;: {
            &amp;quot;carFollowModel&amp;quot;: &amp;quot;IDM&amp;quot;,
            &amp;quot;lcKeepRight&amp;quot;: &amp;quot;10&amp;quot;
        },
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;All parameters have to be specified as Strings.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Further information about SUMO and its configuration can be found in the official SUMO wiki.&lt;/p&gt;
&lt;h2 id=&#34;using-the-sumo-gui-with-eclipse-mosaic&#34;&gt;Using the SUMO GUI with Eclipse MOSAIC&lt;/h2&gt;
&lt;p&gt;It is also possible to use the graphical interface of SUMO in order to visualize and interact with the simulation.
To
achieve this, Eclipse MOSAIC can be configured to start the GUI process of SUMO as the federate rather than the
command
line interface.&lt;/p&gt;
&lt;p&gt;In order to use the SUMO GUI the file &lt;code&gt;&amp;lt;mosaic&amp;gt;/etc/runtime.json&lt;/code&gt; needs to be edited.
Here, the entry
&lt;code&gt;org.eclipse.mosaic.fed.sumo.ambassador.SumoAmbassador&lt;/code&gt; must be
replaced with
&lt;code&gt;org.eclipse.mosaic.fed.sumo.ambassador.SumoGuiAmbassador&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Keep in mind to launch Eclipse MOSAIC with the argument &lt;code&gt;-w 0&lt;/code&gt; in order to disable the watchdog timer.
Otherwise, it
would shut down Eclipse MOSAIC if the simulation is paused in the SUMO GUI.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;using-libsumo-with-eclipse-mosaic&#34;&gt;Using LibSumo with Eclipse MOSAIC&lt;/h2&gt;
&lt;p&gt;The coupling between MOSAIC and SUMO is implemented in two ways. The default implementation uses
a socket-based API provided by SUMO, short TraCI. This interface has been well-established over the recent years
and integrates very well with MOSAIC. The main disadvantage of this method is, that it uses a socket to
transmit all the simulation data from SUMO to MOSAIC, even if SUMO runs on the very same machine. This
may result in a bottleneck and slows down the simulation especially for large-scale scenarios.&lt;/p&gt;
&lt;p&gt;To overcome this, there is a second method to couple SUMO and MOSAIC with each other. This integrates
SUMO as a dynamic linked library into MOSAIC, which results in a much faster data exchange. In order
to get this running, you need to follow these steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure &lt;code&gt;SUMO_HOME&lt;/code&gt; environment variable is set correctly to your SUMO installation.&lt;/li&gt;
&lt;li&gt;Check, if there&amp;rsquo;s a &lt;code&gt;bin/libsumojni.dll&lt;/code&gt; or &lt;code&gt;bin/liblibsumojni.so&lt;/code&gt; file in your SUMO installation directory. If not, you might
need to install the &amp;ldquo;extras&amp;rdquo; release bundle of SUMO (Windows), or you need to re-build SUMO from sources and activate
the build of libsumo (see &lt;a href=&#34;https://sumo.dlr.de/docs/Libsumo.html#building_it)&#34;&gt;https://sumo.dlr.de/docs/Libsumo.html#building_it)&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Only the recent SUMO version (1.16.0) is supported.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If these pre-requisites are met, you can activate this feature editing the file &lt;code&gt;&amp;lt;mosaic&amp;gt;/etc/runtime.json&lt;/code&gt;.
Here, the entry
&lt;code&gt;org.eclipse.mosaic.fed.sumo.ambassador.SumoAmbassador&lt;/code&gt; must be
replaced with
&lt;code&gt;org.eclipse.mosaic.fed.sumo.ambassador.LibSumoAmbassador&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Please be aware that this feature is still experimental. Also, some SUMO commands are not yet supported
(retrieving leader information, partly missing information about traffic lights and induction loops).&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;adding-vehicles&#34;&gt;Adding Vehicles&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;SumoAmbassador&lt;/code&gt; handles vehicles added via Mapping (&lt;em&gt;mapping vehicles&lt;/em&gt;) and via SUMO route files (&lt;em&gt;sumo vehicles&lt;/em&gt;).
There are however some caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Mapping vehicles&lt;/em&gt; can drive on routes specified in route files, however &lt;em&gt;sumo vehicles&lt;/em&gt; can&amp;rsquo;t drive on routes specified in the scenario
database&lt;/li&gt;
&lt;li&gt;In order to configure an application mapping for &lt;em&gt;sumo vehicles&lt;/em&gt;, you can either use the &lt;code&gt;prototypes&lt;/code&gt; sections for single type mapping, or the &lt;code&gt;typeDistribution&lt;/code&gt; section for choosing between multiple mappings by weight. It is currently not possible to map applications on specific vehicles, unless they have a distinctive vehicle type name.&lt;/li&gt;
&lt;li&gt;IDs of your &lt;em&gt;sumo vehicles&lt;/em&gt; will be replaced on MOSAIC side with internal IDs starting with &lt;code&gt;veh_&lt;/code&gt; prefix. Keep this in mind when your applications create log files or during debugging.&lt;/li&gt;
&lt;li&gt;The vehicle types defined in Mapping and defined in route files can&amp;rsquo;t share the same names&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This duality of adding vehicles has some powerful use cases. For example, you can use an existing SUMO scenario and add your own
traffic via MOSAIC and equip all vehicles with applications.&lt;/p&gt;
&lt;h2 id=&#34;deep-dive-route-files--additional-files&#34;&gt;Deep dive: Route Files / Additional Files&lt;/h2&gt;
&lt;p&gt;In SUMO the route files (&lt;code&gt;&amp;lt;..&amp;gt;.rou.xml&lt;/code&gt;) fulfill three main purposes supported by Eclipse MOSAIC:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Define vehicle types.&lt;/li&gt;
&lt;li&gt;Define routes for vehicles.&lt;/li&gt;
&lt;li&gt;Define vehicle departures to spawn vehicles with defined types (1.) on defined routes (2.)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These definitions can also be done in additional files (&lt;code&gt;&amp;lt;...&amp;gt;.add.xml&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Route and vehicle departure definitions can also be handled by SUMO&amp;rsquo;s &lt;strong&gt;Tr&lt;/strong&gt;affic &lt;strong&gt;C&lt;/strong&gt;ontrol &lt;strong&gt;I&lt;/strong&gt;nterface (TraCI), which is also
the way Eclipse MOSAIC adds them to the simulation. This has the advantage that it can be done at runtime leading to a smaller overhead
before simulation start. Vehicle types however have to be defined in a route file, or an additional file before simulation start,
additional files have the advantage, that they are loaded before route files, which is helpful for our use case.
We write a new additional file (&lt;code&gt;mosaic_types.add.xml&lt;/code&gt;), which contains types specified in Mapping and merges them
with the aforementioned &lt;code&gt;additionalVehicleTypeParameters&lt;/code&gt; (Note: these are not validated in any form). The image below shows
a schematic view of how the configuration files and RTI components interact with each other.















&lt;figure id=&#34;figure-schematic-overview-of-vehicle-type-handling-in-eclipse-mosaic&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/sumo_route_files.svg&#34; data-caption=&#34;Schematic overview of vehicle type handling in Eclipse MOSAIC&#34;&gt;


  &lt;img src=&#34;../images/sumo_route_files.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Schematic overview of vehicle type handling in Eclipse MOSAIC
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;access-sumo-traci-from-applications&#34;&gt;Access SUMO TraCI From Applications&lt;/h2&gt;
&lt;p&gt;If SUMO is used as a traffic simulator and a special functionality is required, the &lt;code&gt;sendSumoTraciRequest&lt;/code&gt;
function in the &lt;code&gt;OperatingSystem&lt;/code&gt; can be used.&lt;/p&gt;
&lt;p&gt;The function expects a string (a unique identifier which will be assigned to the response) and a byte array
(representing the complete Traffic Control Interface (TraCI) request including the header). The message
identifier can be an empty string.&lt;/p&gt;
&lt;p&gt;In all cases the command will trigger a response. The application can receive the response from the
method &lt;code&gt;onSumoTraciResult&lt;/code&gt;. This method will receive a &lt;code&gt;SumoTraciResult&lt;/code&gt;
object. This response contains the specified identifier. The application must handle the
identification process of the response itself.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Be careful when using this interface and the TraCI commands. The
commands are delivered to TraCI without any prior checks.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;You can find the example application SumoTraciInteractionApp
in the additional examples bundle on the &lt;a href=&#34;https://www.dcaiti.tu-berlin.de/research/simulation/download/&#34; target=&#34;_blank&#34;&gt;DCAITI website&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Variable Message Signs Simulator</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/vms_simulator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/vms_simulator/</guid>
      <description>&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;The &lt;strong&gt;VMS Simulator&lt;/strong&gt; is part of &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;The VMS Simulator extends simulations with variable message signs (VMS), which could by dynamically controlled. A VMS can be placed anywhere along a road and
has, amongst others, the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Type&lt;/em&gt; for different traffic sign semantics,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Road and lane(s)&lt;/em&gt; it corresponds to,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Visibility&lt;/em&gt; as a value telling how well a sign is visible for road users&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The concept of a flexible sign type allows testing future traffic signs which are not existent at the moment and also common VMS types like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Speed limit signs&lt;/li&gt;
&lt;li&gt;Lane assignment signs (assigns a list of allowed vehicle types to a lane - e.g. Busses, Taxis or even Automated Vehicles)&lt;/li&gt;
&lt;/ul&gt;















&lt;figure id=&#34;figure-example-of-speed-and-lane-assigment-in-highway-scenario&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/vms-simulator_signs-highway.png&#34; data-caption=&#34;example of speed and lane assigment in highway scenario&#34;&gt;


  &lt;img src=&#34;../images/vms-simulator_signs-highway.png&#34; alt=&#34;&#34; width=&#34;85%&#34; &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    example of speed and lane assigment in highway scenario
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Any properties of a VMS, beside its position and type, can be changed during the simulation.&lt;/p&gt;
&lt;p&gt;In each simulation step the VMS Simulator informs vehicles about any VMS that is inside their sight distance. How
vehicles react on VMS can be modeled with the &lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_simulator&#34; title=&#34;Application Simulator&#34;&gt;Application Simulator&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Application Interfaces</title>
      <link>https://www.eclipse.dev/mosaic/docs/develop_applications/application_interfaces/</link>
      <pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/develop_applications/application_interfaces/</guid>
      <description>&lt;p&gt;Application interfaces handle call-backs to incoming events via their methods, like &lt;code&gt;onVehicleUpdated()&lt;/code&gt;, called by the
application simulator. The following table lists all interfaces usable for application implementation, the type of unit as well as
important other interfaces it implements. Interface specific public methods which have to be implemented by the user are listed in the
&amp;ldquo;Provides&amp;rdquo; column. The elementary interface (&lt;code&gt;Application&lt;/code&gt;) provides the methods &lt;code&gt;onStartup()&lt;/code&gt;, &lt;code&gt;onShutdown()&lt;/code&gt;. Implementation details
are given in 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/&#34;&gt;Development of applications&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Interface&lt;/th&gt;
&lt;th&gt;Applicable to&lt;/th&gt;
&lt;th&gt;Provides&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Application / AbstractApplication&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;all&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;onStartup&lt;/code&gt;, &lt;code&gt;onShutdown&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Elementary application class providing an operating system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ConfigurableApplication&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;all&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Basic application class providing an operating system and a configuration, which automatically loaded from a JSON file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CommunicationApplication&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;all&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;onMessageReceived&lt;/code&gt;, &lt;code&gt;onAcknowledgementReceived&lt;/code&gt;, &lt;code&gt;onCamBuilding&lt;/code&gt;, &lt;code&gt;onMessageTransmitted&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;All applications that implement some form of V2X communication are to implement this interface.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;VehicleApplication&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vehicle&lt;/td&gt;
&lt;td&gt;&lt;code&gt;onVehicleUpdated&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;General vehicle funtionality&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ElectricVehicleApplication&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vehicle&lt;/td&gt;
&lt;td&gt;&lt;code&gt;onBatteryStateUpdated&lt;/code&gt;, &lt;code&gt;onChargingRequestRejected&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Electric vehicle functionality&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TrafficSignAwareApplication&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;vehicle&lt;/td&gt;
&lt;td&gt;&lt;code&gt;onTrafficSignInvalidated&lt;/code&gt;, &lt;code&gt;onTrafficSignNoticed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Used by vehicles which are aware of traffic signs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TrafficLightApplication&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;traffic light&lt;/td&gt;
&lt;td&gt;&lt;code&gt;onTrafficLightGroupUpdated&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Traffic light functionality&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TrafficManagementCenterApplication&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;TMC&lt;/td&gt;
&lt;td&gt;&lt;code&gt;onInductionLoopUpdated&lt;/code&gt;, &lt;code&gt;onLaneAreaDetectorUpdated&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Traffic management functionality&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MosaicApplication&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;all&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;onSumoTraciResponded&lt;/code&gt;, &lt;code&gt;onInteractionReceived&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Features that involve customized RTI-interactions of MOSAIC&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;&lt;em&gt;All interfaces can be found in the package&lt;/em&gt; &lt;code&gt;org.eclipse.mosaic.fed.application.app.api.*&lt;/code&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For example, when implementing the &lt;code&gt;VehicleApplication&lt;/code&gt;, your application is able to react on movements of the vehicle:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyApplication extends AbstractApplication&amp;lt;VehicleOperatingSystem&amp;gt; 
                           implements VehicleApplication 
{
    
  ...

  @Override
  public void onVehicleUpdated(VehicleData previous, VehicleData current) {
      ...
  }

  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To create a Road Side Unit application which should react on incoming V2X messages, one need to implement the &lt;code&gt;CommunicationApplication&lt;/code&gt; interface.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyRsuApplication extends AbstractApplication&amp;lt;RoadSideUnitOperatingSystem&amp;gt; 
                              implements CommunicationApplication 
{
    
  ...

  @Override
  public void onMessageReceived(ReceivedV2xMessage v2xMessage) {
      ...
  }

  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, you can also combine the interfaces with each other.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interactions in Eclipse MOSAIC</title>
      <link>https://www.eclipse.dev/mosaic/docs/extending_mosaic/interactions/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/extending_mosaic/interactions/</guid>
      <description>&lt;p&gt;This chapter is intended to document interactions that can be sent and received between Eclipse MOSAIC federates
in order to enable users to easily design and integrate new federates and connect them to existing
federates. Note that we use the word &amp;ldquo;interaction&amp;rdquo; whenever we describe communication between federates,
whereas we talk about a &amp;ldquo;message&amp;rdquo; primarily when concerned with V2X-communication.&lt;/p&gt;
&lt;p&gt;All interactions are categorized by the package they are contained in, which corresponds to their main context/purpose.
The &amp;ldquo;Sent by&amp;rdquo; column is not necessarily complete for all interactions but should give an idea where interactions are used.&lt;/p&gt;
&lt;h2 id=&#34;mapping&#34;&gt;mapping&lt;/h2&gt;
&lt;p&gt;All interactions in this package are concerned with adding/registering simulation-units to the simulation.
While most of the introductions are handled by the &lt;code&gt;Mapping&lt;/code&gt;- or &lt;code&gt;Application&lt;/code&gt;-ambassador, some of them
are handled by the ambassadors for the traffic simulators (see 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/tutorials/lust/&#34;&gt;LuST&lt;/a&gt;-scenario).
In this case the interactions are used to initialize the scenario.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Interaction name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sent by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleRegistration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is sent by the vehicle mapping component to indicate the introduction of a new vehicle to the simulation. Note, this does not necessarily imply that the added vehicle is already simulated by the traffic simulator.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Mapping&lt;/code&gt;,&lt;br&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ChargingStationRegistration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction indicates the introduction of a charging station to the simulation. All units are introduced at simulation start time, e.g. 0s.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Mapping&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;RsuRegistration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction indicates the introduction of a roadside unit to the simulation.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Mapping&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;TmcRegistration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction indicates the introduction of a traffic management center to the simulation. It holds a list of all applications and all induction loops and lane are detectors the TMC is responsible for.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Mapping&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ServerRegistration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction indicates the introduction of a server to the simulation. It holds a list of all applications.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Mapping3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;TrafficLightRegistration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction indicates the introduction of a traffic light (group) to the simulation. It holds a traffic light group, which unites all traffic light signals used for one traffic light system.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Mapping&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;TrafficSignRegistration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction indicates the introduction of a traffic sign.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Mapping&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;mappingadvanced&#34;&gt;mapping.advanced&lt;/h3&gt;
&lt;p&gt;Interactions in this package are still concerned with the mapping of vehicles but differ from simple simulation unit registration.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Interaction name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sent by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ScenarioTrafficLightRegistration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction contains the phases and their duration of each traffic light in the simulation. This interaction shall be generated by the traffic simulators at start up (e.g. SUMO)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Sumo&lt;/code&gt;,&lt;br&gt;&lt;code&gt;Phabmacs&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ScenarioVehicleRegistration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is used to add vehicles to a simulation using a preconfigured scenario, which could be defined by using Sumo.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Sumo(Scenario)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;RoutelessVehicleRegistration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is sent the vehicle mapping component to indicate the introduction of a new vehicle whose route is not yet known. This interaction is usually handled by the &lt;code&gt;Application&lt;/code&gt;-ambassador, which calculates a route for the given vehicle and sends out an VehicleRegistration-interaction afterwards.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Mapping&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;communication&#34;&gt;communication&lt;/h2&gt;
&lt;p&gt;This package contains interactions regarding the setup of communication-components in simulation units and interactions concerned with the transfer of V2X-messages.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Interaction name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sent by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;AdHocCommunicationConfiguration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is intended to be used to exchange information about the configuration of a vehicle’s ad-hoc communication facilities.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;CellularCommunicationConfiguration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is intended to be used to exchange information about the configuration of a vehicle’s cellular communication facilities.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Interactions related to V2X-message transfer.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Interaction name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sent by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;V2xMessageAcknowledgement&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is used by a communication simulator to inform about success or failure of a packet transmission. Typically, the application simulator should subscribe to this interaction.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;V2xMessageReception&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is intended to be used to exchange information about a received V2X message.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Omnet++&lt;/code&gt;,&lt;br&gt;&lt;code&gt;ns-3&lt;/code&gt;,&lt;br&gt;&lt;code&gt;SimpleNetworkSimulator&lt;/code&gt;,&lt;br&gt;&lt;code&gt;cell&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;V2xFullMessageReception&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction carries the payload that represents an arbitrary V2XMessage that is supposed to be received by the receiver of this Eclipse MOSAIC Interaction.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Omnet++&lt;/code&gt;,&lt;br&gt;&lt;code&gt;ns-3&lt;/code&gt;,&lt;br&gt;&lt;code&gt;SimpleNetworkSimulator&lt;/code&gt;,&lt;br&gt;&lt;code&gt;Cell&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;V2xMessageRemoval&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is intended to be used to exchange information about  V2X messages, that are to be deleted.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;V2xMessageTransmission&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is sent in order to trigger the transportation of a V2XMessage over a wireless network to a given geographical destination area.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;vehicle&#34;&gt;vehicle&lt;/h2&gt;
&lt;p&gt;The interactions contained in this package are usually used to enable applications to forward vehicle-control to the used traffic simulators.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Interaction name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sent by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleActuatorsChange&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is used to directly control the throttle/brake of an vehicle. At the moment this is only supported by Phabmacs.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleDistanceSensorActivation&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is used to enable the distance sensors of a vehicle. A multitude of sensors can be enabled with one interaction given they use the same maximum lookahead distance.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleFederateAssignment&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is intended to be used, when more than one traffic simulator is used in a simulation. It enables the passing of information on which vehicle are passed externally. At the moment this is used by the PhSCA-ambassador.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;PhaSCA&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleLaneChange&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction initiates a lane change for the given vehicle, which should be consumed by the traffic simulators.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleParametersChange&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction requests to update various parameters of the vehicle or its driver.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleResume&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction requests the given vehicle to continue its journey after being stopped beforehand. The interaction should be handled by traffic simulators&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleRouteChange&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is used to change a route for vehicle by its id. It can be assumed that the given route id has been propagated by either a VehicleRoutesInitialization- or VehicleRouteRegistration-interaction.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleRouteRegistration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is used to propagate a newly generated route which is not yet known. It consists of the id of the route and a list of all its edges.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleSightDistanceConfiguration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is used to configure the sight distance for a vehicle (driver), this information can for example be used to implement applications regarding traffic sign recognition.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleSlowDown&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction initiates the vehicle to slow down in a given interval. The request should be handled by traffic simulators. The name &amp;lsquo;SlowDown&amp;rsquo; is inherited by Sumo and a little bit misleading, the speed can also be increased.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleSpeedChange&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction sets the current speed of the given vehicle. This should be handled by traffic simulators&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleStop&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction requests the given vehicle to stop at the given road position, it should be handled by traffic simulators.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;traffic&#34;&gt;traffic&lt;/h2&gt;
&lt;p&gt;Interactions in this package are focused around traffic management and communication with traffic simulators.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Interaction name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sent by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;CellularHandoverUpdates&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is used by the cell ambassador to communicate handovers.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;cell&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;InductionLoopDetectorSubscription&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction subscribes a unit to the data of an induction loop detector, usually this will be TMCs. In order to retrieve the data, traffic simulators have to be told to omit the subscribed data.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;LaneAreaDetectorSubscription&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction subscribes a unit to the data of a lane area detector, usually this will be TMCs. In order to retrieve the data, traffic simulators have to be told to omit the subscribed data.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;LanePropertyChange&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction contains lane properties to be changed. Concretely, it sets a list of allowed and disallowed vehicle classes per lane and a new maximum speed limit that shall be changed. The changed lane properties have to be omitted to the traffic simulator to be handled.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;TrafficDetectorUpdates&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This extension of {@link Interaction} combines updates of lane area and induction loop detectors.  Usually the updates are supplied by the traffic simulator and will be filtered by applications subscribed to them.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Sumo&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;TrafficLightStateChange&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is intended to be used to forward a request to change the state of a simulated traffic light. This interaction can be used to implement different controlling strategies for traffic lights.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;TrafficLightUpdates&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is a container for traffic light updates. It is sent by the SumoAmbassador to inform simulation units about updated traffic light states.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Sumo&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleUpdates&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is used to update the position of some or all vehicles of the simulation. It consists of three lists, containing newly added vehicles, vehicles which were updated since the last simulation step, and vehicles which have been removed from the traffic simulation.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Sumo&lt;/code&gt;,&lt;br&gt;&lt;code&gt;Phabmacs&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleTypesInitialization&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;This interaction is required for each simulation.&lt;/strong&gt; It contains predefined vehicle types. Other ambassadors may cache this interaction in order to have access on vehicle types, which are later identified by their identifier.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Mapping&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleRoutesInitialization&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;This interaction is required for each simulation.&lt;/strong&gt; It contains all routes vehicles will take during the simulation. Other ambassadors may cache this interaction in order to have access on the routes, which are later identified by their identifier.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;electricity&#34;&gt;electricity&lt;/h2&gt;
&lt;p&gt;All interactions contained in this package are related to electric vehicles and the surrounding infrastructure.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Interaction name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sent by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ChargingDenialResponse&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is sent out by the charging station ambassador to inform the application simulator (the vehicles) when a charging station is already in use. e.g. a vehicle wants to start charging on an engaged charging station -&amp;gt; ChargingStartDenial.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ChargingStation&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ChargingStartResponse&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is intended to be used to forward a started charging process at a ChargingSpot to the RTI.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ChargingStation&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ChargingStationUpdates&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This extension interaction is intended to be used to forward the updated state of a ChargingStation to the RTI.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ChargingStation&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ChargingStopResponse&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is intended to be used to forward a stopped charging process at a charging station to the RTI.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ChargingStation&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleChargingStartRequest&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is intended to be used to forward a request from a vehicle to &lt;strong&gt;start&lt;/strong&gt; charging its battery at a charging station to the RTI.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleChargingStopRequest&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is intended to be used to forward a request from a vehicle to &lt;strong&gt;stop&lt;/strong&gt; charging its battery at a charging station to the RTI.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleElectricityUpdates&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is used to inform the applications of simulation units about changed electric information, send out by the battery ambassador.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Battery&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;environment&#34;&gt;environment&lt;/h2&gt;
&lt;p&gt;The interactions in this package are used for handling the communication about environment sensors.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Interaction name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sent by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;EnvironmentSensorActivation&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is intended to be used to signal interest in sensor information for a specific simulation unit.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;EnvironmentSensorUpdates&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is intended to be used to exchange sensor data.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;EventServer&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;GlobalEnvironmentUpdates&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This extension of interaction contains a list of current environment events and their locations. Those events can than be used to react upon a changing environment.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;EventServer&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;trafficsigns&#34;&gt;trafficsigns&lt;/h2&gt;
&lt;p&gt;Interactions in this package are used to communicate changes in variable traffic signs, e.g. changing the speed limit.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Interaction name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sent by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;AbstractTrafficSignChange&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction can be sent to traffic sign ambassador in order to change a variable traffic sign. All interaction-classes, that are concerned with changing traffic signs extend this class.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;TrafficSignLaneAssignmentChange&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction can be sent to traffic sign ambassador in order to change a variable lane assignment sign.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;TrafficSignSpeedLimitChange&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction can be sent to traffic sign ambassador in order to change a variable speed sign.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleSeenTrafficSingsUpdate&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction stores a map of all traffic signs which are in sight distance of a specific vehicle and a map of all  traffic signs which became invalid for that vehicle.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;TrafficSign&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;application&#34;&gt;application&lt;/h2&gt;
&lt;p&gt;Interactions in this package are used for applications. They are used to communicate custom information/data via the RTI.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Interaction name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sent by&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ApplicationInteraction&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is intended to be used in custom applications, it can be extended for simulation units to react upon different influences and can be used for intercommunication between applications.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ItefLogging&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is used to exchange log-tuples for the ITEF (Integrated Testing and Evaluation Framework).&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;SumoTraciRequest&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction is used to send a byte array message to SUMO TraCI. The request will be handled by TraCI and trigger a SumoTraciResponse.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;SumoTraciResponse&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This interaction holds the TraCI response for a SumoTraciRequest. It is sent by the SumoAmbassador and will usually be handled by the Application that sent the request.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Sumo&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Additional Scenario Configuration</title>
      <link>https://www.eclipse.dev/mosaic/docs/scenarios/scenario_configuration/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/scenarios/scenario_configuration/</guid>
      <description>&lt;p&gt;This page aims to give you a brief overview of additional simulators and visualizers that can be used with Eclipse MOSAIC.
We will continue with the tutorial-style explanations following up on the Steglitz-example from the






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/create_a_new_scenario/&#34;&gt;previous page&lt;/a&gt;. For more detailed explanations of the configurations have a
look at 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/&#34;&gt;the overview&lt;/a&gt;.&lt;br&gt;
If you already played with the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/tutorials/barnim_basic/&#34;&gt;Barnim&lt;/a&gt;-tutorial, you probably noticed that it contains far
more folders in the scenario structure compared to the Steglitz example. Those additional directories contain
configurations for various simulators.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ Barnim
   ├─ application
   ├─ cell
   ├─ environment
   ├─ mapping
   ├─ ns3
   ├─ output
   ├─ sns
   ├─ sumo
   └─ scenario_config.json .................. General configuration of the simulation scenario
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;let-the-cars-loose&#34;&gt;Let the cars loose&lt;/h2&gt;
&lt;p&gt;As a starting point we&amp;rsquo;ll look at the scenario that we created using this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;java -jar scenario-convert.jar --osm2mosaic -i steglitz.osm --generate-routes
--route-begin-latlon 52.4551693,13.3193474 --route-end-latlon 52.4643101,13.3206834 --number-of-routes 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&amp;rsquo;ll end up with a folder looking like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ steglitz
   ├─ application
   |  └─ steglitz.db
   ├─ mapping
   |  └─ mapping_config.json
   ├─ sumo
   |  ├─ steglitz.net.xml
   |  └─ steglitz.sumocfg
   └─ scenario_config.json .................. General configuration of the simulation scenario
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have a look in the 





  
  

    

    
    

    
    
      
        
          
            
            
            
          
        
      
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/files/steglitz_mapping_config.json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mapping_config.json&lt;/a&gt;,
you can see that the scenario-convert script automatically assigns cars to the three routes created. You can use this
file as a blueprint for your own scenario, have a look 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/#applications-and-mapping&#34;&gt;here&lt;/a&gt;
to get more details on possible adaptions.&lt;br&gt;
Below is a short video of the scenario displayed in the SUMO-GUI. We marked the three different routes the cars
follow.&lt;/p&gt;












  


&lt;video controls &gt;
  &lt;source src=&#34;../images/steglitz_routes.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;h2 id=&#34;communication-simulators-cell-ns3-omnetpp-sns&#34;&gt;Communication Simulators (cell, ns3, omnetpp, sns)&lt;/h2&gt;
&lt;p&gt;We won&amp;rsquo;t implement any functionality for the steglitz example here but rather have a look at the






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/tutorials/barnim_basic/&#34;&gt;Barnim&lt;/a&gt;-tutorial. In the &lt;code&gt;scenario_config.json&lt;/code&gt; of the Barnim scenario you can see where the
communication simulators are activated:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;federates&amp;quot;: {
    &amp;quot;cell&amp;quot;: false,
    &amp;quot;omnetpp&amp;quot;: false,
    &amp;quot;ns3&amp;quot;: false,
    &amp;quot;sns&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/tutorials/&#34;&gt;tutorials&lt;/a&gt; and 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/tutorials/additional_examples/&#34;&gt;additional examples&lt;/a&gt; demonstrate use cases for
communication usages and you should have a look at them if you are uncertain where to start. Furthermore we
recommend copying the configuration-files for the simulator you are going to use from the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/tutorials/barnim_basic/&#34;&gt;Barnim scenario&lt;/a&gt;. It
contains the most complete configurations and is well maintained.&lt;br&gt;
If you are an expert with one of the external network simulators (





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_ns3/&#34;&gt;ns3&lt;/a&gt;,






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_omnetpp/&#34;&gt;OMNeT++&lt;/a&gt;) the Barnim scenario will also give
you an overview on how to configure those.&lt;/p&gt;
&lt;h2 id=&#34;other-simulators&#34;&gt;Other Simulators&lt;/h2&gt;
&lt;p&gt;In order to employ other simulators for the scenario, make sure to have it enabled in the &lt;code&gt;scenario_config.json&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;environment-simulator&#34;&gt;Environment Simulator&lt;/h3&gt;
&lt;p&gt;The Environment Simulator can be used to emit events to vehicles inside predefined borders. In the Barnim scenario
the Environment Simulator is used to simulate an icy area, which is then noticed by the sensors of equipped vehicles.&lt;br&gt;
Every defined event requires a type, a defined geographical area (e.g. circular, rectangular), the strength and a time frame. Have a look
at the 





  
  

    

    
    

    
    
      
        
          
            
            
            
          
        
      
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/files/eventserver_config.json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;environment_config.json&lt;/a&gt; to see how this can be configured.&lt;/p&gt;
&lt;h3 id=&#34;battery-simulator&#34;&gt;Battery Simulator&lt;/h3&gt;
&lt;p&gt;The Battery Simulator allows to simulate discharging and recuperation of electric vehicles, and in connection with the
Charging Station Simulator also re-charging. It offers a lot of customization, as you can
dynamically load your own battery, vehicle and environment models. Have a look a the 





  
  

    

    
    

    
    
      
        
          
            
            
            
          
        
      
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/files/battery_config.json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;battery_config.json&lt;/a&gt;,
taken from the Barnim scenario.&lt;/p&gt;
&lt;h3 id=&#34;charging-station-simulator&#34;&gt;Charging Station Simulator&lt;/h3&gt;
&lt;p&gt;The Charging Station Simulator extends the modeling possibilities of the Battery Simulator for re-charging.
Since Charging Stations are also application units in the Application Simulator, most of the configuration and modeling is
provided by mapping a possible application to the charging station.
Accordingly, the 





  
  

    

    
    

    
    
      
        
          
            
            
            
          
        
      
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/files/charging_config.json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;charging_config.json&lt;/a&gt; covers, with the charging station range, merely one parameter.&lt;/p&gt;
&lt;h2 id=&#34;output&#34;&gt;Output&lt;/h2&gt;
&lt;p&gt;There are various options to generate output results of your simulations (see the






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/visualization/filevis/&#34;&gt;Visualization chapter&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The first step is to create a file called &lt;code&gt;output_config.xml&lt;/code&gt; in a new directory called &lt;code&gt;output&lt;/code&gt;.
If you used the scenario-convert tool the file should be generated automatically.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ steglitz
   ├─ application
   |  └─ steglitz.db
   ├─ mapping
   |  └─ mapping_config.json
   ├─ output
   |  └─ output_config.xml
   ├─ sumo
   |  ├─ steglitz.net.xml
   |  └─ steglitz.sumocfg
   └─ scenario_config.json .................. General configuration of the simulation scenario
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example configuration for output generation can be taken from the example scenarios from the tutorials section.&lt;/p&gt;
&lt;p&gt;Finally, make sure the visualization federate is activated in the &lt;code&gt;scenario_config.json&lt;/code&gt;.&lt;/p&gt;
&lt;!--
```xml
&lt;!-- Visualization -- &gt;
&lt;federate id=&#34;output&#34; active=&#34;true&#34;/&gt;
```

Now we have to configure the statistics visualizer itself. This [visualizer_config.xml](/docs/scenarios/files/steglitz_visualizer_config.xml) contains the basic
configuration in order to calculate the average travel times for the vehicles. If you want to make adaptions, please
refer to [statistics visualizer](/docs/visualization/statistics).  
Go ahead and run the simulation one more time. Afterwards the log-directory should contain a file called 
`AverageVehicleTravelTime.csv` in a directory called `StatisticsVisualizer`:
```csv
group;group-value;total;
Car;186.369;336;
```
This tells us that there was a total amount of 336 vehicles of the type `Car` in the simulation, which traveled
for 186.369  seconds on average.
--&gt;
</description>
    </item>
    
    <item>
      <title>Statistics Output</title>
      <link>https://www.eclipse.dev/mosaic/docs/visualization/statistics/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/visualization/statistics/</guid>
      <description>&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;The &lt;strong&gt;Statistics Output Generator&lt;/strong&gt; is part of &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Statistics Output is another output generating tool to easily measure basic simulation outcomes.
You will be able to obtain short or detailed results of the simulation, e.g. travel times or the average speeds
of groups of vehicles, or the average flow on induction loops.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The main configuration file for all output generators is located at &lt;code&gt;&amp;lt;scenarioName&amp;gt;/output/output_config.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to use the Statistics Output, the attribute &lt;code&gt;enabled&lt;/code&gt; of the root element &lt;code&gt;output&lt;/code&gt; must be
set to &amp;ldquo;true&amp;rdquo;, as shown in the following listing.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;output id=&amp;quot;statistics&amp;quot; enabled=&amp;quot;true&amp;quot; loader=&amp;quot;com.dcaiti.mosaic.fed.visualizer.StatisticsVisualizerConfig&amp;quot;&amp;gt;
	[..]
&amp;lt;/output&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Configuration header for Statistics Output&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;specification&#34;&gt;Specification&lt;/h2&gt;
&lt;p&gt;In this section, we take a closer look at the Statistics Output by using examples and demonstrations. For
each type of retrieving data we create a &lt;code&gt;&amp;lt;statistic&amp;gt;&amp;lt;/statistic&amp;gt;&lt;/code&gt; block. Inside the block we define
one certain data type we want to retrieve in a &lt;source&gt; element. If you want to retrieve different data
types, just create another &lt;code&gt;&amp;lt;statistic&amp;gt;&lt;/code&gt; block for each of them.&lt;/p&gt;
&lt;p&gt;You can also set the wanted file name in the attribute filename of the statistic element. If the
attribute has not been given, each &lt;code&gt;&amp;lt;statistic&amp;gt;&lt;/code&gt; block will get the name accordingly to the order number,
for example &lt;code&gt;1. StatisticsVisualizer-Block.csv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the output attribute two options (&lt;code&gt;short&lt;/code&gt;|&lt;code&gt;verbose&lt;/code&gt;) can be selected. The short option provides us
a compact log file with information about only the highest level of the retrieved data (e.g. aggregate
values of grouped vehicles) in contrast to verbose option which also provides informations about every
individual vehicle in each group.&lt;/p&gt;
&lt;p&gt;For a successful start, the element source must be placed in the first position in the &lt;code&gt;statistic&lt;/code&gt; children
element list. Different options of possible data types, one of which must be specified in the source
element can be seen below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;statistic filename=&amp;quot;ChooseItYourself&amp;quot; output=&amp;quot;short&amp;quot;&amp;gt;
	&amp;lt;source&amp;gt;NameOfSource&amp;lt;/source&amp;gt;
&amp;lt;/statistic&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Source options of Statistics Output&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;application&#34;&gt;Application&lt;/h2&gt;
&lt;p&gt;This section will demonstrate the basic idea and usage of the Statistics Output depending on the
individual requirements. Next to retrieving raw data, the Statistics Output has further features for
processing of the obtained data.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt;: Data to obtain, choose between:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VehicleSpeeds&lt;/code&gt; - Obtain the speeds of the vehicles of each simulation step.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VehicleStops&lt;/code&gt; - The total number of stops during the journey of each vehicle.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VehicleTravelTimes&lt;/code&gt; - The total travel time in s of the vehicles.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VehicleDelayTimes&lt;/code&gt; - The deviation of the travel time compared to the fastest travel time possible for the vehicles (in s).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VehicleTravelledDistances&lt;/code&gt; - The travelled distance of the vehicles in m.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VehicleFuelConsumptions&lt;/code&gt; - The fuel consumptions of the vehicles in l per km.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VehicleHeadways&lt;/code&gt; - Obtain the headway towards the leading vehicle of each vehicle for each simulation step. To obtain this value, an application has to be deployed on the vehicles which activates the front distance sensor.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DetectorFlow&lt;/code&gt; - The flows of each subscribed induction loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;For using the detector flow type, inductions loops need to be configured in the SUMO and mapping configuration files (e.g. Highway tutorial).&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;group-by&lt;/code&gt;: The vehicles will be grouped by its vehicle type name (&lt;code&gt;VehicleType&lt;/code&gt;), group they belong
to (&lt;code&gt;VehicleGroup&lt;/code&gt;), or obtained data value (e.g. &lt;code&gt;Interval:200&lt;/code&gt; categorizes values into groups of
size 200).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;aggregation&lt;/code&gt;: &lt;code&gt;Average&lt;/code&gt; | &lt;code&gt;Harmonic&lt;/code&gt; aggregation of the obtained values. An attribute &lt;code&gt;deviation&lt;/code&gt;
can be set to true or false (it’s false if the attribute is not given). This attribute can be used for
grouped values to get the deviation of each value from the aggregated group value or to get a
standard deviation based on biased sample variance for groups (in the short output version).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;filter&lt;/code&gt;: Filtering with the attribute &lt;code&gt;filterType&lt;/code&gt; (possible values are &lt;code&gt;keep&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filtering by required value slots with two options to specify them: &lt;code&gt;MoreThan:Value&lt;/code&gt; or &lt;code&gt;LessThan:Value&lt;/code&gt; (e.g. &lt;code&gt;MoreThan:5&lt;/code&gt; to collect values which are bigger than 5 only)&lt;/li&gt;
&lt;li&gt;Filtering by vehicle type. &lt;code&gt;VehicleType:Type&lt;/code&gt; (e.g. &lt;code&gt;VehicleType:Car&lt;/code&gt; to collect values only of vehicles of type &amp;ldquo;Car&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Filtering by time. &lt;code&gt;Time:From-To&lt;/code&gt; (e.g. &lt;code&gt;Time:0-100&lt;/code&gt; to collect values only of the first 100s of simulation time)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following example will show an example of how you can specify the Statictics Output according to
your desired criteria. VehicleTravelTimes are the data we want to retrieve from vehicles and we want
to group vehicles by the abstract group we can define in mapping configuration file (see e.g. Barnim
scenario) and then calculate the average vehicle travel time value for each of these groups.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;output id=&amp;quot;statistics&amp;quot; enabled=&amp;quot;true&amp;quot; loader=&amp;quot;com.dcaiti.mosaic.fed.visualizer.StatisticsVisualizerConfig&amp;quot;&amp;gt;
	&amp;lt;statistic filename=&amp;quot;AverageVehicleTravelTimes&amp;quot; output=&amp;quot;short&amp;quot;&amp;gt;
		&amp;lt;source&amp;gt;VehicleTravelTimes&amp;lt;/source&amp;gt;
		&amp;lt;group-by&amp;gt;VehicleGroup&amp;lt;/group-by&amp;gt;
		&amp;lt;aggregation&amp;gt;Average&amp;lt;/aggregation&amp;gt;
	&amp;lt;/statistic&amp;gt;
&amp;lt;/output&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Getting the Average time by vehicle class&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can also combine filters if you want to get a certain interval with upper and lower boundaries. With
the following input instruction, only vehicles with the obtained data values between 250 and 500 will be
left after filtering.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;filter filterType=&amp;quot;keep&amp;quot;&amp;gt;LessThan:500&amp;lt;/filter&amp;gt;
&amp;lt;filter filterType=&amp;quot;remove&amp;quot;&amp;gt;LessThan:250&amp;lt;/filter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;An example for filtering&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Please notice that some sources are being not only obtained in each simulation step but also collected for
further processing as separate values for each of these steps (like &lt;code&gt;VehicleSpeeds&lt;/code&gt;, &lt;code&gt;VehicleHeadways&lt;/code&gt;).
These data types need to be aggregated to one value per vehicle if you want to group them by value or
filter them.&lt;/p&gt;
&lt;p&gt;For demonstration, the Statistics Output is configured for the scenario Barnim and calculates the
average travel times of the vehicles and additionally groups them. As a result, the simulation produces
the following CSV file in the log directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;Group;Value;Total;
AdHoc;399.14;24;
Cellular;463.87;12;
Unequipped;459.18;84;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;The AverageVehicleTravelTime.csv file produced by the Statistics Output in the Barnim scenario&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.eclipse.dev/mosaic/group/openmobility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/group/openmobility/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Unit Operating System</title>
      <link>https://www.eclipse.dev/mosaic/docs/develop_applications/operating_system/</link>
      <pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/develop_applications/operating_system/</guid>
      <description>&lt;p&gt;In order to define the type of unit your application can run on, you need to speficy the operating system by choosing one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VehicleOperatingSystem&lt;/code&gt; - for applications mapped to normal vehicles.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ElectricVehicleOperatingSystem&lt;/code&gt; - for applications for vehicles with electro mobility features.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RoadSideUnitOperatingSystem&lt;/code&gt; - for applications mapped to RSUs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TrafficLightOperatingSystem&lt;/code&gt; - for applications mapped to traffic lights.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TrafficManagementCenterOperatingSystem&lt;/code&gt; - for applications mapped to TMCs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ChargingStationOperatingSystem&lt;/code&gt; - for applications mapped to charging stations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyVehicleApplication extends AbstractApplication&amp;lt;VehicleOperatingSystem&amp;gt; {
  ...    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyRsuApplication extends AbstractApplication&amp;lt;RoadSideUnitOperatingSystem&amp;gt; {
  ...    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;&lt;em&gt;For more information see package:&lt;/em&gt; &lt;code&gt;org.eclipse.mosaic.fed.application.app.api.os.*&lt;/code&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;using-the-operating-system&#34;&gt;Using the Operating System&lt;/h2&gt;
&lt;p&gt;Each application has access to the operating system of its unit. Depending on the type of unit, the operating system provides different methods. For example,
an application which is mapped on vehicles, has access to the &lt;code&gt;VehicleOperatingSystem&lt;/code&gt; by calling &lt;code&gt;this.getOperatingSystem()&lt;/code&gt; (or &lt;code&gt;this.getOs()&lt;/code&gt; to keep it short). The following examples show a bit
of the capabilities the &lt;code&gt;VehicleOperatingSystem&lt;/code&gt; provides:&lt;/p&gt;
&lt;p&gt;Get the current simulation time (in nanoseconds):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;long time = this.getOs().getSimulationTime();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Return the name of the unit (e.g. &amp;ldquo;veh_0&amp;rdquo;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String nameOfUnit = this.getOs().getId();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Get access to vehicle data, such as speed, position, heading, and the like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;double speed = this.getOs().getVehicleData().getSpeed();
GeoPoint position = this.getOs().getVehicleData().getPosition();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change parameters of the vehicle during the simulation, such as its maximum speed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;this.getOs().requestVehicleParametersUpdate()
        .changeMaxSpeed(10) // m/s
        .changeMaxAcceleration(2.4)
        .apply();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Get the current lane index of the vehicle and change lane to left (within 5000 ms):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;int laneIndex = this.getOs().getRoadPosition().getLaneIndex();
int newLaneIndex = Math.max(0, laneIndex - 1);
this.getOs().changeLane(newLaneIndex, 5000);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sending a V2X message via ITS-G5 singlehop broadcast:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MessageRouting routing = this.getOs().getAdHocModule().createMessageRouting().topoBroadCast();
V2xMessage message = new MyV2xMessage(routing);
this.getOs().getAdHocModule().sendV2xMessage(message);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Park the vehicle in 200 meters at the right side of the road for 3 minutes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;double distance = 200;
double duration = 3 * 60 * 1000;
IRoadPosition stopPosition = RoadPositionFactory.createAlongRoute(
        getOs().getNavigationModule().getRoadPosition(),
        getOs().getNavigationModule().getCurrentRoute(),
        0,
        distance
);
this.getOs().stop(distance, duration, Stop.StopMode.PARK);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;learn-more-about-operating-system-modules&#34;&gt;Learn More About Operating System Modules&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/navigation/&#34;&gt;Navigation Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/communication/&#34;&gt;Communication Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/perception/&#34;&gt;Perception Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Run Simulation Series</title>
      <link>https://www.eclipse.dev/mosaic/docs/scenarios/run_simulation_series/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/scenarios/run_simulation_series/</guid>
      <description>&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;The &lt;strong&gt;Simulation Runner&lt;/strong&gt; is part of &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This chapter explains how to efficiently run a simulation series of a scenario using the Simulation Runner.&lt;/p&gt;
&lt;p&gt;The Simulation Runner is a tool for automatic simulation parametrization and execution. It provides a comfortable way to configure the execution of multiple simulations, e.g. of simulation series including several runs where only few parameters are changed in each run. With the Simulation Runner, a simulation series can be defined, for example, where the V2X penetration rate is changed in each simulation run. As a result, all  Eclipse MOSAIC simulation runs are started automatically according to the defined parameters.&lt;/p&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;The Simulation Runner is started as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./simulation-runner.sh -c /scenarios/&amp;lt;scenario_name&amp;gt;/simrunner_config.xml -u &amp;lt;user-id&amp;gt; -p &amp;lt;number_of_parallel_simulations&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;On Windows use &lt;code&gt;simulation-runner.bat&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The configuration file &lt;code&gt;/scenarios/&amp;lt;scenario_name&amp;gt;/mosaic/simrunner_config.xml&lt;/code&gt; contains the parameterization information.&lt;/p&gt;
&lt;p&gt;With the option &lt;code&gt;-e&lt;/code&gt; the Eclipse MOSAIC executable can be passed. Passing the Eclipse MOSAIC executable is optional if it is located in the mosaic folder or given in the &lt;code&gt;simrunner_config.xml&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The following example shows a complete configuration. Using this configuration, the Simulation Runner would try to run a scenario called Barnim while adapting the mapping, the configuration file of SNS, and Eclipse MOSAIC configuration files. The actual simulation is triggered by generating an adapted scenario folder and calling the same executable the user would normally trigger himself.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;configuration
  xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
  xsi:noNamespaceSchemaLocation=&amp;quot;http://www.dcaiti.tu-berlin.de/research/simulation/download/get/scenarios/scenarioname/vsimrti/simrun_config.xsd&amp;quot;&amp;gt;

  &amp;lt;!-- basic configuration --&amp;gt;
  &amp;lt;mosaic 
      location=&amp;quot;/path/to/mosaic_folder&amp;quot; 
      executable=&amp;quot;mosaic.sh&amp;quot; 
      parallelSimulations=&amp;quot;2&amp;quot;
  &amp;lt;scenario 
      name=&amp;quot;Barnim&amp;quot; 
      config=&amp;quot;scenarios/Barnim/scenario_config.json&amp;quot; 
      persistent=&amp;quot;false&amp;quot; 
      progressLogger=&amp;quot;false&amp;quot;&amp;gt;
      &amp;lt;!--argument&amp;gt;-o TRACE&amp;lt;/argument--&amp;gt;
      &amp;lt;!--argument&amp;gt;-w 0&amp;lt;/argument--&amp;gt;
  &amp;lt;/scenario&amp;gt;
  
  &amp;lt;!-- define connected values for controlled changes --&amp;gt;
  &amp;lt;dimension name=&amp;quot;PenetrationRates&amp;quot;&amp;gt;
     &amp;lt;parameter name=&amp;quot;V2XVehiclePercentage&amp;quot; 
         file=&amp;quot;mapping/mapping_config.json&amp;quot; 
         fileFormat=&amp;quot;json&amp;quot; item=&amp;quot;vehicles[0].types[0].weight&amp;quot; 
         type=&amp;quot;ValueList&amp;quot;&amp;gt;
         &amp;lt;value&amp;gt;0.0&amp;lt;/value&amp;gt;
         &amp;lt;value&amp;gt;0.5&amp;lt;/value&amp;gt;
         &amp;lt;value&amp;gt;0.75&amp;lt;/value&amp;gt;
     &amp;lt;/parameter&amp;gt;
     &amp;lt;parameter name=&amp;quot;ClassicVehiclePercentage&amp;quot; 
         file=&amp;quot;mapping/mapping_config.json&amp;quot; 
         fileFormat=&amp;quot;json&amp;quot; 
         item=&amp;quot;vehicles[0].types[1].weight&amp;quot; type=&amp;quot;ValueList&amp;quot;&amp;gt;
         &amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;
         &amp;lt;value&amp;gt;0.5&amp;lt;/value&amp;gt;
         &amp;lt;value&amp;gt;0.25&amp;lt;/value&amp;gt;
     &amp;lt;/parameter&amp;gt;
     &amp;lt;parameter name=&amp;quot;Simulationtime&amp;quot; 
         file=&amp;quot;scenario_config.json&amp;quot; 
         fileFormat=&amp;quot;json&amp;quot; 
         item=&amp;quot;simulation.duration&amp;quot;
         type=&amp;quot;ValueList&amp;quot;&amp;gt;
         &amp;lt;value&amp;gt;100&amp;lt;/value&amp;gt;
         &amp;lt;value&amp;gt;100&amp;lt;/value&amp;gt;
         &amp;lt;value&amp;gt;100&amp;lt;/value&amp;gt;
     &amp;lt;/parameter&amp;gt;
  &amp;lt;/dimension&amp;gt;
  
  &amp;lt;!-- define values for automatically permuted simulations --&amp;gt;
  &amp;lt;parameter name=&amp;quot;SinglehopRadius&amp;quot; 
      file=&amp;quot;sns/sns_config.json&amp;quot; 
      fileFormat=&amp;quot;json&amp;quot; 
      item=&amp;quot;singlehopRadius&amp;quot; 
      type=&amp;quot;ValueList&amp;quot;&amp;gt;
      &amp;lt;value&amp;gt;500&amp;lt;/value&amp;gt;
      &amp;lt;value&amp;gt;600&amp;lt;/value&amp;gt;
  &amp;lt;/parameter&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration contains three distinct parts of configuration. The system specific definition, the scenario definition and the parametrization. While the first two parts will be explained as part of this section, the parametrization will be explained in it’s own section.&lt;/p&gt;
&lt;h3 id=&#34;system-specific-definition&#34;&gt;System Specific Definition&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;mosaic 
   location=&amp;quot;/path/to/mosaic_folder&amp;quot;
   executable=&amp;quot;mosaic.sh&amp;quot; 
   parallelSimulations=&amp;quot;2&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The system specific part of the configuration above is the only part of the configuration that can be overwritten using a second configuration file. It contains the following attributes:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Attribute&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;location&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Location of the Eclipse MOSAIC installation to use (can be relative or absolute). This attribute can be omitted in case the mosaic executable is in the same location as the simulation-runner executable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;executable&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The provided executable is used to start the simulation. This value is optional and will automatically be set to the default *.bat or *.sh file when omitted. (relative path to &lt;code&gt;location&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;parallelSimulations&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines how many simulations are started in parallel to speed up things. Be aware that you should only use this if you have multiple cores available. This might also coincide with the threads option in the Eclipse MOSAIC configuration. The default is &lt;code&gt;1&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;scenario-definition&#34;&gt;Scenario Definition&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;scenario 
   name=&amp;quot;Barnim&amp;quot; 
   config=&amp;quot;scenarios/Barnim/scenario_config.json&amp;quot; 
   persistent=&amp;quot;false&amp;quot; 
   progressLogger=&amp;quot;false&amp;quot;&amp;gt;
   &amp;lt;!--argument&amp;gt;-o TRACE&amp;lt;/argument--&amp;gt;
   &amp;lt;!--argument&amp;gt;-w 0&amp;lt;/argument--&amp;gt;
&amp;lt;/scenario&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The scenario definition above contains everything needed to identify the scenario to execute along with parameters that need to be passed to the Eclipse MOSAIC executable. It contains the following attributes:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Attribute&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The name of the simulation to run. This is expected to be the same as the scenario&amp;rsquo;s folder name and is used to automatically generate the path pointing to the scenario&amp;rsquo;s &lt;code&gt;scenario_config.json&lt;/code&gt; in a default case. It can be omitted if the config option is set.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;config&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This is an optional value containing the concrete path to the scenario&amp;rsquo;s &lt;code&gt;scenario_config.json&lt;/code&gt;. This can be used if the scenario is not placed in the default scenarios folder (which is discouraged) and overwrites the path generated by the name attribute. Either name or config have to be defined! (path relative to &lt;code&gt;location&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;persistent&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines if the generated files in the Simulation Runner (scenarios with adapted configurations), etc (hohsts.json, logback.xml, runtime.json) and tmp directories will be kept after simulation (value &lt;code&gt;true&lt;/code&gt;) or deleted (value &lt;code&gt;false&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;progressLogger&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Writes summary of Simulation Runner execution to std out (value &lt;code&gt;true&lt;/code&gt;), default is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;stdoutLogger&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Writes log messages from the Eclipse MOSAIC executable to stdout when (value &lt;code&gt;true&lt;/code&gt;), default is &lt;code&gt;false&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The configuration can also contain a number of additional arguments that are passed to the executable without any changes, separated by spaces.&lt;/p&gt;
&lt;h2 id=&#34;parametrization&#34;&gt;Parametrization&lt;/h2&gt;
&lt;p&gt;The heart of this tool is the parametrization of simulations. Using this, one can define values in the default configuration that are adapted between simulation runs. How many simulation runs are performed is defined by the number of changes configured, enriched with the information about simulation repetitions.
For the example in listing &amp;lsquo;Example Configuration&amp;rsquo; it is expected that the mapping file to be changed has one &lt;code&gt;vehicles&lt;/code&gt; definition spawning multiple cars with a weighted &lt;code&gt;type&lt;/code&gt; distribution defining first the equipped and then the unequipped vehicles.&lt;/p&gt;
&lt;h3 id=&#34;parameters&#34;&gt;Parameters&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;parameter name=&amp;quot;V2XVehiclePercentage&amp;quot; file=&amp;quot;mapping3/mapping_config.json&amp;quot; fileFormat=&amp;quot;json&amp;quot; item=&amp;quot;vehicles[0].types[0].weight&amp;quot; type=&amp;quot;ValueList&amp;quot;&amp;gt;
  &amp;lt;value&amp;gt;0&amp;lt;/value&amp;gt;
  &amp;lt;value&amp;gt;50&amp;lt;/value&amp;gt;
  &amp;lt;value&amp;gt;75&amp;lt;/value&amp;gt;
&amp;lt;/parameter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each value that should be changed in a run is defined by a &lt;code&gt;parameter&lt;/code&gt; element identified by a &lt;code&gt;name&lt;/code&gt; (see listing above). The base value is the &lt;code&gt;file&lt;/code&gt; which should be changed (relative to the scenario folder). Currently it is needed to define what &lt;code&gt;fileFormat&lt;/code&gt; is expected from that file, which has impact on the syntax of the item definition which denotes what part of this file should be changed (this will be explained in a bit). The final value is the &lt;code&gt;type&lt;/code&gt; which denotes how the value change behaves. The child elements depend on this definition and will also be explained in a bit.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fileFormat&lt;/code&gt; can be one of &lt;code&gt;xml&lt;/code&gt; or &lt;code&gt;json&lt;/code&gt;. The item syntax is as followed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xml&lt;/code&gt;: contains an XPath1 expression&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json&lt;/code&gt;: contains an array-style definition of the target value. The value in the listing above would change line 13 in the listing below. (In the first entry of vehicles the attribute weight of the types first entry).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;prototypes&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;PKW&amp;quot; } ],
  &amp;quot;vehicles&amp;quot;: [
    {
      &amp;quot;startingTime&amp;quot;: 5.0,
      &amp;quot;targetFlow&amp;quot;: 1200,
      &amp;quot;maxNumberVehicles&amp;quot;: 250,
      &amp;quot;route&amp;quot;: &amp;quot;1&amp;quot;,
      &amp;quot;types&amp;quot;: [
        {
          &amp;quot;applications&amp;quot;: [ &amp;quot;com.dcaiti.vsimrti.app.WeatherWarningApp.WeatherWarningApp&amp;quot; ],
          &amp;quot;name&amp;quot;: &amp;quot;PKW&amp;quot;,
          &amp;quot;weight&amp;quot;: 0.2
        },
        {
          &amp;quot;name&amp;quot;: &amp;quot;PKW&amp;quot;,
          &amp;quot;weight&amp;quot;: 0.8
        }
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt; can currently only have two entries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ValueList&lt;/code&gt;: This expects a list of values as child elements of the parameter. Each value will be used for at least one permutation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IntegerGenerator&lt;/code&gt;: This automatically generates integer values to write as values. The generated numbers can be configured by adding these attributes to the parameter element:&lt;br&gt;
– &lt;code&gt;offset&lt;/code&gt;: denoting a minimal number where generation should start (this will be the first value), default is &lt;code&gt;0&lt;/code&gt;.&lt;br&gt;
– &lt;code&gt;step&lt;/code&gt;: denoting the number that will be added to the previous value to generate the new one, default is &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In contrast to &lt;code&gt;ValueList&lt;/code&gt; this can create an infinite number of values.&lt;/p&gt;
&lt;h3 id=&#34;permutation-of-parameters&#34;&gt;Permutation of parameters&lt;/h3&gt;
&lt;p&gt;When multiple such parameter elements are defined, a permutation for each specific value definition is generated. Lets say defined are parameters A and B and each parameter has values a and b. The resulting permutations would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A=a, B=a
A=b, B=a
A=a, B=b
A=b, B=b
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dimensions&#34;&gt;Dimensions&lt;/h3&gt;
&lt;p&gt;Sometimes it is wanted to group some value changes. This can be necessary when changed values need to sum up to a specific value or when specific (named) output files need to be defined. This can be done by enclosing the affected &lt;code&gt;parameters&lt;/code&gt; into a &lt;code&gt;dimension&lt;/code&gt; definition. Doing this the values of each &lt;code&gt;parameter&lt;/code&gt; are connected by their index. For this to work the number of values for each parameter have to be the same. The example in listing &amp;lsquo;Example Configuration&amp;rsquo; utilizes this function to make sure the vehicle percentages sum up to 100. The generated permutations for the dimension enclosed parameters are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;V2XVehiclePercentage=0,  ClassicVehiclePercentage=100
V2XVehiclePercentage=50, ClassicVehiclePercentage=50
V2XVehiclePercentage=75, ClassicVehiclePercentage=25
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When additionally parameters are defined which are not enclosed in the &lt;code&gt;dimension&lt;/code&gt; tag or another dimension tag is defined, then the permutations will be extended even further. The full permutation for listing &amp;lsquo;Example Configuration&amp;rsquo; is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PenetrationRates(V2XVehiclePercentage=0,  ClassicVehiclePercentage=100), SinglehopRadius=500
PenetrationRates(V2XVehiclePercentage=50, ClassicVehiclePercentage=50),  SinglehopRadius=500
PenetrationRates(V2XVehiclePercentage=75, ClassicVehiclePercentage=25),  SinglehopRadius=500
PenetrationRates(V2XVehiclePercentage=0,  ClassicVehiclePercentage=100), SinglehopRadius=600
PenetrationRates(V2XVehiclePercentage=50, ClassicVehiclePercentage=50),  SinglehopRadius=600
PenetrationRates(V2XVehiclePercentage=75, ClassicVehiclePercentage=25),  SinglehopRadius=600
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h2&gt;
&lt;p&gt;These are some side effects to remember when working with this tool.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ports:&lt;/strong&gt; The Simulation Runner supports automatic assigning of free ports for federates. This means that all federates configured in the &lt;code&gt;simrunner_config.xml&lt;/code&gt; will get a free port configured by default. This enables multiple simulations to be run simultaneously as long as the federates are started by Eclipse MOSAIC. If some federates are not started through Eclipse MOSAIC but are already running, this will not work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paths:&lt;/strong&gt; Relative paths of the files to be modified will be expanded with the deployment directory of the current simulation run, as defined in the value &lt;code&gt;location&lt;/code&gt;, to an absolute one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adaptations:&lt;/strong&gt; All values will be modified in copies of the original scenario. The copies will be placed in the Simulation Runner folder in the Eclipse MOSAIC base directory and will be (if not deactivated by configuration) deleted upon completion of the simulation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Application Ambassador - Implementation Details</title>
      <link>https://www.eclipse.dev/mosaic/docs/extending_mosaic/application_ambassador_details/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/extending_mosaic/application_ambassador_details/</guid>
      <description>&lt;p&gt;The Application Simulator is completely implemented as an Eclipse MOSAIC Ambassador in Java. The main class &lt;code&gt;ApplicationAmbassador&lt;/code&gt; is
started by the RTI and creates different components, like the &lt;code&gt;SimulationKernel&lt;/code&gt; singleton or the &lt;code&gt;CentralNavigationComponent&lt;/code&gt;.
Subsequently, it will find all the Java Archive (JAR) files in the &lt;code&gt;application&lt;/code&gt; configuration directory, belonging to the currently started
scenario, and add their classes to the class path. These JARs contain the application classes. Furthermore, the ApplicationAmbassador is
registered as a handle for different Eclipse MOSAIC messages in the configuration file &lt;code&gt;etc/runtime.json&lt;/code&gt; in the Eclipse MOSAIC folder. After
initialization, the Application Simulator will receive these messages from Eclipse MOSAIC when they appear and perform corresponding actions.&lt;/p&gt;
&lt;h3 id=&#34;node-creation&#34;&gt;Node Creation&lt;/h3&gt;















&lt;figure id=&#34;figure-application-simulator-basic-flow--node-creation-classes&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/class_overview.png&#34; data-caption=&#34;Application Simulator basic flow / node creation classes&#34;&gt;


  &lt;img src=&#34;../images/class_overview.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Application Simulator basic flow / node creation classes
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Application classes are only instantiated when a node, carrying that application, is created. This is signaled by messages for node creation
like (&lt;code&gt;AddedVehicle,AddedRsu,AddedTrafficLight&lt;/code&gt;, &amp;hellip;). When the &lt;code&gt;Mapping&lt;/code&gt; ambassador spawns a new node, it will send those messages to the
RTI. The message then contains the fully qualified names of all applications associated with the spawned node, as well as the vehicle type
itself.  Depending on this type, the Application Simulator creates a new &lt;code&gt;SimulationUnit&lt;/code&gt; object (i.e. a subclass of &lt;code&gt;SimulationUnit&lt;/code&gt; like
&lt;code&gt;Vehicle&lt;/code&gt;, &lt;code&gt;RoadSideUnit&lt;/code&gt; or &lt;code&gt;TrafficLight&lt;/code&gt;), representing the new node. This task is served by the &lt;code&gt;UnitSimulatorclass&lt;/code&gt;, which performs
book keeping of all &lt;code&gt;SimulationUnits&lt;/code&gt;. Upon Creation of a node, the &lt;code&gt;UnitSimulator&lt;/code&gt; will schedule an event to start all applications,
belonging to the new node. The required information is saved in a &lt;code&gt;StartApplications&lt;/code&gt; object, which also includes a &lt;code&gt;ApplicationUnit&lt;/code&gt;
object, an abstract representation of a node (a.k.a. unit) having at least one application.&lt;/p&gt;
&lt;p&gt;However, as, for example, SUMO does not simulate vehicles strictly from their creation on, but only since their first movement, Applications
for vehicles cannot be started directly upon an &lt;code&gt;AddedVehicle&lt;/code&gt; message. Instead, every added vehicle will be kept in the &lt;code&gt;addedVehicles&lt;/code&gt;
Map, until a &lt;code&gt;VehicleMovements&lt;/code&gt; message, belonging to that vehicle is processed. The vehicle will then be added by the &lt;code&gt;UnitSimulator&lt;/code&gt;
like any other node.&lt;/p&gt;
&lt;h3 id=&#34;other-messages-and-time-advance&#34;&gt;Other Messages and Time Advance&lt;/h3&gt;
&lt;p&gt;Apart from the ones for node creation, there are many other messages (see 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/extending_mosaic/interactions/&#34;&gt;Interaction&lt;/a&gt;),
signaling events to the Application Simulator. For most of them, an event in the future will be programmed, such that the implied action is
carried out at that simulation time. The processing of the events happens when the RTI calls the &lt;code&gt;advanceTime()&lt;/code&gt; method on the ambassador.
Upon this, Application Simulator will obtain a list of all events up to the new time and let the processor of the event process them. Every
potential event processor implements the &lt;code&gt;EventProcessor&lt;/code&gt; interface. The corresponding method is the &lt;code&gt;advanceTime()&lt;/code&gt; method of
&lt;code&gt;ApplicationAmbassador&lt;/code&gt;, which calls &lt;code&gt;scheduleEvents()&lt;/code&gt; on the event scheduler. Subsequently, some interesting messages and their
handling process is sketched shortly:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Message&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;VehicleUpdates&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Signals that a vehicle has moved.  The &lt;code&gt;Vehicle&lt;/code&gt; object, which is a subclass of &lt;code&gt;SimulationUnit&lt;/code&gt;, that corresponds to the moved vehicle will be updated to contain the new position. The new information is encapsulated in a &lt;code&gt;VehicleInfo&lt;/code&gt; object, containing different vehicle data. To update the data, an event is scheduled at the given time and processed upon time advance. Vehicles not yet added to the simulation (see 





  
  

&lt;a href=&#34;#node-creation&#34;&gt;Node Creation&lt;/a&gt;), are added by calling &lt;code&gt;addVehicleIfNotYetAdded()&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;MessageReception&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This message represents the reception of a V2X-message by a simulated node. The &lt;code&gt;SimulationUnit&lt;/code&gt; with the id saved in the &lt;code&gt;ReceivedV2XMessage&lt;/code&gt; object is scheduled for the processing of the message at the given simulation time. When simulation time reaches the reception time, the &lt;code&gt;SimulationUnit&lt;/code&gt; will obtain the message from the message cache and hand it to all applications that implement the &lt;code&gt;CommunicationApplication&lt;/code&gt; interface in the method &lt;code&gt;SimulationUnit.processReceiveV2XMessage()&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ApplicationInteraction&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;While most other messages are specific to the a &lt;code&gt;SimulationUnit&lt;/code&gt;, that then forwards the event to its applications, the &lt;code&gt;ApplicationSpecificMessage&lt;/code&gt; is directly handed to all applications.  Thereby, the &lt;code&gt;SimulationUnit&lt;/code&gt;, whose applications shall receive the message can be specified. If this is not done, all applications of all units will get the message and have the opportunity to handle it.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Network Simulator OMNeT&#43;&#43;</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_omnetpp/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_omnetpp/</guid>
      <description>&lt;p&gt;&lt;strong&gt;OMNeT++&lt;/strong&gt; is a simulation platform for discrete-event systems. Even though it is primarily targeted at simulating computer networks and
distributed systems, it cannot be used without any extensions for wireless communication. For this kind of simulations, external model frameworks have to be included.&lt;/p&gt;
&lt;p&gt;For the integration to Eclipse MOSAIC the &lt;strong&gt;INET&lt;/strong&gt; framework is selected as it provides all models necessary for simulating
Vehicle-2-X communication in ad-hoc mode (based on IEEE 1609 and IEEE 802.11(p)) and even more.
For more information on the &lt;strong&gt;INET&lt;/strong&gt; extension you should look closer on the 




&lt;a href=&#34;https://inet.omnetpp.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Operating System&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;GNU/Linux (recommended), &lt;em&gt;macOS&lt;/em&gt;, &lt;em&gt;Microsoft Windows (with mingw, WSL, Docker)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Written in&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;C++ and NED language&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;free to use for academic use (GPL-like), commercial license available&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;OMNeT++   




&lt;a href=&#34;https://www.omnetpp.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.omnetpp.org&lt;/a&gt;&lt;br&gt; INET     




&lt;a href=&#34;https://inet.omnetpp.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://inet.omnetpp.org&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Supported version(s)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;OMNeT++ 5.5.1 &lt;br&gt;INET 4.1.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;libprotobuf 3.7.0&lt;br&gt; protoc &lt;br&gt; bison&lt;br&gt; flex&lt;br&gt; gcc &lt;br&gt; python3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;While we recommend GNU/Linux platforms for installing OMNeT++, the official project provides an Windows installation based on mingw.&lt;/p&gt;
&lt;p&gt;Beside mingw for Windows you might consider&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the installation in 





  
  

&lt;a href=&#34;#installation-in-docker-environment&#34;&gt;Docker environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the 




&lt;a href=&#34;https://docs.microsoft.com/windows/wsl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Windows Subsystem for Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the installation of Linux in a virtual machine environment, such as
&lt;a href=&#34;https://www.vmware.com/products/workstation-player.html&#34; target=&#34;_blank&#34;&gt;VMware&lt;/a&gt; or &lt;a href=&#34;https://www.virtualbox.org/&#34; target=&#34;_blank&#34;&gt;VirtualBox&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We prepared an installation script, which manages most of the required work. The script provides two installation types
tailored to the needs of USERs or even DEVELOPERs. With the additional method of using Docker or the purely manual installation,
the following options are possible:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;





  
  

&lt;a href=&#34;#installation-for-users&#34;&gt;USER&lt;/a&gt;&lt;br&gt;(installation script)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This installation type addresses those who only want to use the &lt;strong&gt;OMNeT++&lt;/strong&gt; network simulator for simulations.&lt;br&gt;Network configurations can also be adjusted.&lt;br&gt;&lt;br&gt;If you install the federate with this installation type, &lt;strong&gt;OMNeT++ 5.5.1&lt;/strong&gt; and &lt;strong&gt;INET 4.1.1&lt;/strong&gt; will automatically be installed inside &lt;code&gt;&amp;lt;mosaic&amp;gt;/bin/fed/omnetpp&lt;/code&gt; during the installation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;





  
  

&lt;a href=&#34;#installation-for-developers&#34;&gt;DEVELOPER&lt;/a&gt;&lt;br&gt;(installation script)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The installation for developers addresses those who want to make changes or extend the MOSAIC OMNeT++ Federate.&lt;br&gt;&lt;br&gt;This installation type awaits that &lt;strong&gt;OMNeT++ 5.5.1&lt;/strong&gt; and &lt;strong&gt;INET 4.1.1&lt;/strong&gt; are already installed on your system and&lt;br&gt;- &lt;code&gt;PATH&lt;/code&gt; contains &lt;code&gt;/path/to/omnetpp/bin&lt;/code&gt;&lt;br&gt;- &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; contains &lt;code&gt;/path/to/omnetpp/lib&lt;/code&gt; and &lt;code&gt;/path/to/inet/src&lt;/code&gt;&lt;br&gt;- &lt;code&gt;C_INCLUDE_PATH&lt;/code&gt; contains &lt;code&gt;/path/to/omnetpp/include&lt;/code&gt; and &lt;code&gt;/path/to/inet/src&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;





  
  

&lt;a href=&#34;#installation-in-docker-environment&#34;&gt;Docker&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This installation type addresses those who only want to use the &lt;strong&gt;OMNeT++&lt;/strong&gt; network simulator for simulations.&lt;br&gt;Network configurations can also be adjusted.&lt;br&gt;&lt;br&gt;If you install the federate with this installation type, &lt;strong&gt;OMNeT++ 5.5.1&lt;/strong&gt; and &lt;strong&gt;INET 4.1.1&lt;/strong&gt; will automatically be installed bundled as a Docker image.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;manual installation&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This type addresses developers. You can install and build everything manually without the use of the installer script. See 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/extending_mosaic/omnetpp_details/&#34;&gt;Extending MOSAIC OMNeT++ Federate&lt;/a&gt; for details on federate build process.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;If you already have &lt;strong&gt;OMNeT++ 5.5.1&lt;/strong&gt; and &lt;strong&gt;INET 4.1.1&lt;/strong&gt; installed on your
system, but you simply want to use &lt;strong&gt;OMNeT++&lt;/strong&gt; for simulations with Eclipse MOSAIC without developing further the MOSAIC
OMNeT++ Federate, you may also choose the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_omnetpp/#installation-for-developers&#34;&gt;installation for developers&lt;/a&gt;
to avoid multiple installations of &lt;strong&gt;OMNeT++&lt;/strong&gt; and &lt;strong&gt;INET&lt;/strong&gt; on your system.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Follow the links and download the source code of OMNeT++, INET and the MOSAIC OMNeT++ Federate:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Software&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Version&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;OMNeT++&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5.5.1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;




&lt;a href=&#34;https://github.com/omnetpp/omnetpp/releases/tag/omnetpp-5.5.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/omnetpp/omnetpp/releases/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;INET&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4.1.1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;




&lt;a href=&#34;https://github.com/inet-framework/inet/releases/tag/v4.1.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/inet-framework/inet/releases&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;MOSAIC OMNeT++ Federate&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;23.0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;




&lt;a href=&#34;https://github.com/mosaic-addons/omnetpp-federate/releases/tag/23.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/mosaic-addons/omnetpp-federate/releases&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The installer script is located in the OMNeT++ federate folder&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ mosaic/bin/fed/
   └─ omnetpp
      ├─ Dockerfile.sh ..................... Dockerfile for OMNeT++ federate
      ├─ omnet_installer.sh ................ Installation script for OMNeT++
      └─ rebuild_federate.sh ............... Rebuild script to ease compilation process for Developers
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Available parameters of &lt;code&gt;omnet_installer.sh&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Parameter&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Value&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-t&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--installation-type&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;lt;INSTALLATION_TYPE&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Either &lt;code&gt;USER&lt;/code&gt; or &lt;code&gt;DEVELOPER&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-o&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--omnetpp&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;lt;PATH_TO_OMNET_TGZ&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Provide the archive containing the OMNeT++ source. If not given, the script tries to download an appropriate version.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-i&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--inet&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;lt;PATH_TO_INET_TGZ&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Provide the archive containing the inet source code. If not given, the script tries to download an appropriate version.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-f&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--federate&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;lt;PATH_TO_FEDERATE_ZIP&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Provide the archive containing the OMNeT++-federate and patches for coupling OMNeT++ to Eclipse MOSAIC. If not given, the omnetpp-federate is downloaded by this installation script.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-so&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--skip-omnetpp&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Skip the installation of OMNeT++&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-si&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--skip-inet&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Skip the installation of INET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-q&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--quiet&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Less output and no interaction required&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-j&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;lt;NUMBER_OF_THREADS&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Enables make to use the given number of compilation threads.&lt;br&gt;Per default your systems maximum is selected automatically.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-u&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--uninstall&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Uninstalls the OMNeT++ federate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;-h&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Shows this usage screen&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;installation-for-users&#34;&gt;Installation for Users&lt;/h3&gt;
&lt;p&gt;Run the installation script (this takes a few minutes):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd &amp;lt;mosaic&amp;gt;/bin/fed/omnetpp
chmod +x omnet_installer.sh`
./omnet_install.sh \
    --installation-type USER \
    --omnetpp /path/to/omnetpp-5.5.1-src.tgz \
    --inet /path/to/inet-4.1.1-src.tgz \
    --federate /path/to/omnetpp-federate-23.0.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The parameters &lt;code&gt;--omnetpp&lt;/code&gt;, &lt;code&gt;--inet&lt;/code&gt;, and &lt;code&gt;--federate&lt;/code&gt; are optional. If not given, the respective source code package will be downloaded by the installation script.&lt;br&gt;
The installation script should terminate with &lt;code&gt;SUCESS: The MOSAIC OMNeT++ Federate was successfully installed.&lt;/code&gt; otherwise the installation failed.&lt;/p&gt;
&lt;h3 id=&#34;installation-for-developers&#34;&gt;Installation for Developers&lt;/h3&gt;
&lt;p&gt;Run the installation script (this takes a few minutes):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd &amp;lt;mosaic&amp;gt;/bin/fed/omnetpp
chmod +x omnet_installer.sh`
./omnet_install.sh \
    --installation-type DEVELOPER \
    --federate /path/to/omnetpp-federate-23.0.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the installation type &lt;code&gt;DEVELOPER&lt;/code&gt; the parameter &lt;code&gt;-f&lt;/code&gt; is required. The installation script should terminate with &lt;code&gt;SUCCESS: The MOSAIC OMNeT++ Federate was successfully installed.&lt;/code&gt; otherwise the installation failed.&lt;/p&gt;
&lt;p&gt;Please continue reading 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/extending_mosaic/omnetpp_details/&#34;&gt;here&lt;/a&gt; for more details on setting up a development environment for the OMNeT++ federate.&lt;/p&gt;
&lt;h3 id=&#34;installation-in-docker-environment&#34;&gt;Installation in Docker environment&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;This is an experimental feature. Please refer to our mailing list if you experience any problems.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This guide gives instructions to execute the OMNeT++ federate inside a docker container. If you already installed
OMNeT++ on your machine following the steps before, you can skip this section.&lt;/p&gt;
&lt;p&gt;Docker is a new approach to execute software. More precisely, it &amp;ldquo;wraps software in a complete filesystem
that contains everything it needs to run: code, runtime, system tools, and system libraries&amp;rdquo;. As a result, the
software is executed within a container and its execution does not rely on the environment the container is running in.&lt;/p&gt;
&lt;p&gt;In context of Eclipse MOSAIC, this approach allows to execute OMNeT++ within a docker container. The user does not
need to manually install OMNeT++ and can even run OMNeT++ on Windows hosts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Docker ≥ 1.13 on your machine.&lt;/li&gt;
&lt;li&gt;To get everything to work, please make sure to execute the following steps depending on your operating system:
&lt;ul&gt;
&lt;li&gt;Windows - In the settings, share the drive where Eclipse MOSAIC is installed on. You may need to restart docker in the reset tab.&lt;/li&gt;
&lt;li&gt;Linux - Make sure your user account belongs to the unix-group &lt;code&gt;docker&lt;/code&gt;. You may need to restart your machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Switch to the location of the Dockerfile in &lt;code&gt;&amp;lt;mosaic&amp;gt;/bin/fed/omnetpp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Download &lt;code&gt;inet-4.1.1-src.tgz&lt;/code&gt; and &lt;code&gt;omnetpp-5.5.1-src-linux.tgz&lt;/code&gt; and place them in &lt;code&gt;&amp;lt;mosaic&amp;gt;/bin/fed/omnetpp&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Execute the following command on command line:
&lt;code&gt;docker build -t omnetpp-federate&lt;/code&gt; .
This could take a while to finish.&lt;/li&gt;
&lt;li&gt;Enter the name of the docker image &lt;code&gt;etc/runtime.json&lt;/code&gt; in the &lt;code&gt;omnetpp&lt;/code&gt;-section into the property &lt;code&gt;dockerImage&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;federates&amp;quot;: [
   ...
   {
      &amp;quot;id&amp;quot;: &amp;quot;omnetpp&amp;quot;,
      &amp;quot;dockerImage&amp;quot;: &amp;quot;omnetpp-federate&amp;quot;,
      ...
   },
   ...
]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;If MOSAIC cannot open a connection to the federate, try to add the option &lt;code&gt;-Dmosaic.no-detach=true&lt;/code&gt; to the java call in the mosaic.sh file on Linux, or
&lt;code&gt;-Dmosaic.no-detach=false&lt;/code&gt; in the mosaic.bat file on Windows.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;To use OMNeT++ as network simulator in an Eclipse MOSAIC simulation, open &lt;code&gt;&amp;lt;scenarioName&amp;gt;/scenario_config.json&lt;/code&gt; and enable OMNeT++:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;federates&amp;quot;: {
   ...
   &amp;quot;omnetpp&amp;quot;: true,
   ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, when you run this scenario, Eclipse MOSAIC will automatically start the MOSAIC OMNeT++ Federate.&lt;/p&gt;
&lt;p&gt;The main configuration of the MOSAIC OMNeT++ Federate is done within the configuration files &lt;code&gt;omnetpp.ini&lt;/code&gt; and &lt;code&gt;omnetpp_config.json&lt;/code&gt; in the scenario:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   └─ omnetpp
      ├─ omnetpp.ini ...................... OMNeT++ federate configuration file
      └─ omnetpp_config.json .............. Ambassador configuration file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;omnetpp_config.json&lt;/code&gt; mainly allows the configuration of a filter for different message routing options employed in the ambassador.
The current integration of OMNeT++/INET does not support all combinations (e.g. no TCP is possible for ad-hoc communication).
Accordingly, changes in this config would require adaptions in the OMNeT++/INET integration as well
and are therefore only recommended developers not for users.&lt;/p&gt;
&lt;p&gt;The whole OMNeT++ specific configuration is done via the &lt;code&gt;omnetpp.ini&lt;/code&gt; file. It covers static parts for the
simulator coupling such as the specific Eclipse MOSAIC Event Scheduler and the ScenarioManager. Furthermore,
logging configurations and the typical parameters for the communication layers (MAC, PHY and Radio
Channel) are addressed. The communication parameters are different for vehicles and RSUs. Please refer
to the OMNeT++ documentation on the OMNeT++ homepage for further information about the structure
of the &lt;code&gt;omnetpp.ini&lt;/code&gt; file.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Communication in Applications</title>
      <link>https://www.eclipse.dev/mosaic/docs/develop_applications/communication/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/develop_applications/communication/</guid>
      <description>&lt;p&gt;Eclipse MOSAIC has different classes, which allow you to define the network type and the specific area where the
communication should occur. Communication can be achieved with external
network simulators (





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_omnetpp/&#34;&gt;OMNeT++&lt;/a&gt;,






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_ns3/&#34;&gt;ns-3&lt;/a&gt;) or one of the built-in communication simulators 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_sns/&#34;&gt;SNS&lt;/a&gt;
or 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_cell/&#34;&gt;Eclipse MOSAIC Cell&lt;/a&gt;. Furthermore, for a better understanding it is important to consider the network types of Eclipse MOSAIC in more
detail.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cellular Communication&lt;/li&gt;
&lt;li&gt;Ad-hoc Communication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Depending on the needs of the application, there are different approaches to solve the communication issue in Eclipse MOSAIC
simulations. However, a distinction must be made between inter vehicle communication and Vehicle-to-X communication.
Also, it is possible to modify the selected communication mode dependent on requirements.&lt;/p&gt;
&lt;p&gt;Generally, the following modes are available based on network:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cellular Communication&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geobroadcast&lt;/li&gt;
&lt;li&gt;Geocast&lt;/li&gt;
&lt;li&gt;Topocast&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ad-hoc Communication&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geobroadcast&lt;/li&gt;
&lt;li&gt;Geocast&lt;/li&gt;
&lt;li&gt;Topobroadcast&lt;/li&gt;
&lt;li&gt;Topocast&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;general-configuration&#34;&gt;General Configuration&lt;/h2&gt;
&lt;p&gt;The first step to enable your application to use communication capabilities, is to make sure it extends the &lt;code&gt;AbstractSimulationUnit&lt;/code&gt;-class
or one of its child-classes (e.g. &lt;code&gt;VehicleUnit&lt;/code&gt;, &lt;code&gt;ChargingStationUnit&lt;/code&gt;) found in package
&lt;code&gt;org.eclipse.mosaic.fed.application.ambassador.simulation&lt;/code&gt;. Additionally, if you want your application to act upon
the reception or transmission of messages, make sure it implements the interface &lt;code&gt;CommunicationApplication&lt;/code&gt;.
Afterwards, depending on your use case, you can enable the desired communication modules following the instruction in






  
  

&lt;a href=&#34;#cellular-communication&#34;&gt;Cellular Configuration&lt;/a&gt; and 





  
  

&lt;a href=&#34;#ad-hoc-configuration&#34;&gt;Ad-hoc Configuration&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cellular-communication&#34;&gt;Cellular Communication&lt;/h2&gt;
&lt;p&gt;The cellular network is known from wireless mobile communication and the principle is to divide the entire geographic
area into several smaller parts called &lt;strong&gt;&amp;ldquo;cells&amp;rdquo;&lt;/strong&gt;. Each cell has a fixed-location transceiver with a coverage ratio.&lt;/p&gt;
&lt;p&gt;Eclipse MOSAIC enables the communication with all the existing vehicles via Geobroadcast mode or direct communication via
Geocast in a specific area (circular, rectangular). In contrast, the Topocast mode is not restricted to a specific area.&lt;/p&gt;
&lt;h3 id=&#34;cellular-configuration&#34;&gt;Cellular Configuration&lt;/h3&gt;
&lt;p&gt;To enable and configure the Cell-module in your application you have to call the &lt;code&gt;enable&lt;/code&gt;-method of your applications Cell-module.
Typically, you will do this inside the &lt;code&gt;onStartup()&lt;/code&gt;-method to enable cell capabilities from the get-go.&lt;/p&gt;
&lt;p&gt;Below is an example configuration defining maximal uplink and downlink bit rates.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
public void onStartup() {
    getOs().getCellModule().enable(new CellModuleConfiguration()
        .maxDownlinkBitrate(50 * DATA.MEGABIT)
        .maxUplinkBitrate(50 * DATA.MEGABIT)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cellular-geobroadcast&#34;&gt;Cellular Geobroadcast&lt;/h3&gt;
&lt;p&gt;The principle function of the Geobroadcast is to communicate with all entities within a geographical area. Eclipse MOSAIC
offers the possibility to configure a specific geographical area which can be either a circular or a rectangular area.&lt;/p&gt;
&lt;p&gt;The following figure illustrates a vehicle &lt;em&gt;&lt;strong&gt;veh_2&lt;/strong&gt;&lt;/em&gt; which is communicating with the other
vehicles(&lt;em&gt;&lt;strong&gt;veh_1&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;veh_3&lt;/strong&gt;&lt;/em&gt;) within a radius &lt;strong&gt;R&lt;/strong&gt;.&lt;/p&gt;















&lt;figure id=&#34;figure-illustration-of-geobroadcast-in-a-specific-circular-area&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/tiergarten-geobroadcast-circular-area.png&#34; data-caption=&#34;Illustration of Geobroadcast in a specific circular area&#34;&gt;


  &lt;img src=&#34;../images/tiergarten-geobroadcast-circular-area.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Illustration of Geobroadcast in a specific circular area
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;A circular communication area can be defined with the &lt;code&gt;geoBroadCast(GeoCircle geoCircle)&lt;/code&gt; from an Eclipse MOSAIC application,
as shown below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GeoCircle transmissionArea = new GeoCircle(GeoPoint.latlon(52.5, 13.2), 3000);

MessageRouting routing = getOs().getCellModule().createMessageRouting().geoBroadCast(transmissionArea);

getOs().getCellModule().sendV2XMessage(new MyV2XMessage(routing));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A rectangular destination area can be defined similarly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GeoPoint pointA = GeoPoint.latlon(52.51355, 13.22000);
GeoPoint pointB = GeoPoint.latlon(52.52000, 13.21000);
GeoRectangle transmissionArea = new GeoRectangle(pointA, pointB);

MessageRouting routing = getOs().getCellModule().createMessageRouting().geoBroadCast(transmissionArea);

getOs().getCellModule().sendV2XMessage(new MyV2XMessage(routing));
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cellular-geocast&#34;&gt;Cellular Geocast&lt;/h3&gt;
&lt;p&gt;Compared to Geobroadcasting, a Geocast addresses a receiver with an unique address. Addressing can be in the form of an
IP-Address or a receiver-ID (e.g. veh_0). Again, the communication area can be configured as circular or rectangular.&lt;/p&gt;
&lt;p&gt;Assume, the &lt;em&gt;&lt;strong&gt;veh_1&lt;/strong&gt;&lt;/em&gt; has a message which is addressed to &lt;em&gt;&lt;strong&gt;veh_2&lt;/strong&gt;&lt;/em&gt;. In order to send the message, &lt;em&gt;&lt;strong&gt;veh_1&lt;/strong&gt;&lt;/em&gt; first
examines whether the vehicle with ID &lt;em&gt;&lt;strong&gt;veh_2&lt;/strong&gt;&lt;/em&gt; is located within the transmission area. If this is the case, the
message will be transmitted. In figure below is this situation illustrated.&lt;/p&gt;















&lt;figure id=&#34;figure-cellular-geocast-to-address-a-receiver-within-a-defined-area&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/tiergarten-geocast-circular-area.png&#34; data-caption=&#34;Cellular Geocast to address a receiver within a defined area&#34;&gt;


  &lt;img src=&#34;../images/tiergarten-geocast-circular-area.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Cellular Geocast to address a receiver within a defined area
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The following methods are provided for the configuring the transmission area (Circle or Rectangle) and the addressing to
the receiver(hostname or ip address).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geoCast(GeoCircle geoCircle, String receiverName) &lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geoCast(GeoRectangle geoRectangle, String receiverName)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geoCast(GeoCircle geoCircle, byte[] ipAddress)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geoCast(GeoRectangle geoRectangle, byte[] ipAddress)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GeoCircle transmissionArea = new GeoCircle( GeoPoint.latlon(52.5, 13.2), 3000);

String receiverName = &amp;quot;veh_0&amp;quot;;
MessageRouting routing = getOs().getCellModule().createMessageRouting().geoCast(transmissionArea, receiverName);

getOs().getCellModule().sendV2XMessage(new MyV2XMessage(routing));
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cellular-topocast&#34;&gt;Cellular Topocast&lt;/h3&gt;
&lt;p&gt;Compared to Geocast or Geobroadcast, the Topocast is totally independent of geographical conditions and the addressing
can be in the form of an IP-Address or a receiver-ID.&lt;/p&gt;
&lt;p&gt;The next figure illustrates how the &lt;em&gt;&lt;strong&gt;veh_0&lt;/strong&gt;&lt;/em&gt; is communicating with &lt;em&gt;&lt;strong&gt;veh_1&lt;/strong&gt;&lt;/em&gt; in Topocast mode.&lt;/p&gt;















&lt;figure id=&#34;figure-topocast-mode-for-direct-addressing-without-geographical-constraints&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/tiergarten-cellular-topocast.png&#34; data-caption=&#34;Topocast mode for direct addressing without geographical constraints&#34;&gt;


  &lt;img src=&#34;../images/tiergarten-cellular-topocast.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Topocast mode for direct addressing without geographical constraints
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The code example below shows how we can configure the requirements of the communication in Topocast mode.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String receiverName = &amp;quot;veh_0&amp;quot;;

MessageRouting routing = getOs().getCellModule().createMessageRouting().topoCast(receiverName);

getOs().getCellModule().sendV2XMessage(new MyV2XMessage(routing));
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;setting-protocol-types&#34;&gt;Setting Protocol Types&lt;/h3&gt;
&lt;p&gt;By default, all cell messages use UDP, however you can set the protocol using the &lt;code&gt;protocol(...)&lt;/code&gt; method of the &lt;code&gt;MessageRoutingBuilder&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String receiverName = &amp;quot;veh_0&amp;quot;;

MessageRouting routing = getOs().getCellModule().createMessageRouting()
        .protocol(Protocoltype.TCP)
        .topoCast(receiverName);

getOs().getCellModule().sendV2XMessage(new MyV2XMessage(routing));
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ad-hoc-communication&#34;&gt;Ad-hoc Communication&lt;/h2&gt;
&lt;p&gt;The Ad-hoc network does not rely on a pre-existing infrastructure. Provided that vehicles are equipped with Ad-hoc
modules, they are able to communicate with each other dynamically. In case of a sufficient number of Ad-hoc equipped
vehicles, a message can be transferred via hops quickly over a long distance.&lt;/p&gt;
&lt;p&gt;Eclipse MOSAIC also enables the communication via a specific Ad-hoc channel within the wireless Ad-hoc network. However, the
Ad-hoc channels for vehicular communication are limited and standardized by the IEEE 802.11p.
The licensed frequency band 5.9 GHz (5.85-5.925 GHz) for Intelligent Transportation Systems(ITS) will be used as Ad-hoc
channels.&lt;/p&gt;
&lt;p&gt;The following table shows the possible channels on the 5.9 GHz band used for V2X communication.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Channel Number&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Channel Name&lt;/td&gt;
&lt;td&gt;SCH1&lt;/td&gt;
&lt;td&gt;SCH2&lt;/td&gt;
&lt;td&gt;SCH3&lt;/td&gt;
&lt;td&gt;CCH&lt;/td&gt;
&lt;td&gt;SCH4&lt;/td&gt;
&lt;td&gt;SCH5&lt;/td&gt;
&lt;td&gt;SCH6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Frequency Band&lt;/td&gt;
&lt;td&gt;5.86&lt;/td&gt;
&lt;td&gt;5.87&lt;/td&gt;
&lt;td&gt;5.88&lt;/td&gt;
&lt;td&gt;5.89&lt;/td&gt;
&lt;td&gt;5.9&lt;/td&gt;
&lt;td&gt;5.91&lt;/td&gt;
&lt;td&gt;5.92&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;ad-hoc-configuration&#34;&gt;Ad-hoc Configuration&lt;/h3&gt;
&lt;p&gt;Make sure you set up your application as described in 





  
  

&lt;a href=&#34;#general-configuration&#34;&gt;General Configuration&lt;/a&gt;.
Afterwards, to configure and enable the AdHoc-module in your application you have to call the &lt;code&gt;enable&lt;/code&gt;-method of your applications&#39;
Adhoc-module and define a configuration.
Usually you will do this in the &lt;code&gt;onStartup()&lt;/code&gt;-method to enable the module from the get-go.
Below is an example configuration taken from the Tiergarten-tutorial. Instead of configuring the &lt;code&gt;.power(...)[mW]&lt;/code&gt;
it is also possible to configure a &lt;code&gt;.distance(...)[m]&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
public void onStartup() {
        getOs().getAdHocModule().enable(new AdHocModuleConfiguration()
        .addRadio()
        .channel(AdHocChannel.CCH)
        .power(50)
        .create());
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ad-hoc-topobroadcast&#34;&gt;Ad-hoc Topobroadcast&lt;/h3&gt;
&lt;p&gt;In Topobroadcast mode, the communication between vehicles is regardless of the geographic conditions. However, the
communicating entities must be operated on the same Ad-hoc channel and there are two options to use the Topobroadcast:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Singlehop&lt;/li&gt;
&lt;li&gt;Multihop&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;singlehop-approach-in-topobroadcast&#34;&gt;Singlehop Approach in Topobroadcast&lt;/h4&gt;
&lt;p&gt;For Singlehop, it is not necessary to specify the number of hops explicitly which indicates the lifespan of a message,
because in Singlehop, any message has a lifespan of &lt;strong&gt;hop = 1&lt;/strong&gt;. Moreover, Eclipse MOSAIC allows to use the default method
&lt;code&gt;topoBroadCast()&lt;/code&gt; which automatically assigns a Control Channel (CCH) for the simulation entity and a lifespan based on
the Singlehop principle. Alternatively you can use the non-default method &lt;code&gt;topoBroadCast(AdHocChannel)&lt;/code&gt; in order to
specify the Ad-hoc channel.&lt;/p&gt;
&lt;p&gt;Below are some configuration examples of the default addressing method &lt;code&gt;topoBroadCast()&lt;/code&gt; and non-default addressing
method &lt;code&gt;topoBroadCast(AdHocChannel)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MessageRouting routing = getOs().getAdHocModule().createMessageRouting().topoBroadCast();

getOs().getAdHocModule().sendV2XMessage(new MyV2XMessage(routing));
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;AdHocChannel commonChannel = AdHocChannel.SCH1;

MessageRouting routing = getOs().getAdHocModule().createMessageRouting().topoBroadCast(commonChannel);

getOs().getAdHocModule().sendV2XMessage(new MyV2XMessage(routing));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following figure shows a simplified model based on the Singlehop principle. The &lt;em&gt;veh_1&lt;/em&gt; sends messages to all
simulation entites(&lt;em&gt;&lt;strong&gt;RSU&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;veh_2&lt;/strong&gt;&lt;/em&gt;) that are using the same Ad-hoc channel. After transmission, the message can
no longer be forwarded by the receiver.&lt;/p&gt;















&lt;figure id=&#34;figure-overview-singlehop-with-specified-ad-hoc-channel&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/tiergarten-adhoc-topobroadcast-singlehop.png&#34; data-caption=&#34;Overview Singlehop with specified Ad-hoc channel&#34;&gt;


  &lt;img src=&#34;../images/tiergarten-adhoc-topobroadcast-singlehop.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Overview Singlehop with specified Ad-hoc channel
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h4 id=&#34;multihop-approach-in-topobroadcast&#34;&gt;Multihop Approach in Topobroadcast&lt;/h4&gt;
&lt;p&gt;In Multihop, the lifespan (amount of hops) of a message can be specified, allowing larger communication distances.&lt;/p&gt;
&lt;p&gt;The following figure shows a Multihop example with a data package D (M, h = 2) from the vehicle &lt;em&gt;veh_0&lt;/em&gt; which contains a
message M and a hop number h = 2. Assuming that a lot of simulation entities are using the same Ad-hoc channel the
message can be forwarded over a along distance. After each forward the hop number will be incremented by 1. Since the
hop amount was set to 2, the forwarding will stop after 2 increments.&lt;/p&gt;















&lt;figure id=&#34;figure-overview-multihop-principle&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/tiergarten-adhoc-topobroadcast.png&#34; data-caption=&#34;Overview Multihop principle&#34;&gt;


  &lt;img src=&#34;../images/tiergarten-adhoc-topobroadcast.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Overview Multihop principle
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The next code snippet shows a configuration example with an Ad-hoc channel and a message lifespan &lt;strong&gt;hops = 2&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;int hops = 2;

MessageRouting routing = getOs().getAdHocModule().createMessageRouting().topoBroadCast(hops);

getOs().getAdHocModule().sendV2XMessage(new MyV2XMessage(routing));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;In order to use the Multihop approach in OMNeT++ and ns-3 provided by Eclipse MOSAIC, its necessary to implement a
routing protocol in network simulators (





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_omnetpp/&#34;&gt;OMNeT++&lt;/a&gt;,






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_ns3/&#34;&gt;ns-3&lt;/a&gt;). But the built in communication simulator






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_sns/&#34;&gt;SNS&lt;/a&gt; includes a simple routing protocol &amp;ldquo;Flooding&amp;rdquo;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;ad-hoc-topocast&#34;&gt;Ad-hoc Topocast&lt;/h3&gt;
&lt;p&gt;In addition to the Topobroadcast, the communication in Topocast mode will be addressed explicitly to the recipient and
the addressing can be done either through receiver name (vehicle-ID e.g. veh_0) or the IP-Address of the vehicle.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final byte[] ipv4Address = {127,36,50,4};

AdHocChannel commonChannel = AdHocChannel.SCH1;

int hops = 2;

MessageRouting routing = getOs().getAdHocModule().createMessageRouting().topoCast(ipv4Address, hops);

getOs().getAdHocModule().sendV2XMessage(new MyV2XMessage(routing));
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ad-hoc-geobroadcast&#34;&gt;Ad-hoc Geobroadcast&lt;/h3&gt;
&lt;p&gt;In contrast to Cellular Network above, the simulation entities act as active communication part (transmitter and
receiver) and all simulation entities within range are getting messages in Geobroadcast mode.&lt;/p&gt;
&lt;p&gt;As example in the following illustration, The vehicles &lt;em&gt;&lt;strong&gt;veh_0&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;veh_2&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;veh_3&lt;/strong&gt;&lt;/em&gt; and the &lt;em&gt;&lt;strong&gt;RSU&lt;/strong&gt;&lt;/em&gt; are
Ad-hoc equipped and there is no vehicle in the communication range of &lt;em&gt;&lt;strong&gt;RSU&lt;/strong&gt;&lt;/em&gt;, therefore a hop is not possible to next
vehicle &lt;em&gt;&lt;strong&gt;veh_0&lt;/strong&gt;&lt;/em&gt;. But the vehicles &lt;em&gt;&lt;strong&gt;veh_2&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;veh_3&lt;/strong&gt;&lt;/em&gt; are able to communicate with each other.&lt;/p&gt;















&lt;figure id=&#34;figure-principle-of-ad-hoc-geobroadcast-mode&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/tiergarten-adhoc-network.png&#34; data-caption=&#34;Principle of Ad-hoc Geobroadcast mode&#34;&gt;


  &lt;img src=&#34;../images/tiergarten-adhoc-network.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Principle of Ad-hoc Geobroadcast mode
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;With the methods&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geoBroadCast(GeoCircle geoCircle)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geoBroadCast(GeoRectangle geoRectangle)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;of the Eclipse MOSAIC class &lt;code&gt;AdHocMessageRoutingBuilder&lt;/code&gt; ,we are able, to configure the required area as a circle or a
rectangle.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GeoPoint center = GeoPoint.latlon(52.5, 13.2);

GeoCircle adHocModule = new GeoCircle(center, 3000);

MessageRouting routing = getOs().getAdHocModule().createMessageRouting().geoBroadCast(adHocModule);

getOs().getAdHocModule().sendV2XMessage(new MyV2XMessage(routing));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Analogous to the examples above, we can also configure the transmission area as a rectangle.&lt;/p&gt;
&lt;p&gt;The next code snippet illustrates a possible configuration with a rectangular transmission area and a specified Ad-hoc
channel.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GeoPoint pointA = GeoPoint.latlon(52.51355, 13.22000);

GeoPoint pointB = GeoPoint.latlon(52.52000, 13.21000);

GeoRectangle transmissionArea = new GeoRectangle(pointA, pointB);

MessageRouting routing = getOs().getAdHocModule().createMessageRouting().geoBroadCast(transmissionArea, AdHocChannel.SCH1);

getOs().getCellModule().sendV2XMessage(new MyV2XMessage(routing));
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ad-hoc-geocast&#34;&gt;Ad-hoc Geocast&lt;/h3&gt;
&lt;p&gt;The class AdHocMessageRoutingBuilder only has one method for Geocasting mode,
&lt;code&gt;geoCast(DestinationAddress destinationAddress, AdHocChannel adHocChannel)&lt;/code&gt;. Communication is possible if the
IP-address of receiver is known and both (receiver and transmitter) are on the same Ad-hoc channel.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;In this context the name Geocast is misleading, because a geological condition is not necessary.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see in the next picture, the RSU uses the Ad-hoc channel &lt;em&gt;SCH1&lt;/em&gt; and several vehicles use different
Ad-hoc channels. Assuming the RSU tries to send a message to &lt;em&gt;veh_1&lt;/em&gt; and has knowledge about the IP-Address of &lt;em&gt;veh_1&lt;/em&gt;,
if the vehicle &lt;em&gt;veh_1&lt;/em&gt; also uses the same channel &lt;em&gt;SCH1&lt;/em&gt;, the transmission will be completed successfully.&lt;/p&gt;















&lt;figure id=&#34;figure-ad-hoc-geocast-communication-between-entities-using-the-same-channel&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/tiergarten-geocast-adHoc.png&#34; data-caption=&#34;Ad-hoc Geocast communication between entities using the same channel&#34;&gt;


  &lt;img src=&#34;../images/tiergarten-geocast-adHoc.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Ad-hoc Geocast communication between entities using the same channel
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Below you can see a possible configuration.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final byte[] ipv4Address = {127,36,50,4};

DestinationAddress destAddress = new DestinationAddress(ipv4Address);

AdHocChannel commonChannel = AdHocChannel.SCH1;

MessageRouting routing = getOs().getAdHocModule().createMessageRouting().geoCast(destAddress, commonChannel);

getOs().getAdHocModule().sendV2XMessage(new MyV2XMessage(routing));
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cam---implementation&#34;&gt;CAM - Implementation&lt;/h2&gt;
&lt;p&gt;A Cooperative Awareness Messages (CAM) consists of four parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Header with generic information&lt;/li&gt;
&lt;li&gt;MessageBody&lt;/li&gt;
&lt;li&gt;ServiceList&lt;/li&gt;
&lt;li&gt;TaggedValue list&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, generic information like protocol version, creation time stamp are submitted. Normally this data set follows a network beacon, which already contains data like position and speed. Nevertheless, this functionality must be implemented in the network layer, that means in the network simulator. At the moment this is not supported and is therefore compensated in the next message part, the message body. The body can contain either RSU or Vehicle awareness data. In the first case, only the RSU type is submitted, but this probably changes with a new CAM specification. In the second case, we provide date like vehicle width, length, position, speed, type and heading. The specification is not completely implemented, especially acceleration data and light, brake status are missing. The third part of the CAM specification, the service list, is also not implemented. This will probably change, when a list of services is defined by the ETSI. Last but not least a message contains a tagged list, a key value map with optional data. This is fully implemented and is used for our traffic light CAM messages, which provide the traffic light status in such a list.&lt;/p&gt;
&lt;h3 id=&#34;user-defined-tagged-values&#34;&gt;User Defined Tagged Values&lt;/h3&gt;
&lt;p&gt;If you are required to exchange custom data within CAMs, the field UserTaggedValue can be used. For adding such data to the CAM, the application needs to implement the method &lt;code&gt;beforeGetAndResetUserTaggedValue()&lt;/code&gt; from the &lt;code&gt;CommunicationApplication&lt;/code&gt; interface. If a CAM is about to be sent, the custom data can be set using the &lt;code&gt;getOs().setUserTaggedValue(byte[])&lt;/code&gt; method. The receiver can simple access the data by accessing the field directly from the received CAM message:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    byte[] value = cam.getUserTaggedValue ();
    if (value  != null) {
        // read  user  tagged  value}
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;timing-requirements&#34;&gt;Timing Requirements&lt;/h3&gt;
&lt;p&gt;CAMs are generated by the CAM Management and passed to lower layers when any of following rules apply:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maximum time interval between CAM generations: $1s$;&lt;/li&gt;
&lt;li&gt;minimum time interval between CAM generations: $0.1s$;&lt;/li&gt;
&lt;li&gt;generate CAM when absolute difference between current heading (towards North) and last CAM heading &amp;gt; $4 deg$;&lt;/li&gt;
&lt;li&gt;generate CAM when distance between current position and last CAM position &amp;gt; $5m$&lt;/li&gt;
&lt;li&gt;generate CAM when absolute difference between current speed and last CAM speed &amp;gt; $1ms$;&lt;/li&gt;
&lt;li&gt;These rules are checked latest every $100ms$;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Navigation in Applications</title>
      <link>https://www.eclipse.dev/mosaic/docs/develop_applications/navigation/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/develop_applications/navigation/</guid>
      <description>&lt;p&gt;The navigation of vehicles (i.e. calculation of routes) is handled completely by the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_simulator/#eclipse-mosaic-application-simulator&#34;&gt;Application Simulator&lt;/a&gt;. Each vehicle is equipped
with a navigation system which provides all required information and functions for navigational purposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Retrieve the current position and heading of the vehicle.&lt;/li&gt;
&lt;li&gt;Get the target of the vehicle.&lt;/li&gt;
&lt;li&gt;Calculate various routes from the current position to an arbitrary target.&lt;/li&gt;
&lt;li&gt;Choose a suitable route out of existing ones from the current position to an arbitrary target.&lt;/li&gt;
&lt;li&gt;Switch onto a specific route.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to provide routing functionality, a map model based on Open Street Map data is used, which
needs to be transformed before the simulation using scenario-convert (see 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/create_a_new_scenario/&#34;&gt;Create a New Scenario&lt;/a&gt;).
The map data including initial routes for vehicles is provided with the database file which needs to be located in
&lt;code&gt;mosaic/scenarios/&amp;lt;scenario_name&amp;gt;/application/&amp;lt;scenario_name&amp;gt;.db&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To enable non-moving entities (i.e. RSUs, Servers, &amp;hellip;) to access routing capabilities the &lt;code&gt;IRoutingModule&lt;/code&gt; can be implemented
which omits operations likes route switching.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;If the database needs to be located somewhere else, the path can be specified in
&lt;code&gt;mosaic/scenarios/&amp;lt;scenario_name&amp;gt;/application/application_config.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    ...
    &amp;quot;navigationConfiguration&amp;quot;: {
        &amp;quot;databaseFile&amp;quot;: &amp;quot;path/to/scenario.db&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Note: Different from other modules bundled with the application simulator the navigation module doesn&amp;rsquo;t need to be explicitly enabled.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;The following snippet shows, how the navigation system can be used within an application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//get navigation module
INavigationModule navigationModule = getOs().getNavigationModule();

//choose current target as target position
RoutingPosition targetPosition = new RoutingPosition(navigationModule.getTargetPosition());

//set routing parameters to fastest route search
RoutingParameters params = new RoutingParameters().costFunction(IRoutingCostFunction.Fastest);

//calculate routes
RoutingResponse response = navigationModule.calculateRoutes(targetPosition, params);

//switch to best route
if (response.getBestRoute() != null) {
    boolean routeSwitched = navigationModule.switchRoute(response.getBestRoute());
    ...
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Network Simulator ns-3</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_ns3/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_ns3/</guid>
      <description>&lt;p&gt;As the successor of the well-known &lt;em&gt;Network Simulator 2&lt;/em&gt;, &lt;strong&gt;ns-3&lt;/strong&gt; is a discrete-event communication simulator for Internet systems,
wireless networks and more. In connection with Eclipse MOSAIC, especially the IEEE 802.11(p) capabilities are employed for Ad-hoc communication.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Operating system&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;GNU/Linux (recommended), &lt;em&gt;FreeBSD&lt;/em&gt;, &lt;em&gt;macOS&lt;/em&gt;, &lt;em&gt;Microsoft Windows (with WSL or Docker)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Written in&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;C++ (core) and Python (bindings)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Free software: GNU GPLv2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://www.nsnam.org/&#34; target=&#34;_blank&#34;&gt;http://www.nsnam.org/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Supported version(s)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;3.36.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;libprotobuf 3.3.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;libxml2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;libsqlite3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;ns-3 is primarily developed on and for GNU/Linux platforms.&lt;/p&gt;
&lt;p&gt;On other platforms like Windows you should consider&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the 




&lt;a href=&#34;https://docs.microsoft.com/windows/wsl/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Windows Subsystem for Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the installation in 





  
  

&lt;a href=&#34;#installation-in-docker-environment&#34;&gt;Docker environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the installation of Linux in a virtual machine environment, such as
&lt;a href=&#34;https://www.vmware.com/products/workstation-player.html&#34; target=&#34;_blank&#34;&gt;VMware&lt;/a&gt; or &lt;a href=&#34;https://www.virtualbox.org/&#34; target=&#34;_blank&#34;&gt;VirtualBox&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information on how to set up ns-3 with Eclipse MOSAIC, please just refer to the following section. We
prepared an installation script, which manages most of the required work.&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;For GNU/Linux platforms, the minimal requirements to run basic simulations are a &lt;strong&gt;gcc&lt;/strong&gt; or &lt;strong&gt;clang&lt;/strong&gt; compiler
and a &lt;strong&gt;Python&lt;/strong&gt; interpreter. At least you need the following packages to be installed:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Minimum requirement:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;gcc
g++
cmake
python3
python3-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For a complete list of required packages for different distributions, please refer to the ns-3 installation
guide: &lt;a href=&#34;https://www.nsnam.org/wiki/Installation&#34; target=&#34;_blank&#34;&gt;https://www.nsnam.org/wiki/Installation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please make also sure the following libraries are installed before running the installation script:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;libxml2&lt;/li&gt;
&lt;li&gt;libsqlite3&lt;/li&gt;
&lt;li&gt;libprotobuf 3.3.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;run-the-installation-script&#34;&gt;Run the installation script&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;ns-3 requires several packages to be installed on your computer. You will
need to ensure, that all required libraries are present on your system before proceeding. You
may need superuser permissions to install packages.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;If your local ClientServerChannel protocol version (protobuf files) does not fit the required one, the installation
may fail with an error. In that case, you can run the install script with the &lt;code&gt;-p&lt;/code&gt; flag. This will
rebuild the protobuf files during installation and allow it to proceed correctly.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To ease the installation of ns-3 for Eclipse MOSAIC, the installation process has been delegated to an installation
script, called &lt;code&gt;ns3_installer.sh&lt;/code&gt; that can be found in the associated ns-3 federate folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ mosaic/bin/fed/
   └─ ns3
      ├─ Dockerfile.sh ................... Dockerfile for ns-3 federate
      └─ ns3_installer.sh ................ Installation script for ns-3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;The ns-3 installation script accomplishes the following tasks:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download ns-3 tarball from the official sources&lt;/li&gt;
&lt;li&gt;Download the ns-3 federate for Eclipse MOSAIC.&lt;/li&gt;
&lt;li&gt;Apply a patch to ns-3 in order to make it work with Eclipse MOSAIC.&lt;/li&gt;
&lt;li&gt;Add the ns-3 federate to the waf build system.&lt;/li&gt;
&lt;li&gt;Configure and build the patched ns-3 with the ns-3 federate.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;In order to start the simulation, the following steps need to be performed:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set up the &lt;code&gt;ns3_federate_config.xml&lt;/code&gt;-file in the scenario folder (see section 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_ns3/#configuration&#34;&gt;Configuration&lt;/a&gt;). An example &lt;code&gt;ns3_federate_config.xml&lt;/code&gt; - file is shipped with the Tiergarten scenario.&lt;/li&gt;
&lt;li&gt;At last ns-3 has to be activated in the &lt;code&gt;mosaic_config.xml&lt;/code&gt; and the simulation can be started.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Using the installer script will reinstall (rebuild) ns-3 and the federate because it is designed for a user environment and not for federate development.
Read 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/extending_mosaic/ns3_setup/&#34;&gt;here&lt;/a&gt; for futher information on how to set up a development environment for the ns-3 federate&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;installation-in-docker-environment&#34;&gt;Installation in Docker environment&lt;/h3&gt;
&lt;p&gt;This guide gives instructions to execute the ns-3 federate inside a docker container. If you already installed
ns-3 on your machine following the steps before, you can skip this section.&lt;/p&gt;
&lt;p&gt;Docker is a new approach to execute software. More precisely, it &amp;ldquo;wraps software in a complete filesystem
that contains everything it needs to run: code, runtime, system tools, and system libraries&amp;rdquo;. As a result, the
software is executed within a container and its execution does not rely on the environment the container is running in.&lt;/p&gt;
&lt;p&gt;In context of Eclipse MOSAIC, this approach allows to execute ns-3 within a docker container. The user does not
need to manually install ns-3 and can even run ns-3 on Windows hosts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Docker ≥ 1.13 on your machine.&lt;/li&gt;
&lt;li&gt;To get everything to work, please make sure to execute the following steps depending on your operating system:
&lt;ul&gt;
&lt;li&gt;Windows - In the settings, share the drive where Eclipse MOSAIC is installed on. You may need to restart docker in the reset tab.&lt;/li&gt;
&lt;li&gt;Linux - Make sure your user account belongs to the unix-group &lt;code&gt;docker&lt;/code&gt;. You may need to restart your machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Switch to the location of the Dockerfile in &lt;code&gt;&amp;lt;mosaic&amp;gt;/bin/fed/ns3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Execute the following command on command line:&lt;br&gt;
&lt;code&gt;docker build -t ns3-federate&lt;/code&gt; .
This could take a while to finish.&lt;/li&gt;
&lt;li&gt;Enter the name of the docker image &lt;code&gt;etc/runtime.json&lt;/code&gt; in the &lt;code&gt;ns3&lt;/code&gt;-section into the property &lt;code&gt;dockerImage&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;federates&amp;quot;: [
   ...
   {
      &amp;quot;id&amp;quot;: &amp;quot;ns3&amp;quot;,
      &amp;quot;dockerImage&amp;quot;: &amp;quot;ns3-federate&amp;quot;,
      ...
   },
   ...
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can test the installation of your docker image with the Tiergarten scenario, by activating ns3 in the &lt;code&gt;scenario_config.json&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;If MOSAIC cannot open a connection to the federate, try to add the option &lt;code&gt;-Dmosaic.no-detach=true&lt;/code&gt; to the java call in the mosaic.sh file on Linux, or
&lt;code&gt;-Dmosaic.no-detach=false&lt;/code&gt; in the mosaic.bat file on Windows.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The whole ns-3 specific configuration is done via the files &lt;code&gt;ns3_config.json&lt;/code&gt; and &lt;code&gt;ns3_federate_config.xml&lt;/code&gt;
in the scenario folder.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   └─ ns3
      ├─ ns3_config.json ................. Ambassador configuration file.
      └─ ns3_federate_config.xml ......... Federate configuration file.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;ns3_config.json&lt;/code&gt; mainly allows the configuration of a filter for different message routing options employed in the ambassador.
The current integration of ns-3 does not support all combinations (e.g. no TCP is possible for ad-hoc communication).
Accordingly, changes in this config would require adaptions in the ns-3 integration as well
and are therefore only recommended developers not for users.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ns3_federate_config.xml&lt;/code&gt; allows the configuration of all modules in the IEEE 802.11(p) communication stack of ns-3.
The ns-3 propagation
module defines two generic interfaces, namely &lt;strong&gt;PropagationLossModel&lt;/strong&gt; and &lt;strong&gt;PropagationDelayModel&lt;/strong&gt;,
for the modelling of propagation loss respectively propagation delay.&lt;/p&gt;
&lt;p&gt;In the default &lt;code&gt;ns3_federate_config.xml&lt;/code&gt;, the Wi-Fi device uses the ns-3 standard propagation delay model
&lt;code&gt;ns3::ConstantSpeedPropagationDelayModel&lt;/code&gt; and the ns-3 standard propagation loss model
&lt;code&gt;ns3::FriisPropagationLossModel&lt;/code&gt;. Radio propagation models in ns-3 can easily be exchanged with
the ns-3 class registration system (see the ns-3 documentation for details). The Wi-Fi configuration
includes additional parameters, like sending power and antenna gain.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3D Visualization (PHABMap)</title>
      <link>https://www.eclipse.dev/mosaic/docs/visualization/phabmap/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/visualization/phabmap/</guid>
      <description>&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;The 3D visualization &lt;strong&gt;PHABMap&lt;/strong&gt; is part of &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;&lt;/strong&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The Eclipse MOSAIC 3D Visualization Tool is based on the PHABMACS vehicle simulator and uses the same 3D
engine and models to visualize vehicle movements and various events which occur during the simulation.
Next to the road network, which can be optionally rendered by the visualizer, the following units and
events are visualized:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vehicle movements coming from the traffic simulation&lt;/li&gt;
&lt;li&gt;Road Side Units at their defined location&lt;/li&gt;
&lt;li&gt;V2X-messages sent via cellular communication (indicated as green circles)&lt;/li&gt;
&lt;li&gt;V2X-messages sent via ITS-G5 communication (indicated as blue circles)&lt;/li&gt;
&lt;li&gt;V2X-messages received by vehicles (indicated as red circles)&lt;/li&gt;
&lt;/ul&gt;















&lt;figure id=&#34;figure-the-3d-visualization-tool-phabmap-displaying-events-from-the-simulation&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/phabmap.jpg&#34; data-caption=&#34;The 3D visualization tool PHABMap displaying events from the simulation&#34;&gt;


  &lt;img src=&#34;../images/phabmap.jpg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    The 3D visualization tool PHABMap displaying events from the simulation
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Sumo Ambassador Implementation</title>
      <link>https://www.eclipse.dev/mosaic/docs/extending_mosaic/sumo_ambassador_details/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/extending_mosaic/sumo_ambassador_details/</guid>
      <description>&lt;p&gt;The Simulation of Urban Mobility (SUMO) simulator is an open source microscopic, multi-modal traf-
fic simulation package which is developed by the Institute of Transportation research at the German
Aerospace Centre. It is designed to handle large road networks faster than real-time. Each vehicle has
an own route and is simulated individually. To simulate the movements of the vehicles on the network,
a model is used that uses discrete time steps of e.g. 1 s. Thousands of vehicles can be simulated in real
time on a desktop PC, including simulation of traffic lights, right-of-way rules, and lane changing models.
Simulations can either run via the command line or are visualized using the openGL-API (SUMO-GUI).
SUMO networks are created by importing other formats, such as OpenStreetMap data, Shapefiles or
TIGE-maps; or by generating artificial networks. Furthermore, vehicle routes, based on different routing
paradigms, can be computed.&lt;/p&gt;
&lt;h2 id=&#34;sumo-and-eclipse-mosaic&#34;&gt;SUMO and Eclipse MOSAIC&lt;/h2&gt;
&lt;p&gt;We have integrated the traffic simulator SUMO to be able to simulate heterogeneous driving vehicles and a set of vehicles that have a predefined routes based on an imported roadmap. Additionally, during
the runtime of a simulation, it is possible that routes of simulated vehicles are changed and that vehicle positions are extracted at arbitrary points in time. The integration of SUMO into a Eclipse MOSAIC based simulation is illustrated in the following figure. The integrated Traffic Control Interface (TraCI) Server offers an interface to exchange commands and positions using a socket interface with a proprietary byte protocol. Analogous to the TraCI Server, a TraCI Client is implemented that is integrated in an ambassador implementing the TraCI protocol. Therefore, SUMO can be integrated without modifications.&lt;/p&gt;















&lt;figure id=&#34;figure-sumo-connected-to-eclipse-mosaic&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/sumo-connected-to-mosaic.jpeg&#34; data-caption=&#34;SUMO connected to Eclipse MOSAIC&#34;&gt;


  &lt;img src=&#34;../images/sumo-connected-to-mosaic.jpeg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    SUMO connected to Eclipse MOSAIC
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;During a simulation run, per default SUMO is paused and TraCI is listening for commands. After each
advanced time grant, SUMO offers the new vehicle positions which are broadcast by its ambassador
to other federates. Furthermore, if the ambassador receives a request to change the route of a specific
vehicle, it is forwarded to SUMO. Thus, at the next time-advancement, the new route is integrated.&lt;/p&gt;
&lt;h3 id=&#34;simulation-of-vehicles&#34;&gt;Simulation of Vehicles&lt;/h3&gt;
&lt;p&gt;For each vehicle which has been defined in the mapping configuration, a &lt;code&gt;VehicleRegistration&lt;/code&gt; interaction is sent
to the &lt;code&gt;SumoAmbassador&lt;/code&gt; which adds those vehicles to the simulation via TraCI. Furthermore, vehicle
data is subscribed which is updated with every simulation step. After each step of the simulation this
data is bundled into a &lt;code&gt;VehicleInfo&lt;/code&gt; object which is distributed among other ambassadors within the
&lt;code&gt;VehicleUpdates&lt;/code&gt; interaction. The following data is available for each vehicle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Position&lt;/li&gt;
&lt;li&gt;Speed, Acceleration, Heading, Slope&lt;/li&gt;
&lt;li&gt;State of vehicle signals (e.g. turn indicators)&lt;/li&gt;
&lt;li&gt;Emission dispersion (CO2, NOX, etc.)&lt;/li&gt;
&lt;li&gt;Fuel consumption&lt;/li&gt;
&lt;li&gt;Information about the road the vehicle is driving on (road position)&lt;/li&gt;
&lt;li&gt;Id of the route&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;traffic-lights-in-sumo&#34;&gt;Traffic lights in SUMO&lt;/h3&gt;
&lt;p&gt;Depending on which light is active (red, yellow or green), every traffic light got different phases. In theory,
any combination of dis- or enabled lights is possible, but SUMO only handles combinations which make
sense. In SUMOs traffic light concept every traffic light got a bitset of the status of each phase. Every
bitset is a combination as mentioned above. When a car approaches a junction, it gets the actual bitset
(combination) of the traffic light. To explain the code, an example is given:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;tl-logic type=&amp;quot;static&amp;quot;&amp;gt;
    &amp;lt;key&amp;gt;0&amp;lt;/key&amp;gt;
    &amp;lt;subkey&amp;gt;my program&amp;lt;/subkey&amp;gt;
    &amp;lt;phaseno&amp;gt;8&amp;lt;/phaseno&amp;gt;
    &amp;lt;offset&amp;gt;0&amp;lt;/offset&amp;gt;
    &amp;lt;phase duration=&amp;quot;31&amp;quot; state=&amp;quot;GGggrrrrGGggrrrr&amp;quot;/&amp;gt;
    &amp;lt;phase duration=&amp;quot;5&amp;quot; state=&amp;quot;yyggrrrryyggrrrr&amp;quot;/&amp;gt;
    &amp;lt;phase duration=&amp;quot;6&amp;quot; state=&amp;quot;rrGGrrrrrrGGrrrr&amp;quot;/&amp;gt;
    &amp;lt;phase duration=&amp;quot;5&amp;quot; state=&amp;quot;rryyrrrrrryyrrrr&amp;quot;/&amp;gt;
    &amp;lt;phase duration=&amp;quot;31&amp;quot; state=&amp;quot;rrrrGGggrrrrGGgg&amp;quot;/&amp;gt;
    &amp;lt;phase duration=&amp;quot;5&amp;quot; state=&amp;quot;rrrryyggrrrryygg&amp;quot;/&amp;gt;
    &amp;lt;phase duration=&amp;quot;6&amp;quot; state=&amp;quot;rrrrrrGGrrrrrrGG&amp;quot;/&amp;gt;
    &amp;lt;phase duration=&amp;quot;5&amp;quot; state=&amp;quot;rrrrrryyrrrrrryy&amp;quot;/&amp;gt;
&amp;lt;/tl-logic&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example shows the traffic light program of one junction. It shows the different status’ of each light
of each traffic signal, which are positioned on the junction. In this example every string of a phase e.g.
&amp;ldquo;GGggrrrrGGggrrrr&amp;rdquo; (first phase) got 16 characters. Every char stands for one light on the junction. On
this junction are four traffic lights with four signals each. To understand the different status of each light
in one period (8 phases) the program should be read from top to the bottom. It is possible to change or
create your own program by editing the .net file with the tool Netedit.&lt;/p&gt;
&lt;h3 id=&#34;handling-of-traffic-lights-in-eclipse-mosaic&#34;&gt;Handling of traffic lights in Eclipse MOSAIC&lt;/h3&gt;
&lt;p&gt;After the TraCI connection has been established, all available traffic light groups are read out of SUMO via
TraCI. This information is packed into the three classes &lt;code&gt;TrafficLightGroup&lt;/code&gt;, &lt;code&gt;TrafficLightSignal&lt;/code&gt;,
and &lt;code&gt;TrafficLightPhase&lt;/code&gt;. While a traffic light group contains a list of signals which control one intersec-
tion (which can consist of several nodes), a list of all existing traffic light groups is sent to the RTI via a
&lt;code&gt;ScenarioTrafficLightRegistration&lt;/code&gt; interaction.&lt;/p&gt;
&lt;h2 id=&#34;traci-client-implementation&#34;&gt;TraCI Client Implementation&lt;/h2&gt;
&lt;p&gt;The SumoAmbassador communicates with the federate (SUMO process) via TraCI. In this socket based
communication protocol, the server (SUMO) listens to commands and responds accordingly.&lt;/p&gt;
&lt;p&gt;Each message send to SUMO consist of a header and the command or result message, according to the
following scheme:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 0                7 8                15
+--------------------------------------+
| Message Length including this header |
+--------------------------------------+
|      (Message Length, continued)     |
+--------------------------------------+  \
|      Length      |    Identifier     |  |
+--------------------------------------+   &amp;gt; Command / Result_0
|      Command / Result_0 content      |  |
+--------------------------------------+  /
...
+--------------------------------------+  \
|      Length      |    Identifier     |  |
+--------------------------------------+   &amp;gt; Command / Result_n -1
|     Command / Result_n-1 content     |  |
+--------------------------------------+  /
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A more detailed description can be found here: 




&lt;a href=&#34;http://sumo.dlr.de/wiki/TraCI/Protocol&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://sumo.dlr.de/wiki/TraCI/Protocol&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;commands&#34;&gt;Commands&lt;/h3&gt;
&lt;p&gt;Each TraCI command is identified by an command identifier. For example, the command 0xC4 is used to
change the state of a vehicle. Most of the commands need further specification, such as the parameter of
the vehicle which is required to be changed. Those parameters are usually accessed by variable identifiers
(e.g. 0x40 addresses the speed of an entity). A full list of commands and variables supported by TraCI can
be found here: 




&lt;a href=&#34;http://sumo.dlr.de/wiki/TraCI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://sumo.dlr.de/wiki/TraCI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is an example of a command message to change the speed of the vehicle &amp;ldquo;veh_0&amp;rdquo; to 14m/s:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 0                 7 8                 15                23 24               31
+-----------------------------------------------------------------------------+
|                             25 (Message length)                             |
+-----------------------------------------------------------------------------+
|    21 (Length)    |  0xC4 (Command)  |   0x40 (Variable) |       
+-----------------------------------------------------------------------------+
             5 (String length as 4 Byte Integer)           |        &amp;quot;v&amp;quot;       |
+-----------------------------------------------------------------------------+
|        &amp;quot;e&amp;quot;        |        &amp;quot;h&amp;quot;       |        &amp;quot;_&amp;quot;        |        &amp;quot;0&amp;quot;       |
+-----------------------------------------------------------------------------+
| 0x0B (Double type)|                   40.0 (8 Byte Double) 
+-----------------------------------------------------------------------------+
             
+-----------------------------------------------------------------------------+  
                    |
+-------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;abstracttracicommand&#34;&gt;AbstractTraciCommand&lt;/h3&gt;
&lt;p&gt;In the TraCI client implementation of the &lt;code&gt;SumoAmbassador&lt;/code&gt;, the whole construction of messages is done in
the class &lt;code&gt;AbstractTraciCommand&lt;/code&gt;. The message header containing the message and command lengths
is constructed automatically as well as all parameters defined by the specific command. To achieve this,
each class which extends the &lt;code&gt;AbstractTraciCommand&lt;/code&gt; needs to define the command, the variable and
all parameters which are required for the specific command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;protected VehicleSetSpeed() {
    super(TraciVersion.LOWEST);

    write()
        .command(0xC4)                // = change vehicle state
        .variable(0x04)               // = set speed of entity
        .writeStringParam()           // = vehicle id
        .writeDoubleParamWithType();  // = speed value
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example shows the command implementation for setting the speed for a vehicle. In the constructor,
the write methods provides a builder-like construct allowing to define the command, the variable, and all
parameters which are later passed dynamically to the command. Here, the command is specified as &lt;code&gt;0xC4&lt;/code&gt; (= change vehicle state) and the variable as &lt;code&gt;0x04&lt;/code&gt; (= speed of the entity). Furthermore, two parameters are
defined: The first string parameter represents the ID of the vehicle, the second double parameter defines
the speed value to be set (according to 




&lt;a href=&#34;http://sumo.dlr.de/wiki/TraCI/Change_Vehicle_State&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://sumo.dlr.de/wiki/TraCI/Change_Vehicle_State&lt;/a&gt;).
Note, the order of the specified command contents is from crucial importance. E.g. the &lt;code&gt;command&lt;/code&gt; must
always be specified before the &lt;code&gt;variable&lt;/code&gt;, and the variable before all parameters.&lt;/p&gt;
&lt;p&gt;All parameters defined in the constructor (here: &lt;code&gt;[String, Double]&lt;/code&gt; ), need to be assigned with values
as soon as the command is executed. For this purpose, the command implementation needs to call the
method execute of the super class with the parameter values in the specified order:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void setSpeed(Bridge bridge, String vehicleId, double speedValue) {
    super.execute(bridge, vehicleId, value);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within the execute method, the &lt;code&gt;AbstractTraciCommand&lt;/code&gt; constructs the whole message and sends it to
the TraCI server (SUMO). Furthermore, the &lt;code&gt;AbstractTraciCommand&lt;/code&gt; also reads the response, extracts the
status of the response (successful or error) and reads all values returned by the server. Usually, commands
which changes the state of an entity only (like &lt;code&gt;VehicleSetSpeed&lt;/code&gt;) do not respond with complex results.
However, a command which wants to retrieve a value of an entity needs to read out the result from the
response (e.g. &lt;code&gt;VehicleGetRouteId&lt;/code&gt; which returns the current route identifier of the vehicle). For this
purpose, each command needs to specify how the response should be handled:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;protected VehicleGetRouteId() {
    super(TraciVersion.LOWEST);

    write()
        .command(0xA4)      // = retrieve vehicle state
        .variable(0x53)     // = route id of entity
        .writeStringParam(); // = write vehicle id

    read()
        .skipBytes(2)          // = skip command and variable in response
        .skipString()          // = skip vehicle id, not relevant
        .readStringWithType(); // = read route id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This example shows the command implementation for getting the route id of a vehicle. As well as &lt;code&gt;write&lt;/code&gt;,
the method &lt;code&gt;read&lt;/code&gt; returns a builder-like construct which provides methods to define how the response is
handled. Here, the first two bytes of the response should be skipped, as well as the string which follows
afterwards. The value the command is interested in is the following string value which holds the id of
the route. By using the method &lt;code&gt;readStringWithType&lt;/code&gt; the string is read out and is passed to the method
&lt;code&gt;constructResult&lt;/code&gt; which needs to be implemented by the command as well:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public String getRouteId(Bridge bridge, String vehicle) {
    return super.executeAndReturn(bridge, vehicle);
}

@Override
protected String constructResult(Status status, Object... objects) { 
    return (String) objects[0];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this simple case, the result of the command consists of one result object only (the route id). Therefore,
it is just extracted from the array of result objects and directly returned.&lt;/p&gt;
&lt;h3 id=&#34;writing-parameters&#34;&gt;Writing parameters&lt;/h3&gt;
&lt;p&gt;In order to write parameters and read results according to the specification of the protocol, several reader
and writer implementations exist. For parameters to be written in the command various writers exists
to write single bytes, strings, integers, and doubles, or special writers for writing lists. The same is for
readers.&lt;/p&gt;
&lt;p&gt;In the following example, the IntegerTraciWriter is shown:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class IntegerTraciWriter extends AbstractTraciParameterWriter&amp;lt;Integer&amp;gt; {

    public IntegerTraciWriter() {
        super(4); 
    }

    public IntegerTraciWriter(int value) {
        super(4, value); 
    }

    @Override
    public int getVariableLength(Integer argument) {
        return getLength();
    }

    @Override
    public void write(DataOutputStream out) throws IOException {
        out.writeInt(value);
    }

    @Override
    public void writeVariableArgument(DataOutputStream out, Integer argument) {
        out.writeInt(argument);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each writer has two tasks. Firstly, it needs to determine the length of the parameter value. For example,
an integer parameter is always 4 bytes long, whereas the length of a string parameter depends on the
size of the argument. Therefore, each writer needs to be able to determine the variable length according
to a given value. Secondly, it needs to write out the actual value into the &lt;code&gt;DataOutputStream&lt;/code&gt; (which
represents the channel to the TraCI server). Furthermore is each writer able to write fixed values, such as
the command identifier which does not change, or variable arguments, such as the vehicle id.&lt;/p&gt;
&lt;h3 id=&#34;reading-results&#34;&gt;Reading results&lt;/h3&gt;
&lt;p&gt;In the following example, the IntegerTraciReader is shown:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class IntegerTraciReader extends AbstractTraciResultReader&amp;lt;Integer&amp;gt; {

    public IntegerTraciReader() {
        super(null);
    }

    public IntegerTraciReader(Matcher&amp;lt;Integer&amp;gt; matcher) {
        super(matcher);
    }

    @Override
    protected Integer readFromStream(DataInputStream in) throws IOException {
        return readInt(in);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A reader has three tasks. Firstly, it reads out a value from the &lt;code&gt;DataInputStream&lt;/code&gt; (which represents the
response channel to the TraCI client) according to the protocol specification. For example, an integer
can be read out directly, while a string requires several single reading operations. Secondly, the reader
needs to take track of the number of bytes it has read in total. To achieve this it is recommended to use
the provided methods of the super class, such as &lt;code&gt;readInt&lt;/code&gt;, &lt;code&gt;readString&lt;/code&gt;, or &lt;code&gt;readByte&lt;/code&gt; .However, if values
need to be read directly from the DataInputStream, the protected field &lt;code&gt;numBytesRead&lt;/code&gt; must always be
increased accordingly. Thirdly, the reader needs to define if the read out value fulfils certain requirements.
Such requirement can be, that a certain value is expected. In this case, a matcher might be passed to the
super constructor.&lt;/p&gt;
&lt;h3 id=&#34;accessing-the-commands&#34;&gt;Accessing the commands&lt;/h3&gt;
&lt;p&gt;For each command, only one object should be instantiated during runtime. To achieve this, the
&lt;code&gt;CommandRegister&lt;/code&gt; is used. This class stores a command once it is created returns only one instance per
command class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;final RouteAdd routeAddCommand = commandRegister.getOrCreate(RouteAdd.class);
//... do something
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, commands should not be accessed directly in the code, but rather using the various facades
available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RouteFacade&lt;/code&gt; - Route specific command calls, such as addRoute and getRouteEdges .&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SimulationFacade&lt;/code&gt; - Provides methods to control the simulation, such as simulateStep .&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TrafficLightFacade&lt;/code&gt; - Provides methods to get or set values for traffic lights.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VehicleFacade&lt;/code&gt; - Provides methods to get or set values for vehicles.
All those facades can be accessed via the &lt;code&gt;TraciClientBridge&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;exception-handling&#34;&gt;Exception handling&lt;/h3&gt;
&lt;p&gt;Exceptions are thrown and handled as following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If a command results in a status response with the status code Error, a &lt;code&gt;TraciCommandException&lt;/code&gt;
is thrown. If this exception is thrown, the TraCI connection is still alive and can be used for
further commands. The facades decide how to handle this exception then and may throw an
&lt;code&gt;InternalFederateException&lt;/code&gt; or log a warning message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a command could not be written properly, or the result could not be read out as wished, an
&lt;code&gt;InternalFederateException&lt;/code&gt; is thrown and an &lt;code&gt;Emergency Exit&lt;/code&gt; is initiated, which eventually
shuts down the TraCI connection. This also happens if a reader or writer throws any kind of
Exception.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;version-handling&#34;&gt;Version handling&lt;/h3&gt;
&lt;p&gt;With future releases of SUMO new TraCI commands will emerge. To achieve downward compatibility
each command can define the lowest TraCI Version it supports. For example, a command which was
introduced with SUMO 0.30.0 and is annotated accordingly, would be skipped automatically if the version
of the TraCI server is lower. However, this concept has not been tested yet properly.&lt;/p&gt;
&lt;h2 id=&#34;libsumo-coupling-implementation&#34;&gt;LibSumo Coupling Implementation&lt;/h2&gt;
&lt;p&gt;Next to the coupling implementation using TraCI, there is a second implementation integrating
LibSumo via Java Native Interface (JNI). It is possible to easily switch the coupling method using
either &lt;code&gt;TraciClientBridge&lt;/code&gt;, or &lt;code&gt;LibSumoBridge&lt;/code&gt; as the &lt;code&gt;Bridge&lt;/code&gt; implementation. This replaces all
commands to get or set values in the SUMO simulation. The &lt;code&gt;CommandRegister&lt;/code&gt; is either initialized
using the &lt;code&gt;&amp;quot;libsumo&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;traci&amp;quot;&lt;/code&gt; package to load the command implementations. All the Facades
(&lt;code&gt;SimulationFacade&lt;/code&gt;, &lt;code&gt;VehicleFacade&lt;/code&gt; etc.) which contain all the actual &amp;ldquo;business&amp;rdquo; logic, remain untouched.&lt;/p&gt;
&lt;p&gt;The introduction of new commands requires the implementation of these three items:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface in &lt;code&gt;org.eclipse.mosaic.fed.sumo.bridge.api&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;Implementation of TraCI command in package &lt;code&gt;org.eclipse.mosaic.fed.sumo.bridge.traci&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Implementation of LibSumo command in package &lt;code&gt;org.eclipse.mosaic.fed.sumo.bridge.libsumo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the code in the facades should always work with the interfaces from the &lt;code&gt;org.eclipse.mosaic.fed.sumo.bridge.api&lt;/code&gt; package.&lt;/p&gt;















&lt;figure id=&#34;figure-implementations-of-libsumo-and-traci-coupling&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/sumo-traci-libsumo.png&#34; data-caption=&#34;Implementations of LibSumo and TraCI coupling.&#34;&gt;


  &lt;img src=&#34;../images/sumo-traci-libsumo.png&#34; alt=&#34;&#34; width=&#34;600px&#34; &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Implementations of LibSumo and TraCI coupling.
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Simple Network Simulator (SNS)</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_sns/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_sns/</guid>
      <description>&lt;p&gt;The Simple Network Simulator (SNS) aims to provide simple and fast capabilities for the
transmission of V2X-messages using Ad hoc communication. In order to stay performant the simulator makes abstractions
in certain places. Those abstractions will be discussed later on.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;This simulator does not need to be installed. It is delivered as part of the Eclipse MOSAIC installation package.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The SNS offers some configurability regarding the way transmissions are simulated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Main Configuration:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Parameter&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Default Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;maximumTtl&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the upper bound for the amount of hops a message can make. (Note: messages can have individual &lt;code&gt;ttl&lt;/code&gt;&amp;rsquo;s)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;singlehopRadius&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Fallback radius to be used for transmission, if no radius is defined in the &lt;code&gt;AdhocConfiguration&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;double&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;509.4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;singlehopDelay&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A delay configuration for the direct communication between two nodes. (





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/extending_mosaic/delay_models/&#34;&gt;See here&lt;/a&gt;)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Delay&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ConstantDelay&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;singlehopTransmission&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This contains the transmission configurations for &lt;code&gt;lossProbability&lt;/code&gt; and &lt;code&gt;maxRetries&lt;/code&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CTransmission&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;adhocTransmissionModel&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A class extending &lt;code&gt;AdhocTransmissionModel&lt;/code&gt;, this will decide the logic for transmissions.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;AdhocTransmissionModel&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;SimpleAdhoc TransmissionModel&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;On default the SNS will use the &lt;code&gt;SimpleAdhocTransmissionModel&lt;/code&gt; with a &lt;code&gt;ConstantDelay&lt;/code&gt; using 0 as delay. This means it usually
makes sense to specify the &lt;code&gt;AdhocTransmissionModel&lt;/code&gt; explicitly and use a more realistic &lt;code&gt;Delay&lt;/code&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Example Configuration:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;maximumTtl&amp;quot;: 20,
    &amp;quot;singlehopRadius&amp;quot;: 300.5,
    &amp;quot;singlehopDelay&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;SimpleRandomDelay&amp;quot;,
        &amp;quot;steps&amp;quot;: 5,
        &amp;quot;minDelay&amp;quot;: &amp;quot;1.5 ms&amp;quot;,
        &amp;quot;maxDelay&amp;quot;: &amp;quot;2.5 ms&amp;quot;
    }, 
    &amp;quot;singlehopTransmission&amp;quot;: {
        &amp;quot;lossProbability&amp;quot;: 0.0,
        &amp;quot;maxRetries&amp;quot;: 0
    },
    &amp;quot;adhocTransmissionModel&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;SimpleAdhocTransmissionModel&amp;quot;,
        &amp;quot;simpleMultihopDelay&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;GammaRandomDelay&amp;quot;,
            &amp;quot;minDelay&amp;quot;: &amp;quot;10 ms&amp;quot;,
            &amp;quot;expDelay&amp;quot;: &amp;quot;30 ms&amp;quot;
        },
        &amp;quot;simpleMultihopTransmission&amp;quot;: {
            &amp;quot;lossProbability&amp;quot;: 0.1,
            &amp;quot;maxRetries&amp;quot;: 2 
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Read the detailed documentation of the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/sns_config/&#34;&gt;SNS Configuration&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;transmission-logic&#34;&gt;Transmission Logic&lt;/h2&gt;
&lt;p&gt;SNS differentiates between two types of Ad hoc transmissions, geographically- and topologically-scoped transmissions, which
generally are abbreviated with &lt;em&gt;GeoCast&lt;/em&gt; and &lt;em&gt;TopoCast&lt;/em&gt; respectively.&lt;br&gt;
GeoCasts are limited to &lt;em&gt;BroadCasts&lt;/em&gt;. Accordingly, there is no explicit addressing
of receivers (other than 255.255.255.255), instead a destination area is specified. However, GeoCasts allow for multihop forwarding.&lt;br&gt;
TopoCasts on the other hand use means of IPv4 addressing to transmit messages. Since the SNS was not build to simulate transmissions using complex topology-constructs, TopoCasts
are limited to transmissions with a single hop. However, TopoCasts support &lt;em&gt;BroadCasts&lt;/em&gt; and &lt;em&gt;UniCasts&lt;/em&gt; (we are omitting Anycasts).
Most transmissions in the Ad hoc domain will be some form of Broadcast, meaning every reachable entity is eligible to
receive a message.&lt;/p&gt;



&lt;div class=&#34;svg-wrap mt-1 mb-4&#34;&gt;
  &lt;div class=&#34;inner&#34;&gt;
    &lt;svg viewBox=&#34;0 0 814.3453369140625 1203.831298828125&#34; style=&#34;max-width: 814.345px; background-color: white;&#34; aria-labelledby=&#34;chart-title-mermaid-1666691301359 chart-desc-mermaid-1666691301359&#34; role=&#34;img&#34; xmlns:xlink=&#34;http://www.w3.org/1999/xlink&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;100%&#34; id=&#34;mermaid-1666691301359&#34;&gt;&lt;title id=&#34;chart-title-mermaid-1666691301359&#34;/&gt;&lt;desc id=&#34;chart-desc-mermaid-1666691301359&#34;/&gt;&lt;style&gt;#mermaid-1666691301359 {font-family:&#34;trebuchet ms&#34;,verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-1666691301359 .error-icon{fill:#552222;}#mermaid-1666691301359 .error-text{fill:#552222;stroke:#552222;}#mermaid-1666691301359 .edge-thickness-normal{stroke-width:2px;}#mermaid-1666691301359 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1666691301359 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1666691301359 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1666691301359 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1666691301359 .marker{fill:#333333;stroke:#333333;}#mermaid-1666691301359 .marker.cross{stroke:#333333;}#mermaid-1666691301359 svg{font-family:&#34;trebuchet ms&#34;,verdana,arial,sans-serif;font-size:16px;}#mermaid-1666691301359 .label{font-family:&#34;trebuchet ms&#34;,verdana,arial,sans-serif;color:#333;}#mermaid-1666691301359 .cluster-label text{fill:#333;}#mermaid-1666691301359 .cluster-label span{color:#333;}#mermaid-1666691301359 .label text,#mermaid-1666691301359 span{fill:#333;color:#333;}#mermaid-1666691301359 .node rect,#mermaid-1666691301359 .node circle,#mermaid-1666691301359 .node ellipse,#mermaid-1666691301359 .node polygon,#mermaid-1666691301359 .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-1666691301359 .node .label{text-align:center;}#mermaid-1666691301359 .node.clickable{cursor:pointer;}#mermaid-1666691301359 .arrowheadPath{fill:#333333;}#mermaid-1666691301359 .edgePath .path{stroke:#333333;stroke-width:2.0px;}#mermaid-1666691301359 .flowchart-link{stroke:#333333;fill:none;}#mermaid-1666691301359 .edgeLabel{background-color:#e8e8e8;text-align:center;}#mermaid-1666691301359 .edgeLabel rect{opacity:0.5;background-color:#e8e8e8;fill:#e8e8e8;}#mermaid-1666691301359 .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-1666691301359 .cluster text{fill:#333;}#mermaid-1666691301359 .cluster span{color:#333;}#mermaid-1666691301359 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:&#34;trebuchet ms&#34;,verdana,arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1666691301359 :root{--mermaid-font-family:&#34;trebuchet ms&#34;,verdana,arial,sans-serif;}&lt;/style&gt;&lt;g&gt;&lt;g class=&#34;output&#34;&gt;&lt;g class=&#34;clusters&#34;/&gt;&lt;g class=&#34;edgePaths&#34;&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id1-id2&#34; class=&#34;edgePath LS-id1 LE-id2&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead39)&#34; d=&#34;M238.4554672241211,47L238.4554672241211,51.166666666666664C238.4554672241211,55.333333333333336,238.4554672241211,63.666666666666664,238.53880055745444,72.08333384195963C238.62213389078775,80.5000010172526,238.78880055745444,89.0000020345052,238.87213389078775,93.25000254313152L238.9554672241211,97.50000305175782&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead39&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id2-id3&#34; class=&#34;edgePath LS-id2 LE-id3&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead40)&#34; d=&#34;M195.61012530191223,222.07497362954896L181.68031275159353,234.9658644585434C167.75050020127483,247.85675528753782,139.89087510063743,273.6385369455267,126.04439588365204,292.3627611078545C112.19791666666667,311.0869852701823,112.36458333333333,322.75365193684894,112.44791666666667,328.5869852701823L112.53125,334.4203186035156&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead40&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id2-id4&#34; class=&#34;edgePath LS-id2 LE-id4&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead41)&#34; d=&#34;M282.3008059953237,222.07497067703954L296.06395240414344,234.96586199811887C309.8270988129632,247.85675331919825,337.3533916306027,273.6385359613569,351.19987137275575,293.9471356157697C365.0463511149089,314.25573527018247,365.2130177815755,329.09115193684926,365.2963511149089,336.50886027018265L365.3796844482422,343.9265686035161&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead41&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id3-id5&#34; class=&#34;edgePath LS-id3 LE-id5&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead42)&#34; d=&#34;M112.53125,475.1156311035156L112.44791666666667,480.7822977701823C112.36458333333333,486.44896443684894,112.19791666666667,497.7822977701823,112.11458333333333,520.8351618448893C112.03125,543.8880259195963,112.03125,578.6604207356771,112.03125,596.0466181437174L112.03125,613.4328155517578&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead42&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id4-id6&#34; class=&#34;edgePath LS-id4 LE-id6&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead43)&#34; d=&#34;M365.3796844482422,465.609378051758L365.2963511149089,472.86042022705095C365.2130177815755,480.1114624023439,365.0463511149089,494.6135467529298,365.0463511149089,507.6979227701823C365.0463511149089,520.7822987874348,365.2130177815755,532.4489664713541,365.2963511149089,538.2823003133136L365.3796844482422,544.1156341552733&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead43&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id6-id7&#34; class=&#34;edgePath LS-id6 LE-id7&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead44)&#34; d=&#34;M313.44946599963095,689.8197846031466L297.41166437469246,704.1414871692888C281.373862749754,718.4631897354311,249.298259499877,747.1065948677156,233.2604578749385,783.893400583272C217.22265625,820.6802062988281,217.22265625,865.6104125976562,217.22265625,888.0755157470703L217.22265625,910.5406188964844&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead44&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id6-id8&#34; class=&#34;edgePath LS-id6 LE-id8&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead45)&#34; d=&#34;M417.30990610436123,689.8197874991545L433.1810405280484,704.1414895826288C449.05217495173565,718.463191666103,480.79444379911,747.1065958330515,496.7489115561305,767.2616322671116C512.703379313151,787.416668701172,512.8700459798177,799.0833374023438,512.953379313151,804.9166717529297L513.0367126464844,810.7500061035156&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead45&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id8-id9&#34; class=&#34;edgePath LS-id8 LE-id9&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead46)&#34; d=&#34;M450.5991389557637,1006.8936702057637L435.42662519588384,1022.9665981369645C420.25411143600394,1039.0395260681653,389.90908391624413,1071.185381930567,374.7365701563643,1094.5916431951011C359.5640563964844,1117.9979044596355,359.5640563964844,1132.664571126302,359.5640563964844,1139.9979044596355L359.5640563964844,1147.3312377929688&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead46&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; id=&#34;L-id8-id10&#34; class=&#34;edgePath LS-id8 LE-id10&#34;&gt;&lt;path style=&#34;fill:none&#34; marker-end=&#34;url(#arrowhead47)&#34; d=&#34;M575.4742922322762,1006.8936765177241L590.4801383429775,1022.9666033969315C605.485984453679,1039.039530276139,635.4976766750816,1071.1853840345539,650.503522785783,1093.0083109137613C665.5093688964844,1114.8312377929688,665.5093688964844,1126.3312377929688,665.5093688964844,1132.0812377929688L665.5093688964844,1137.8312377929688&#34; class=&#34;path&#34;/&gt;&lt;defs&gt;&lt;marker orient=&#34;auto&#34; markerHeight=&#34;6&#34; markerWidth=&#34;8&#34; markerUnits=&#34;strokeWidth&#34; refY=&#34;5&#34; refX=&#34;9&#34; viewBox=&#34;0 0 10 10&#34; id=&#34;arrowhead47&#34;&gt;&lt;path style=&#34;stroke-width: 1; stroke-dasharray: 1, 0;&#34; class=&#34;arrowheadPath&#34; d=&#34;M 0 0 L 10 5 L 0 10 z&#34;/&gt;&lt;/marker&gt;&lt;/defs&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;edgeLabels&#34;&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(0,0)&#34;&gt;&lt;rect height=&#34;0&#34; width=&#34;0&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;0&#34; width=&#34;0&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id1&#39; L-LE-id2&#34; id=&#34;L-L-id1-id2&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(112.03125,299.4203186035156)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-32.09375,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;64.1875&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;64.1875&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id2&#39; L-LE-id3&#34; id=&#34;L-L-id2-id3&#34;&gt;TopoCast&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(364.8796844482422,299.4203186035156)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-29.46875,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;58.9375&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;58.9375&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id2&#39; L-LE-id4&#34; id=&#34;L-L-id2-id4&#34;&gt;GeoCast&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(112.03125,509.1156311035156)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-11.328125,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;22.65625&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;22.65625&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id3&#39; L-LE-id5&#34; id=&#34;L-L-id3-id5&#34;&gt;Yes&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(364.8796844482422,509.1156311035156)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-11.328125,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;22.65625&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;22.65625&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id4&#39; L-LE-id6&#34; id=&#34;L-L-id4-id6&#34;&gt;Yes&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(217.22265625,775.75)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-11.328125,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;22.65625&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;22.65625&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id6&#39; L-LE-id7&#34; id=&#34;L-L-id6-id7&#34;&gt;Yes&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(512.5367126464844,775.75)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-9.3984375,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;18.796875&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;18.796875&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id6&#39; L-LE-id8&#34; id=&#34;L-L-id6-id8&#34;&gt;No&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(359.5640563964844,1103.3312377929688)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-11.328125,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;22.65625&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;22.65625&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id8&#39; L-LE-id9&#34; id=&#34;L-L-id8-id9&#34;&gt;Yes&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(665.5093688964844,1103.3312377929688)&#34; class=&#34;edgeLabel&#34;&gt;&lt;g class=&#34;label&#34; transform=&#34;translate(-9.3984375,-9.5)&#34;&gt;&lt;rect height=&#34;19&#34; width=&#34;18.796875&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;18.796875&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;&lt;span style=&#34;&#34; class=&#34;edgeLabel L-LS-id8&#39; L-LE-id10&#34; id=&#34;L-L-id8-id10&#34;&gt;No&lt;/span&gt;&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g class=&#34;nodes&#34;&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(238.4554672241211,27.5)&#34; id=&#34;flowchart-id1-56&#34; class=&#34;node default&#34;&gt;&lt;rect class=&#34;label-container&#34; height=&#34;39&#34; width=&#34;142.640625&#34; y=&#34;-19.5&#34; x=&#34;-71.3203125&#34; ry=&#34;0&#34; rx=&#34;0&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-61.3203125,-9.5)&#34;&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;122.640625&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;V2X-Transmission&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(238.4554672241211,180.9601593017578)&#34; id=&#34;flowchart-id2-57&#34; class=&#34;node default&#34;&gt;&lt;polygon class=&#34;label-container&#34; transform=&#34;translate(-83.96015625,83.96015625)&#34; points=&#34;83.96015625,0 167.9203125,-83.96015625 83.96015625,-167.9203125 0,-83.96015625&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-63.7890625,-9.5)&#34;&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;127.578125&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Transmission Type&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(112.03125,404.2679748535156)&#34; id=&#34;flowchart-id3-60&#34; class=&#34;node default&#34;&gt;&lt;polygon class=&#34;label-container&#34; transform=&#34;translate(-70.34765625,70.34765625)&#34; points=&#34;70.34765625,0 140.6953125,-70.34765625 70.34765625,-140.6953125 0,-70.34765625&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-39.1640625,-19)&#34;&gt;&lt;foreignObject height=&#34;38&#34; width=&#34;78.328125&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Broadcast&lt;br /&gt;or Unicast?&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(364.8796844482422,404.2679748535156)&#34; id=&#34;flowchart-id4-61&#34; class=&#34;node default&#34;&gt;&lt;polygon class=&#34;label-container&#34; transform=&#34;translate(-60.84140625,60.84140625)&#34; points=&#34;60.84140625,0 121.6828125,-60.84140625 60.84140625,-121.6828125 0,-60.84140625&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-38.1015625,-9.5)&#34;&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;76.203125&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Broadcast?&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(112.03125,642.4328155517578)&#34; id=&#34;flowchart-id5-66&#34; class=&#34;node default&#34;&gt;&lt;rect class=&#34;label-container&#34; height=&#34;58&#34; width=&#34;208.0625&#34; y=&#34;-29&#34; x=&#34;-104.03125&#34; ry=&#34;29&#34; rx=&#34;29&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-86.78125,-19)&#34;&gt;&lt;foreignObject height=&#34;38&#34; width=&#34;173.5625&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Simulate TopoCast using&lt;br /&gt;singlehop configuration.&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(364.8796844482422,642.4328155517578)&#34; id=&#34;flowchart-id6-69&#34; class=&#34;node default&#34;&gt;&lt;polygon class=&#34;label-container&#34; transform=&#34;translate(-98.8171875,98.8171875)&#34; points=&#34;98.8171875,0 197.634375,-98.8171875 98.8171875,-197.634375 0,-98.8171875&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-70.796875,-19)&#34;&gt;&lt;foreignObject height=&#34;38&#34; width=&#34;141.59375&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Simple transmission&lt;br /&gt;model?&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(217.22265625,939.5406188964844)&#34; id=&#34;flowchart-id7-72&#34; class=&#34;node default&#34;&gt;&lt;rect class=&#34;label-container&#34; height=&#34;58&#34; width=&#34;232.046875&#34; y=&#34;-29&#34; x=&#34;-116.0234375&#34; ry=&#34;29&#34; rx=&#34;29&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-98.7734375,-19)&#34;&gt;&lt;foreignObject height=&#34;38&#34; width=&#34;197.546875&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Simulate transmission using&lt;br /&gt;simpleMultihopDelay.&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(512.5367126464844,939.5406188964844)&#34; id=&#34;flowchart-id8-75&#34; class=&#34;node default&#34;&gt;&lt;polygon class=&#34;label-container&#34; transform=&#34;translate(-129.290625,129.290625)&#34; points=&#34;129.290625,0 258.58125,-129.290625 129.290625,-258.58125 0,-129.290625&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-104.65625,-19)&#34;&gt;&lt;foreignObject height=&#34;38&#34; width=&#34;209.3125&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Sender directly able to reach&lt;br /&gt;destination area?&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(359.5640563964844,1166.8312377929688)&#34; id=&#34;flowchart-id9-78&#34; class=&#34;node default&#34;&gt;&lt;rect class=&#34;label-container&#34; height=&#34;39&#34; width=&#34;230.21875&#34; y=&#34;-19.5&#34; x=&#34;-115.109375&#34; ry=&#34;19.5&#34; rx=&#34;19.5&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-100.234375,-9.5)&#34;&gt;&lt;foreignObject height=&#34;19&#34; width=&#34;200.46875&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Flooding in destination area&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g style=&#34;opacity: 1;&#34; transform=&#34;translate(665.5093688964844,1166.8312377929688)&#34; id=&#34;flowchart-id10-81&#34; class=&#34;node default&#34;&gt;&lt;rect class=&#34;label-container&#34; height=&#34;58&#34; width=&#34;281.671875&#34; y=&#34;-29&#34; x=&#34;-140.8359375&#34; ry=&#34;29&#34; rx=&#34;29&#34;/&gt;&lt;g transform=&#34;translate(0,0)&#34; class=&#34;label&#34;&gt;&lt;g transform=&#34;translate(-123.5859375,-19)&#34;&gt;&lt;foreignObject height=&#34;38&#34; width=&#34;247.171875&#34;&gt;&lt;div style=&#34;display: inline-block; white-space: nowrap;&#34; xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&gt;Greedy Forwarding to reach area,&lt;br /&gt;then flooding in destination areay.&lt;/div&gt;&lt;/foreignObject&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;
  &lt;/div&gt;
  
    &lt;div class=&#34;desc&#34;&gt;
      This flowchart tells how different types of messages are handled internally.
    &lt;/div&gt;
  
&lt;/div&gt;


&lt;h3 id=&#34;topocasts&#34;&gt;TopoCasts&lt;/h3&gt;
&lt;p&gt;The only way of directly addressing entities is a &lt;em&gt;SingleHopUniCast&lt;/em&gt; (see figure below), the sender will try to address an entity
in its transmission range.















&lt;figure id=&#34;figure-singlehopunicast-the-rsu-is-directly-addressing-the-green-vehicle&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/SingleHopUniCast.png&#34; data-caption=&#34;SingleHopUniCast: The RSU is directly addressing the green vehicle.&#34;&gt;


  &lt;img src=&#34;../images/SingleHopUniCast.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    SingleHopUniCast: The RSU is directly addressing the green vehicle.
  &lt;/figcaption&gt;


&lt;/figure&gt;

The counterpart to that is a &lt;em&gt;SingleHopBroadCast&lt;/em&gt; (see figure below), this form of transmission is commonly used for CAMs (Cooperative Awareness Messages)
and other types of intermediate warning messages to all entities in transmission range.&lt;br&gt;















&lt;figure id=&#34;figure-singlehopbroadcast-the-rsu-is-addressing-all-units-in-transmission-range&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/SingleHopBroadCast.png&#34; data-caption=&#34;SingleHopBroadCast: The RSU is addressing all units in transmission range.&#34;&gt;


  &lt;img src=&#34;../images/SingleHopBroadCast.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    SingleHopBroadCast: The RSU is addressing all units in transmission range.
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;geocasts&#34;&gt;GeoCasts&lt;/h3&gt;
&lt;p&gt;As already explained, GeoCasts do not support direct addressing, so there is no form of UniCast. Instead of addressing
entities, GeoCasts specify a destination area in which a message should be distributed.
The SNS supports two ways to simulate GeoCasts.
A simple but performant model (&lt;code&gt;SimpleAdhocTransmissionModel&lt;/code&gt;) &amp;amp; a fairly realistic model ( &lt;code&gt;SophisticatedAdhocTransmissionModel&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The simple model assumes a transmission to all entities in the specified area, whereas the delay will be calculated using the configured delay-type and the successful reception will be determined by the uniformly distributed lossProbability.
The figure below depicts this behaviour















&lt;figure id=&#34;figure-simple-geobroadcast-the-rsu-is-sending-to-all-entities-in-the-destination-area-all-arrows-transmissions-will-have-a-uniquely-calculated-delay-or-possible-loss&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/SimpleMultiHop.png&#34; data-caption=&#34;Simple GeoBroadCast: The RSU is sending to all entities in the destination area. All arrows (transmissions) will have a uniquely calculated delay or possible loss.&#34;&gt;


  &lt;img src=&#34;../images/SimpleMultiHop.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Simple GeoBroadCast: The RSU is sending to all entities in the destination area. All arrows (transmissions) will have a uniquely calculated delay or possible loss.
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The realistic model accounts for possible transmission failures more accurately. The easiest case is that the sender itself is inside
of the destination area (or is able to communicate with an entity inside the destination area) and will start a 





  
  

&lt;a href=&#34;#flooding-transmission&#34;&gt;Flooding Transmission&lt;/a&gt; within this area (see figure below).















&lt;figure id=&#34;figure-geobroadcast-using-flooding-transmissionflooding-transmission-note-the-area-is-not-limited-to-circles&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/FloodingTransmission.png&#34; data-caption=&#34;GeoBroadCast using Flooding Transmission. Note: the area is not limited to circles.&#34;&gt;


  &lt;img src=&#34;../images/FloodingTransmission.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    GeoBroadCast using &lt;a href=&#34;#flooding-transmission&#34;&gt;Flooding Transmission&lt;/a&gt;. Note: the area is not limited to circles.
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In case the sending entity is outside of the destination area, a 





  
  

&lt;a href=&#34;#approaching-transmission&#34;&gt;Forwarding Transmission&lt;/a&gt; has to
be executed first. This is can also be described as an &lt;em&gt;AnyCast&lt;/em&gt;, since the goal of this transmission is to reach &lt;em&gt;any&lt;/em&gt; entity
inside the destination area. We try to achieve this by building a &amp;ldquo;chain&amp;rdquo; of entities, that will forward the message to the destination
are (see figure below).















&lt;figure id=&#34;figure-forwarding-transmission-by-building-a-chain-of-vehicles&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/ApproachingTransmission.png&#34; data-caption=&#34;Forwarding Transmission, by building a &amp;ldquo;chain&amp;rdquo; of vehicles.&#34;&gt;


  &lt;img src=&#34;../images/ApproachingTransmission.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Forwarding Transmission, by building a &amp;ldquo;chain&amp;rdquo; of vehicles.
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The SNS however never uses 





  
  

&lt;a href=&#34;#approaching-transmission&#34;&gt;Forwarding Transmissions&lt;/a&gt; individually, rather they are combined with a 





  
  

&lt;a href=&#34;#flooding-transmission&#34;&gt;Flooding Transmission&lt;/a&gt;, which
will simulate a way, that GeaCasts can be implemented in reality. The figure below depicts this behaviour.















&lt;figure id=&#34;figure-forwarding-transmission-followed-by-a-flooding-transmissionflooding-transmission-to-realistically-simulate-geocasts&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/ApproachingAndFlooding.png&#34; data-caption=&#34;Forwarding Transmission followed by a Flooding Transmission to realistically simulate GeoCasts.&#34;&gt;


  &lt;img src=&#34;../images/ApproachingAndFlooding.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Forwarding Transmission followed by a &lt;a href=&#34;#flooding-transmission&#34;&gt;Flooding Transmission&lt;/a&gt; to realistically simulate GeoCasts.
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;transmission-models&#34;&gt;Transmission Models&lt;/h2&gt;
&lt;p&gt;As already mentioned in the previous abstracts, the SNS supports different transmission models for different use cases.
Depending on the configuration of the SNS and the type of message send, different models will be used.
The models are located in the package &lt;code&gt;org.eclipse.mosaic.fed.sns.ambassador.model&lt;/code&gt;. This chapter aims to give
a detailed inside in the workings of the models.&lt;/p&gt;
&lt;h3 id=&#34;simpleadhoctransmissionmodel&#34;&gt;&lt;code&gt;SimpleAdhocTransmissionModel&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is the most basic of all transmission models and will be your model of choice if you are not interested in completely
accurate transmission results but care for performance. This model will approximate GeoCasts using the defined &lt;code&gt;simpleMultihopDelay&lt;/code&gt;
and &lt;code&gt;simpleMultihopTransmission&lt;/code&gt; parameters.
For TopoCasts the usual &lt;code&gt;singlehopDelay&lt;/code&gt; will be used.
This model only checks, whether a potential receiver is inside the destination area and has enabled Adhoc capabilities.
If those conditions are met it will simulate the transmission by calculating an actual delay value and saving it into a
transmission-result. Such a result holds information of the success of the transmission, the delay-value, the amount of hops,
and the number of attempts. Though the amount of hops will always be 1 for this model.&lt;/p&gt;
&lt;h3 id=&#34;sophisticatedadhoctransmissionmodel&#34;&gt;&lt;code&gt;SophisticatedAdhocTransmissionModel&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This model offers are more realistic simulation of adhoc transmissions, using an implementation of a greedy-forwarding and flooding
algorithm (see 




&lt;a href=&#34;https://en.wikipedia.org/wiki/Geographic_routing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;greedy forwarding&lt;/a&gt; &amp;amp;





&lt;a href=&#34;https://en.wikipedia.org/wiki/Flooding_%28computer_networking%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;flooding&lt;/a&gt;). For TopoCasts this model behaves very
similarly to the &lt;code&gt;SimpleAdhocTransmissionModel&lt;/code&gt;, since TopoCasts are always configured with only one hop.
For GeoCasts however, this model follows the flowchart above, trying to &amp;ldquo;approach&amp;rdquo; a destination area if it can&amp;rsquo;t be reached directly.&lt;/p&gt;
&lt;h4 id=&#34;approaching-greedy-forwarding&#34;&gt;Approaching (Greedy forwarding)&lt;/h4&gt;
&lt;p&gt;Approaching can be imagined as building a &amp;ldquo;chain&amp;rdquo; of entities to reach an area. However, there is no
guarantee, that even if such a chain exists, it will be found. The way that this chain is build follows the subsequent steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start from the sender and collect all reachable entities.&lt;/li&gt;
&lt;li&gt;Choose out of all reachable entities the one, that is closest to any node in the destination area.&lt;/li&gt;
&lt;li&gt;Use the chosen node and repeat the first step.&lt;/li&gt;
&lt;li&gt;Repeat until either a node inside the destination area is reached, or the TTL (time to live) is exceeded.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By always choosing the node with the shortest distance to the destination area, we omit a lot of possible solutions.
Greedy Forwarding isn&amp;rsquo;t optimal, but offers a performant approach for this problem. &amp;ldquo;Face Routing&amp;rdquo;-algorithms will always
find a path if one exists, however this hasn&amp;rsquo;t been implemented yet (feel free to contribute :).
The figure below shows an example of those shortcomings, the message will be send using the green nodes and won&amp;rsquo;t receive the destination
area, even though there is a possible &amp;ldquo;chain&amp;rdquo; using the yellow nodes.&lt;/p&gt;



&lt;div class=&#34;svg-wrap mt-1 mb-4&#34;&gt;
  &lt;div class=&#34;inner&#34;&gt;
    &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; standalone=&#34;no&#34;?&gt;
&lt;svg
   xmlns:dc=&#34;http://purl.org/dc/elements/1.1/&#34;
   xmlns:cc=&#34;http://creativecommons.org/ns#&#34;
   xmlns:rdf=&#34;http://www.w3.org/1999/02/22-rdf-syntax-ns#&#34;
   xmlns:svg=&#34;http://www.w3.org/2000/svg&#34;
   xmlns=&#34;http://www.w3.org/2000/svg&#34;
   xmlns:sodipodi=&#34;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&#34;
   xmlns:inkscape=&#34;http://www.inkscape.org/namespaces/inkscape&#34;
   width=&#34;100%&#34;
   height=&#34;100%&#34;
   viewBox=&#34;0 0 1000 1100&#34;
   preserveAspectRatio=&#34;xMinYMin meet&#34;
   version=&#34;1.1&#34;
   id=&#34;svg112&#34;
   sodipodi:docname=&#34;shortcomingsApproaching.svg&#34;
   inkscape:version=&#34;0.92.4 (5da689c313, 2019-01-14)&#34;&gt;
  &lt;metadata
     id=&#34;metadata116&#34;&gt;
    &lt;rdf:RDF&gt;
      &lt;cc:Work
         rdf:about=&#34;&#34;&gt;
        &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;
        &lt;dc:type
           rdf:resource=&#34;http://purl.org/dc/dcmitype/StillImage&#34; /&gt;
        &lt;dc:title&gt;&lt;/dc:title&gt;
      &lt;/cc:Work&gt;
    &lt;/rdf:RDF&gt;
  &lt;/metadata&gt;
  &lt;sodipodi:namedview
     pagecolor=&#34;#ffffff&#34;
     bordercolor=&#34;#000000&#34;
     borderopacity=&#34;1&#34;
     objecttolerance=&#34;10&#34;
     gridtolerance=&#34;10&#34;
     guidetolerance=&#34;10&#34;
     inkscape:pageopacity=&#34;0&#34;
     inkscape:pageshadow=&#34;2&#34;
     inkscape:window-width=&#34;2560&#34;
     inkscape:window-height=&#34;1377&#34;
     id=&#34;namedview114&#34;
     showgrid=&#34;false&#34;
     inkscape:zoom=&#34;0.54909091&#34;
     inkscape:cx=&#34;70.460088&#34;
     inkscape:cy=&#34;483.05537&#34;
     inkscape:window-x=&#34;1912&#34;
     inkscape:window-y=&#34;-8&#34;
     inkscape:window-maximized=&#34;1&#34;
     inkscape:current-layer=&#34;g110&#34; /&gt;
  &lt;defs
     id=&#34;defs66&#34;&gt;
    &lt;clipPath
       id=&#34;EGXEKOJWuGVn&#34;&gt;
      &lt;path
         id=&#34;svg_1&#34;
         d=&#34;m0,0l1673,0l0,1285l-1673,0l0,-1285z&#34;
         fill=&#34;none&#34; /&gt;
    &lt;/clipPath&gt;
  &lt;/defs&gt;
  &lt;g
     id=&#34;g110&#34;&gt;
    &lt;title
       id=&#34;title68&#34;&gt;Layer 1&lt;/title&gt;
    &lt;path
       style=&#34;fill:#ffd700;fill-opacity:0.3&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 460.74242,186.92776 c 0,75.84645 -61.4857,137.33215 -137.33215,137.33215 -75.84645,0 -137.33215,-61.4857 -137.33215,-137.33215 0,-75.84645 61.4857,-137.332153 137.33215,-137.332153 75.84645,0 137.33215,61.485703 137.33215,137.332153 z&#34;
       id=&#34;svg_5&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#caab06;stroke-width:2.5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 460.74242,186.92776 c 0,75.84645 -61.4857,137.33215 -137.33215,137.33215 -75.84645,0 -137.33215,-61.4857 -137.33215,-137.33215 0,-75.84645 61.4857,-137.332153 137.33215,-137.332153 75.84645,0 137.33215,61.485703 137.33215,137.332153 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_6&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;text
       style=&#34;font-style:normal;font-weight:normal;font-size:20px;font-family:geogebra-sans-serif, sans-serif;text-anchor:start;fill:#ffd700&#34;
       font-size=&#34;20px&#34;
       font-style=&#34;normal&#34;
       font-weight=&#34;normal&#34;
       x=&#34;229.62225&#34;
       y=&#34;37.811882&#34;
       id=&#34;svg_7&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34;&gt;Destination Area&lt;/text&gt;
    &lt;text
       style=&#34;font-style:normal;font-weight:normal;font-size:20px;font-family:geogebra-sans-serif, sans-serif;text-anchor:start;fill:none;stroke:#ffffff;stroke-width:3;stroke-linejoin:bevel;stroke-miterlimit:10&#34;
       font-size=&#34;20px&#34;
       font-style=&#34;normal&#34;
       font-weight=&#34;normal&#34;
       x=&#34;229.62225&#34;
       y=&#34;37.811882&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_8&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34;&gt;Destination Area&lt;/text&gt;
    &lt;text
       style=&#34;font-style:normal;font-weight:normal;font-size:20px;font-family:geogebra-sans-serif, sans-serif;text-anchor:start;fill:#978006;stroke:none;stroke-opacity:1;&#34;
       font-size=&#34;20px&#34;
       font-style=&#34;normal&#34;
       font-weight=&#34;normal&#34;
       x=&#34;229.62225&#34;
       y=&#34;37.811882&#34;
       id=&#34;svg_9&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34;&gt;Destination Area&lt;/text&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 529.40849,873.5885 c 0,113.7697 -92.22855,205.9982 -205.99822,205.9982 -113.76968,0 -205.99822,-92.2285 -205.99822,-205.9982 0,-113.76967 92.22854,-205.99822 205.99822,-205.99822 113.76967,0 205.99822,92.22855 205.99822,205.99822 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_10&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 486.82048,688.91189 c 0,113.76968 -92.22854,205.99822 -205.99822,205.99822 -113.76968,0 -205.99822,-92.22854 -205.99822,-205.99822 0,-113.76968 92.22854,-205.99822 205.99822,-205.99822 113.76968,0 205.99822,92.22854 205.99822,205.99822 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_11&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 428.82048,511.91189 c 0,113.76968 -92.22854,205.99822 -205.99822,205.99822 -113.76968,0 -205.99822,-92.22854 -205.99822,-205.99822 0,-113.76968 92.22854,-205.99822 205.99822,-205.99822 113.76968,0 205.99822,92.22854 205.99822,205.99822 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_12&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 696.92801,775.58689 c 0,113.76968 -92.2286,205.99821 -205.99825,205.99821 -113.76968,0 -205.99822,-92.22853 -205.99822,-205.99821 0,-113.76968 92.22854,-205.99822 205.99822,-205.99822 113.76965,0 205.99825,92.22854 205.99825,205.99822 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_13&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 846.82051,657.91189 c 0,113.76968 -92.2286,205.99822 -205.9982,205.99822 -113.76973,0 -205.99827,-92.22854 -205.99827,-205.99822 0,-113.76968 92.22854,-205.99822 205.99827,-205.99822 113.7696,0 205.9982,92.22854 205.9982,205.99822 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_14&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 988.82051,527.91189 c 0,113.76968 -92.2286,205.99822 -205.9982,205.99822 -113.7697,0 -205.99827,-92.22854 -205.99827,-205.99822 0,-113.76968 92.22857,-205.99822 205.99827,-205.99822 113.7696,0 205.9982,92.22854 205.9982,205.99822 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_15&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 941.82051,347.91189 c 0,113.76968 -92.2286,205.99822 -205.9982,205.99822 -113.7697,0 -205.99827,-92.22854 -205.99827,-205.99822 0,-113.76968 92.22857,-205.99822 205.99827,-205.99822 113.7696,0 205.9982,92.22854 205.9982,205.99822 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_16&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-width:0.5;stroke-linejoin:round;stroke-miterlimit:10;stroke-dasharray:8.5, 8;stroke-opacity:0.69803999&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 783.82051,235.91189 c 0,113.76968 -92.2286,205.99822 -205.99825,205.99822 -113.76968,0 -205.99822,-92.22854 -205.99822,-205.99822 0,-113.76968 92.22854,-205.998223 205.99822,-205.998223 113.76965,0 205.99825,92.228543 205.99825,205.998223 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_17&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#1565c0&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 332.41027,873.5885 c 0,4.97057 -4.02944,9 -9,9 -4.97056,0 -9,-4.02943 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_18&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 332.41027,873.5885 c 0,4.97057 -4.02944,9 -9,9 -4.97056,0 -9,-4.02943 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_19&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;text
       style=&#34;font-style:normal;font-weight:normal;font-size:20px;font-family:geogebra-sans-serif, sans-serif;text-anchor:start;fill:#1565c0&#34;
       font-size=&#34;20px&#34;
       font-style=&#34;normal&#34;
       font-weight=&#34;normal&#34;
       x=&#34;293.62225&#34;
       y=&#34;854.81189&#34;
       id=&#34;svg_20&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34;&gt;Sender&lt;/text&gt;
    &lt;text
       style=&#34;font-style:normal;font-weight:normal;font-size:20px;font-family:geogebra-sans-serif, sans-serif;text-anchor:start;fill:none;stroke:#ffffff;stroke-width:3;stroke-linejoin:bevel;stroke-miterlimit:10&#34;
       font-size=&#34;20px&#34;
       font-style=&#34;normal&#34;
       font-weight=&#34;normal&#34;
       x=&#34;293.62225&#34;
       y=&#34;854.81189&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_21&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34;&gt;Sender&lt;/text&gt;
    &lt;text
       style=&#34;font-style:normal;font-weight:normal;font-size:20px;font-family:geogebra-sans-serif, sans-serif;text-anchor:start;fill:#1565c0;stroke:none;stroke-opacity:1;&#34;
       font-size=&#34;20px&#34;
       font-style=&#34;normal&#34;
       font-weight=&#34;normal&#34;
       x=&#34;293.62225&#34;
       y=&#34;854.81189&#34;
       id=&#34;svg_22&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34;&gt;Sender&lt;/text&gt;
    &lt;path
       style=&#34;fill:#ffd700&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 649.82231,657.91189 c 0,4.97056 -4.0295,9 -9,9 -4.9706,0 -9,-4.02944 -9,-9 0,-4.97056 4.0294,-9 9,-9 4.9705,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_23&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 649.82231,657.91189 c 0,4.97056 -4.0295,9 -9,9 -4.9706,0 -9,-4.02944 -9,-9 0,-4.97056 4.0294,-9 9,-9 4.9705,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_24&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#ffd700&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 791.82231,527.91189 c 0,4.97056 -4.0295,9 -9,9 -4.9706,0 -9,-4.02944 -9,-9 0,-4.97056 4.0294,-9 9,-9 4.9705,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_25&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 791.82231,527.91189 c 0,4.97056 -4.0295,9 -9,9 -4.9706,0 -9,-4.02944 -9,-9 0,-4.97056 4.0294,-9 9,-9 4.9705,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_26&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#006633&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 289.82226,688.91189 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_27&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 289.82226,688.91189 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_28&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#993300&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 310.87082,296.76468 c 0,4.97056 -4.02944,9 -9,9 -4.97057,0 -9,-4.02944 -9,-9 0,-4.97056 4.02943,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_29&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 310.87082,296.76468 c 0,4.97056 -4.02944,9 -9,9 -4.97057,0 -9,-4.02944 -9,-9 0,-4.97056 4.02943,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_30&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#993300&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 415.68715,197.27798 c 0,4.97057 -4.02943,9 -9,9 -4.97056,0 -9,-4.02943 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97057,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_31&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 415.68715,197.27798 c 0,4.97057 -4.02943,9 -9,9 -4.97056,0 -9,-4.02943 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97057,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_32&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#993300&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 319.75356,156.41738 c 0,4.97056 -4.02944,9 -9,9 -4.97057,0 -9,-4.02944 -9,-9 0,-4.97056 4.02943,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_33&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 319.75356,156.41738 c 0,4.97056 -4.02944,9 -9,9 -4.97057,0 -9,-4.02944 -9,-9 0,-4.97056 4.02943,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_34&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#006400&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 231.82226,511.91189 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_35&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 231.82226,511.91189 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_36&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#ffd700&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 499.92976,775.58689 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_37&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 499.92976,775.58689 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_38&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#ffd700&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 744.82231,347.91189 c 0,4.97056 -4.0295,9 -9,9 -4.9706,0 -9,-4.02944 -9,-9 0,-4.97056 4.0294,-9 9,-9 4.9705,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_39&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 744.82231,347.91189 c 0,4.97056 -4.0295,9 -9,9 -4.9706,0 -9,-4.02944 -9,-9 0,-4.97056 4.0294,-9 9,-9 4.9705,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_40&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:#ffd700&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 586.82226,235.91189 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       id=&#34;svg_41&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
    &lt;path
       style=&#34;fill:none;stroke:#000000;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10&#34;
       inkscape:connector-curvature=&#34;0&#34;
       d=&#34;m 586.82226,235.91189 c 0,4.97056 -4.02944,9 -9,9 -4.97056,0 -9,-4.02944 -9,-9 0,-4.97056 4.02944,-9 9,-9 4.97056,0 9,4.02944 9,9 z&#34;
       stroke-miterlimit=&#34;10&#34;
       id=&#34;svg_42&#34;
       inkscape:export-xdpi=&#34;96&#34;
       inkscape:export-ydpi=&#34;96&#34; /&gt;
  &lt;/g&gt;
&lt;/svg&gt;

  &lt;/div&gt;
  
    &lt;div class=&#34;desc&#34;&gt;
      This figure depicts a case were the Approaching Transmission wouldn&amp;rsquo;t reach the destination area, even though there is a possible way. (The dashed lines represent the communication range)
    &lt;/div&gt;
  
&lt;/div&gt;


&lt;h4 id=&#34;flooding&#34;&gt;Flooding&lt;/h4&gt;
&lt;p&gt;The implementation of Flooding is fairly equivalent as described on





&lt;a href=&#34;https://en.wikipedia.org/wiki/Flooding_%28computer_networking%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wikipedia&lt;/a&gt;. Each entity forwards the message to all entities
in its communication range. Entities, that already received the message won&amp;rsquo;t receive it again; this is different from many real-life
implementations, where messages are send to all reachable entities except the sender. However, since the simulation has total
knowledge of all simulated entities, it is easier to overcome a lot of the disadvantages, that flooding faces
in real world implementations.&lt;/p&gt;
&lt;h4 id=&#34;implementing-your-own-adhoctransmissionmodel&#34;&gt;Implementing your own &lt;code&gt;AdhocTransmissionModel&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;If the implemented models don&amp;rsquo;t suffice your needs you can easily implement your own.
Create a class extending &lt;code&gt;AdhocTransmissionModel&lt;/code&gt; and implement the abstract methods for sending TopoCasts/GeoCasts.
A possible extension could be to allow for multihop TopoCasts, building an actual topology and transmit your
messages using that topology. Also, the aforementioned &amp;ldquo;Face-Routing&amp;rdquo; could be of interest. Additionally, the calculation
of delays could be made more realistic.&lt;/p&gt;
&lt;h2 id=&#34;accessing-sns-functionality-from-your-applications&#34;&gt;Accessing SNS-functionality from your applications&lt;/h2&gt;
&lt;p&gt;To enable SNS in your scenario follow the steps as described in 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/scenarios/scenario_configuration/#communication-simulators-cell-ns3-omnetpp-sns&#34;&gt;Scenario Configuration&lt;/a&gt;.&lt;br&gt;
An overview of how to configure AdHoc-modules and usage of the API for Routing and Message-Building functions,
can be found under 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/communication/&#34;&gt;Application Development&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OMNeT&#43;&#43; Federate Development</title>
      <link>https://www.eclipse.dev/mosaic/docs/extending_mosaic/omnetpp_details/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/extending_mosaic/omnetpp_details/</guid>
      <description>&lt;p&gt;This section provides a description how to set up the &lt;strong&gt;OMNeT++ IDE&lt;/strong&gt; for the Eclipse MOSAIC OMNeT++ Federate Development.&lt;/p&gt;
&lt;p&gt;If you wish to use another IDE than OMNeT++ IDE (based on Eclipse), you can use 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/extending_mosaic/ns3_setup/#developing-eclipse-mosaic-ns-3-federate-with-visual-studio-code&#34;&gt;ns-3 Federate Development Setup&lt;/a&gt;
as inspiration - it describes the setup of Visual Studio Code.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
&lt;p&gt;At this point it is awaited, that the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_omnetpp/&#34;&gt;OMNeT++ Federate&lt;/a&gt; is successfully installed.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;prepare-omnet-ide&#34;&gt;Prepare OMNeT++ IDE&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create an empty directory somewhere inside your home directory. We will call it &lt;code&gt;&amp;lt;omnetpp_workspace&amp;gt;&lt;/code&gt; from here on. This directory will be used as a workspace in your OMNeT++ IDE.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open your OMNeT++ IDE by executing &lt;code&gt;omnetpp&lt;/code&gt; in your terminal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;code&gt;&amp;lt;omnetpp_workspace&amp;gt;&lt;/code&gt; as workspace and continue by clicking &lt;code&gt;Launch&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Close the &amp;ldquo;Welcome&amp;rdquo; screen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since your workspace is empty, the OMNeT++ IDE will ask you if you want to install the INET framework and OMNeT++ programming examples.&lt;br&gt;















&lt;figure id=&#34;figure-omnet-ide-prevent-automatic-installation-of-inet&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/omnetpp-ide-install-inet.png&#34; data-caption=&#34;OMNeT&amp;#43;&amp;#43; IDE: prevent automatic installation of INET&#34;&gt;


  &lt;img src=&#34;../images/omnetpp-ide-install-inet.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    OMNeT++ IDE: prevent automatic installation of INET
  &lt;/figcaption&gt;


&lt;/figure&gt;

Uncheck INET and decide for yourself if you want to install the examples.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By clicking &lt;code&gt;OK&lt;/code&gt; the examples are going to be installed into your &lt;code&gt;&amp;lt;omnetpp_workspace&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you already have INET installed somewhere you can skip the download and import your existing INET project:
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Cancel&lt;/code&gt; the dialog.&lt;/li&gt;
&lt;li&gt;Choose &lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;Open Projects from File System...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the new window choose the directory of your existing INET installation as &lt;code&gt;Import Source&lt;/code&gt; and click &lt;code&gt;Finish&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The INET framework is supported in version 4.1.1. To ensure the correct version is installed, install it manually:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download 




&lt;a href=&#34;https://github.com/inet-framework/inet/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;INET 4.1.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unpack it into the working directory of OMNeT++ IDE (Eclipse)&lt;/li&gt;
&lt;li&gt;Rename the unpacked directory &lt;code&gt;inet4&lt;/code&gt; to &lt;code&gt;inet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Insert the directory &lt;code&gt;inet&lt;/code&gt; as project to OMNeT++ IDE (as described above)&lt;/li&gt;
&lt;li&gt;Build INET&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The project &lt;code&gt;inet&lt;/code&gt; should now be visible in the &lt;code&gt;Project Explorer&lt;/code&gt; of your OMNeT++ IDE.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Right-click on free space in the &lt;code&gt;Project Explorer&lt;/code&gt; and choose &lt;code&gt;New&lt;/code&gt; &amp;gt; &lt;code&gt;OMNeT++ Project...&lt;/code&gt;&lt;/p&gt;















&lt;figure id=&#34;figure-omnet-ide-create-new-omnet-project&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/omnetpp-ide-new-project.png&#34; data-caption=&#34;OMNeT&amp;#43;&amp;#43; IDE: Create new OMNeT&amp;#43;&amp;#43; Project&#34;&gt;


  &lt;img src=&#34;../images/omnetpp-ide-new-project.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    OMNeT++ IDE: Create new OMNeT++ Project
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the new window:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Name the new project &lt;code&gt;federate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Uncheck&lt;/strong&gt; the box before &lt;code&gt;Use default location&lt;/code&gt;, click &lt;code&gt;Browse&lt;/code&gt; and select:&lt;br&gt;
&lt;code&gt;&amp;lt;mosaic&amp;gt;/bin/fed/omnetpp/omnetpp_federate_src/src&lt;/code&gt;&lt;br&gt;















&lt;figure id=&#34;figure-omnet-ide-create-new-omnet-project&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/omnetpp-ide-new-project-2.png&#34; data-caption=&#34;OMNeT&amp;#43;&amp;#43; IDE: Create new OMNeT&amp;#43;&amp;#43; Project&#34;&gt;


  &lt;img src=&#34;../images/omnetpp-ide-new-project-2.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    OMNeT++ IDE: Create new OMNeT++ Project
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Next&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the following &lt;code&gt;Initial Contents&lt;/code&gt; page select &lt;code&gt;Empty Project&lt;/code&gt; and continue by clicking &lt;code&gt;Finish&lt;/code&gt;&lt;br&gt;
You should now find two projects in the &lt;code&gt;Project Explorer&lt;/code&gt; of your OMNeT++ IDE: &lt;code&gt;inet&lt;/code&gt; and &lt;code&gt;federate&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Right-click on the &lt;code&gt;federate&lt;/code&gt; project and choose &lt;code&gt;Properties&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;code&gt;Project references&lt;/code&gt; and &lt;strong&gt;check&lt;/strong&gt; the box before &lt;code&gt;inet&lt;/code&gt;&lt;br&gt;















&lt;figure id=&#34;figure-choose-project-references&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/omnetpp-ide-project-references.png&#34; data-caption=&#34;Choose project references&#34;&gt;


  &lt;img src=&#34;../images/omnetpp-ide-project-references.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Choose project references
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;rsquo;s it! None of the files should now be marked with an error symbol.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;configure-rebuild-configuration&#34;&gt;Configure Rebuild Configuration&lt;/h2&gt;
&lt;p&gt;Since the Eclipse MOSAIC OMNeT++ Federate is not a classic OMNeT++ project, it cannot be build regulary with
the OMNeT++ IDE by just clicking on the &lt;code&gt;Build&lt;/code&gt; button. However, to make the build process easy and intuitive
we provide a simple build script and the following desciption how to configure the OMNeT++ IDE to enable
building on a single click:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the OMNeT++ IDE select &lt;code&gt;Run&lt;/code&gt; &amp;gt; &lt;code&gt;External Tools&lt;/code&gt; &amp;gt; &lt;code&gt;External Tools Configuration...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Double-click in the left column on &lt;code&gt;Program&lt;/code&gt; to create a new configuration.&lt;/li&gt;
&lt;li&gt;Call it &lt;code&gt;rebuild federate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;Main&lt;/code&gt; tab:
&lt;ol&gt;
&lt;li&gt;Under &lt;code&gt;Location&lt;/code&gt; choose &lt;code&gt;Browse Workspace...&lt;/code&gt; and select &lt;code&gt;federate/rebuild_federate.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Still in the &lt;code&gt;Main&lt;/code&gt; tab under &lt;code&gt;Working Directory&lt;/code&gt; choose &lt;code&gt;Browse Workspace...&lt;/code&gt; and select &lt;code&gt;federate&lt;/code&gt;















&lt;figure id=&#34;figure-omnet-ide-build-configuration&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/omnetpp-ide-build-config.png&#34; data-caption=&#34;OMNeT&amp;#43;&amp;#43; IDE Build Configuration&#34;&gt;


  &lt;img src=&#34;../images/omnetpp-ide-build-config.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    OMNeT++ IDE Build Configuration
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;Build&lt;/code&gt; tab &lt;strong&gt;uncheck&lt;/strong&gt; the box before &lt;code&gt;Build before launch&lt;/code&gt;&lt;br&gt;















&lt;figure id=&#34;figure-omnet-ide-build-configuration&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/omnetpp-ide-build-config-2.png&#34; data-caption=&#34;OMNeT&amp;#43;&amp;#43; IDE Build Configuration&#34;&gt;


  &lt;img src=&#34;../images/omnetpp-ide-build-config-2.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    OMNeT++ IDE Build Configuration
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Now you can &lt;code&gt;Apply&lt;/code&gt; your changes and click on &lt;code&gt;Run&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since you have built the project at least once, you can rebuild it again by clicking here:&lt;br&gt;















&lt;figure id=&#34;figure-run-rebuild&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/omnetpp-ide-run-rebuild.png&#34; data-caption=&#34;Run rebuild&#34;&gt;


  &lt;img src=&#34;../images/omnetpp-ide-run-rebuild.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Run rebuild
  &lt;/figcaption&gt;


&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;The following video shows the above described steps:&lt;/strong&gt;&lt;/p&gt;












  


&lt;video controls &gt;
  &lt;source src=&#34;../images/omnetpp-ide-rebuild-federate.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;hr&gt;
&lt;h2 id=&#34;configure-debug-configuration&#34;&gt;Configure Debug Configuration&lt;/h2&gt;
&lt;p&gt;To debug the Eclipse MOSAIC OMNeT++ Federate during simulation you need to create a Debug Configuration. The following
instruction will tell you how to do that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In your OMNeT++ IDE choose &lt;code&gt;Run&lt;/code&gt; &amp;gt; &lt;code&gt;Debug Configurations...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the new window double-click on &lt;code&gt;OMNeT++ Simulation&lt;/code&gt; in the left column and name the new created debug configuration &lt;code&gt;federate&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;Executable&lt;/code&gt; row check &lt;code&gt;other&lt;/code&gt; and type &lt;code&gt;/federate/federate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;Working dir&lt;/code&gt; row type &lt;code&gt;/federate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;Ini file(s)&lt;/code&gt; row type &lt;code&gt;debug.ini omnetpp.ini&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;At the end of the page click on the &lt;code&gt;More &amp;gt;&amp;gt;&lt;/code&gt; link. And make sure all fields in the &lt;code&gt;Advanced&lt;/code&gt; area are &lt;strong&gt;empty&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;Projects to build&lt;/code&gt; select &lt;code&gt;Do not build automatically before launch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now &lt;code&gt;Apply&lt;/code&gt; your changes and try your configuration by clicking &lt;code&gt;Debug&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;The following images shows the final debug configuration:&lt;/strong&gt;&lt;/p&gt;















&lt;figure id=&#34;figure-final-debug-configuration&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/omnetpp-ide-debug-config.png&#34; data-caption=&#34;Final debug configuration&#34;&gt;


  &lt;img src=&#34;../images/omnetpp-ide-debug-config.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Final debug configuration
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>ns-3 Federate Development Setup</title>
      <link>https://www.eclipse.dev/mosaic/docs/extending_mosaic/ns3_setup/</link>
      <pubDate>Fri, 23 Jul 2021 20:00:00 +0200</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/extending_mosaic/ns3_setup/</guid>
      <description>&lt;p&gt;The following instructions steps lead you to a common &lt;strong&gt;development setup for the Eclipse MOSAIC ns-3 Federate&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;&lt;strong&gt;For the Eclipse MOSAIC ns-3 Federate development you should be familiar with:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Eclipse MOSAIC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C++ development&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ns-3&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id=&#34;dependency-installation&#34;&gt;Dependency installation&lt;/h2&gt;
&lt;h3 id=&#34;google-protocol-buffers&#34;&gt;Google Protocol Buffers&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Make sure you have the following dependency installed before you continue:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Protocol Buffers (protobuf)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;premake-5&#34;&gt;Premake 5&lt;/h3&gt;
&lt;p&gt;There are multiple ways how you can install Premake 5 (




&lt;a href=&#34;https://premake.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://premake.github.io/&lt;/a&gt;).&lt;br&gt;
For our purpose it doesn&amp;rsquo;t matter which way you choose:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;install package of your Linux distribution &lt;strong&gt;or&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;download binary &lt;strong&gt;or&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;build from source&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ns-3&#34;&gt;ns-3&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Download ns-3: &lt;a href=&#34;https://www.nsnam.org/releases/ns-allinone-3.36.1.tar.bz2&#34;&gt;https://www.nsnam.org/releases/ns-allinone-3.36.1.tar.bz2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;./build.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;download--install-eclipse-mosaic-ns-3-federate&#34;&gt;Download &amp;amp; Install Eclipse MOSAIC ns-3 Federate&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Clone the federate&amp;rsquo;s repository: &lt;code&gt;git clone https://github.com/mosaic-addons/ns3-federate&lt;/code&gt; &lt;br&gt;
The federate&amp;rsquo;s repository directory is referred to as &lt;code&gt;[federate]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Install the Premake 5 Autoconf Plugin to &lt;code&gt;[federate]/.modules/autoconf&lt;/code&gt;:
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cd [federate]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget -O premake-autoconf.zip https://github.com/Blizzard/premake-autoconf/archive/master.zip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unzip premake-autoconf.zip -d .modules/autoconf&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Setup &lt;code&gt;premake5.lua&lt;/code&gt;&lt;/strong&gt; – Premake5 is configured by the file &lt;code&gt;[federate]/premake5.lua&lt;/code&gt; of the federate project.&lt;br&gt;
Unfortunately, the build definitions have been historically grown and are interlocked with the installer script.&lt;br&gt;
In order to start development at the federate, you need to change a few parts in &lt;code&gt;premake5.lua&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;The installer script copies &lt;code&gt;ClientServerChannel.*&lt;/code&gt;. This is not necessary -&amp;gt; uncomment 2 lines:
&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;   files { &amp;quot;src/**.h&amp;quot;
         , &amp;quot;src/**.cc&amp;quot;
--         , PROTO_CC_PATH .. &amp;quot;/ClientServerChannel.h&amp;quot;
--         , PROTO_CC_PATH .. &amp;quot;/ClientServerChannel.cc&amp;quot;
         , PROTO_CC_PATH .. &amp;quot;/ClientServerChannelMessages.pb.h&amp;quot;
         , PROTO_CC_PATH .. &amp;quot;/ClientServerChannelMessages.pb.cc&amp;quot;
         }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;add path to ns-3 include directory:
&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;includedirs { &amp;quot;/usr/include&amp;quot;
            , &amp;quot;/usr/include/libxml2&amp;quot;
            , &amp;quot;src&amp;quot;
            , &amp;quot;/absolute/path/ns-allinone-3.36.1/ns-3.36.1/build&amp;quot;
            , PROTO_CC_PATH
            }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;add path to ns-3 lib directory:
&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;libdirs { &amp;quot;/usr/lib&amp;quot;
        , &amp;quot;/absolute/path/ns-allinone-3.36.1/ns-3.36.1/build/lib&amp;quot;
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are alternative and more eloquent configuration ways. Keep up to date! There might be some changes introduced.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Makefile Generation&lt;/strong&gt; – Having configured premake, you can run it to generate the Makefiles:
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cd [federate]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;premake5 gmake --generate-protobuf&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build Federate&lt;/strong&gt; – Having generated the federate&amp;rsquo;s Makefiles, the federate can be built.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Option 1: Simple build with &lt;code&gt;make -j1&lt;/code&gt;&lt;br&gt;
&lt;em&gt;Building in parallel might cause errors, so the use of one thread (parameter &lt;code&gt;-j1&lt;/code&gt;) is recommended.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Option 2: Build and Generate &lt;code&gt;compile_commands.json&lt;/code&gt; – &lt;em&gt;Clang&lt;/em&gt; defines a





&lt;a href=&#34;https://clang.llvm.org/docs/JSONCompilationDatabase.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;database format for compilation information&lt;/a&gt;,
containing necessary information to build the project which enables different tools to parse the source code in the same
way (flags/debug/release/dependency version&amp;hellip;). This is needed by VS Code&amp;rsquo;s plugin &lt;em&gt;clangd&lt;/em&gt;.&lt;br&gt;
(If you use an IDE which does not need this database, you can omit this &lt;em&gt;option 2&lt;/em&gt;.)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install a software capable of generation of &lt;code&gt;compile_commands.json&lt;/code&gt;.
For instance 




&lt;a href=&#34;https://github.com/nickdiego/compiledb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;compiledb&lt;/a&gt;, whose installation is shown below.&lt;/li&gt;
&lt;li&gt;Call that software&lt;/li&gt;
&lt;li&gt;Build federate&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install compiledb  # or some other installation method
cd [federate]
compiledb make -j1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After run of the last command, &lt;code&gt;compile_commands.json&lt;/code&gt; is generated in the current directory and can be read by VS Code&amp;rsquo;s plugin &lt;em&gt;clangd&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test Installation&lt;/strong&gt; – Run with MOSAIC with ns-3:
&lt;ol&gt;
&lt;li&gt;Adjust the ns-3-section of MOSAIC&amp;rsquo;s &lt;code&gt;runtime.json&lt;/code&gt;:
&lt;pre&gt;&lt;code&gt;...
&amp;quot;deploy&amp;quot;: false,
&amp;quot;start&amp;quot;: false,
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Run federate in IDE&lt;/li&gt;
&lt;li&gt;Run MOSAIC with an scenario having ns-3 enabled.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;developing-eclipse-mosaic-ns-3-federate-with-visual-studio-code&#34;&gt;Developing Eclipse MOSAIC ns-3 Federate with Visual Studio Code&lt;/h2&gt;
&lt;p&gt;This section describes the use of 




&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Visual Studio Code&lt;/em&gt;&lt;/a&gt; (VS Code).
You should be familiar with VS Code&amp;rsquo;s basic usage.&lt;/p&gt;
&lt;p&gt;Alternatively you can use any other development environment like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VIM&lt;/li&gt;
&lt;li&gt;Eclipse&lt;/li&gt;
&lt;li&gt;NetBeans&lt;/li&gt;
&lt;li&gt;Code::Blocks&lt;/li&gt;
&lt;li&gt;JetBrains CLion&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;plugins&#34;&gt;Plugins&lt;/h3&gt;
&lt;p&gt;This setup assumes the following VS Code plugins are installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clangd&lt;/li&gt;
&lt;li&gt;CodeLLDB&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tasks-launch-examples&#34;&gt;Tasks, Launch: Examples&lt;/h3&gt;
&lt;p&gt;For basic debugging and building you can use these configuration files. They define&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a build task,&lt;/li&gt;
&lt;li&gt;a debug launch configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;.vscode/launch.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;configurations&amp;quot;: [

        {
            &amp;quot;type&amp;quot;: &amp;quot;lldb&amp;quot;,
            &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
            &amp;quot;name&amp;quot;: &amp;quot;Debug&amp;quot;,
            &amp;quot;program&amp;quot;: &amp;quot;${workspaceFolder}/bin/Debug/ns3-federate&amp;quot;,
            &amp;quot;args&amp;quot;: [&amp;quot;--port=5011&amp;quot;, &amp;quot;--configFile=ns3_federate_config.xml&amp;quot;],
            &amp;quot;cwd&amp;quot;: &amp;quot;${workspaceFolder}&amp;quot;,
            &amp;quot;env&amp;quot;: {&amp;quot;LD_LIBRARY_PATH&amp;quot;:&amp;quot;/absolute/path/ns-allinone-3.36.1/ns-3.36.1/build/lib&amp;quot;}
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.vscode/tasks.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    &amp;quot;version&amp;quot;: &amp;quot;2.0.0&amp;quot;,
    &amp;quot;tasks&amp;quot;: [
        {
            &amp;quot;label&amp;quot;: &amp;quot;make&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;shell&amp;quot;,
            &amp;quot;command&amp;quot;: &amp;quot;make -j1&amp;quot;,
            &amp;quot;group&amp;quot;: {
                &amp;quot;kind&amp;quot;: &amp;quot;build&amp;quot;,
                &amp;quot;isDefault&amp;quot;: true
            },
            &amp;quot;presentation&amp;quot;: {
                &amp;quot;reveal&amp;quot;: &amp;quot;always&amp;quot;,
                &amp;quot;panel&amp;quot;: &amp;quot;new&amp;quot;
            },
            &amp;quot;problemMatcher&amp;quot;: []
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Event Scheduling</title>
      <link>https://www.eclipse.dev/mosaic/docs/extending_mosaic/event_scheduler/</link>
      <pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/extending_mosaic/event_scheduler/</guid>
      <description>&lt;p&gt;The different modules of the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_simulator/#eclipse-mosaic-application-simulator&#34;&gt;Application Simulator&lt;/a&gt;
communicate over events that are triggered at a specific simulation time. The following classes and interfaces model theses events.&lt;/p&gt;
&lt;h3 id=&#34;event&#34;&gt;Event&lt;/h3&gt;
&lt;p&gt;The class &lt;code&gt;Event&lt;/code&gt; contains the information that is necessary to process an event. An event describes when it should be processed and which information is processed. Moreover an event has an assigned priority.&lt;/p&gt;
&lt;h4 id=&#34;attributes-of-event&#34;&gt;Attributes of Event&lt;/h4&gt;
&lt;p&gt;The class Event contains the following attributes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;long time&lt;/code&gt;: defines the time when the execution of the event is triggered.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;long nice&lt;/code&gt;: defines the priority of the event. When multiple events are scheduled for the sametime, the events are ordered in ascending order.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List&amp;lt;EventProcessor&amp;gt; processors&lt;/code&gt;: is a list of components that shall process the event.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object resource&lt;/code&gt;: is an object that contains additional information designated for the processor of the event. The resource can be any object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;methods-of-event&#34;&gt;Methods of Event&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Event()&lt;/code&gt;: There are multiple constructors for Event with different parameters. Every constructor sets default values for the attributes that are not defined by the arguments of the constructor.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Event newTime(long time)&lt;/code&gt;: allows the creation of a new event with a new execution time based&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String getResourceSimpleClassName()&lt;/code&gt;: returns the class name of the resource as String.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int compareTo(Event event)&lt;/code&gt;: implements the standardized Java interface 




&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Comparable&lt;/a&gt;.  Toorder the events, first the time of the event is evaluated. In case the times are equal, the priority of the events is compared.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;interface-eventmanager&#34;&gt;Interface EventManager&lt;/h3&gt;
&lt;p&gt;The interface &lt;code&gt;EventManager&lt;/code&gt; defines the method &lt;code&gt;void addEvent(Event event)&lt;/code&gt; that needs to be implemented to add an event to the execution.&lt;/p&gt;
&lt;h3 id=&#34;interface-eventscheduler&#34;&gt;Interface EventScheduler&lt;/h3&gt;
&lt;p&gt;The interface &lt;code&gt;EventScheduler&lt;/code&gt; extends the interface &lt;code&gt;EventManager&lt;/code&gt; and is used for classes that trigger events.&lt;/p&gt;
&lt;h4 id=&#34;methods-of-eventscheduler&#34;&gt;Methods of EventScheduler&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boolean isEmpty()&lt;/code&gt;: returns true if the scheduler contains no elements, otherwise it returns false.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;long getNextEventTime()&lt;/code&gt;: returns the time of the next event.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;long getScheduledTime()&lt;/code&gt;: returns the time when the last event has been executed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List&amp;lt;Event&amp;gt; scheduleEvents(long time)&lt;/code&gt;: returns a list of objects that are scheduled for a
certain simulation time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Set&amp;lt;Event&amp;gt; getAllEvents()&lt;/code&gt;: returns a set of all events that are considered by the scheduler.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;eventschedulerimpl&#34;&gt;EventSchedulerImpl&lt;/h3&gt;
&lt;p&gt;The class &lt;code&gt;EventSchedulerImpl&lt;/code&gt; is an implementation of the interface &lt;code&gt;EventScheduler&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;interface-eventprocessor&#34;&gt;Interface EventProcessor&lt;/h3&gt;
&lt;p&gt;The interface &lt;code&gt;EventProcessor&lt;/code&gt; defines how the execution module gets the events. The execution module
therefore has to implement the following methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;void processEvent(Event event)&lt;/code&gt;: The module processes the event.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean canProcessEvent()&lt;/code&gt;: returns true when the module is currently able to process new
events, otherwise it returns false.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;interceptedevent&#34;&gt;InterceptedEvent&lt;/h3&gt;
&lt;h3 id=&#34;class-eventinterceptor&#34;&gt;Class EventInterceptor&lt;/h3&gt;
&lt;p&gt;In some situation it is useful to intercept events before they actually reach the intended processors. By
intercepting the events it is possible to apply further monitoring and to filter which events the event
processors receive. The class &lt;code&gt;EventInterceptor&lt;/code&gt; is used to construct objects of the type &lt;code&gt;InterceptedEvent&lt;/code&gt;.
In the constructor it is possible to specify an EventManager that manages the intercepted events. Moreover, objects of the type &lt;code&gt;EventProcessor&lt;/code&gt; can be specified that shall process the intercepted events.&lt;/p&gt;
&lt;h3 id=&#34;class-interceptedevent&#34;&gt;Class InterceptedEvent&lt;/h3&gt;
&lt;p&gt;The class &lt;code&gt;InterceptedEvents&lt;/code&gt; extends the class Event. It is used to provide type safe allocations of
events that shall be intercepted.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perception in Applications</title>
      <link>https://www.eclipse.dev/mosaic/docs/develop_applications/perception/</link>
      <pubDate>Wed, 13 Jul 2022 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/develop_applications/perception/</guid>
      <description>&lt;p&gt;The 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_simulator/#eclipse-mosaic-application-simulator&#34;&gt;Application Simulator&lt;/a&gt; bundles a perception module
for vehicle units. This module allows to emulate basic detection of other traffic entities using a field of view filter.
To warrant fast simulation MOSAIC utilizes a spatial index, which allows for quick pre-selection of relevant entities.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Currently, vehicles are the only units being able to perceive other units.
Additionally, only the perception of other vehicles and traffic lights is supported.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The perception module can be configured in the &lt;code&gt;mosaic/scenarios/&amp;lt;scenario_name&amp;gt;/application/application_config.json&lt;/code&gt;.
The most important configuration is the choice of a perception backend and its parameters.
For every perceivable unit-type exists a defined index. The current configuration for the vehicle index happens via the parameter
&lt;code&gt;vehicleIndex&lt;/code&gt;, and for the traffic light index &lt;code&gt;trafficLightIndex&lt;/code&gt;.
Current index implementations are shown in the table below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Perceived Objects&lt;/th&gt;
&lt;th&gt;Index Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Configurable Parameters&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Vehicles&lt;/td&gt;
&lt;td&gt;&lt;code&gt;VehicleMap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An index using a hash map to store vehicles. Will be performant for small amount of vehicles, but slow for larger quantities.&lt;/td&gt;
&lt;td&gt;n.a.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vehicles&lt;/td&gt;
&lt;td&gt;&lt;code&gt;VehicleTree&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An index using a quad-tree to store vehicles. Adds some overhead but is performant for larger quantities of vehicles, dynamically allocates memory.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;splitSize&lt;/code&gt;, &lt;code&gt;maxDepth&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vehicles&lt;/td&gt;
&lt;td&gt;&lt;code&gt;VehicleGrid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An index using a grid structure to store vehicles. Adds some overhead but is performant for larger quantities of vehicles, allocates memory required for cells at initialization.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;cellWidth&lt;/code&gt;, &lt;code&gt;cellHeight&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vehicles&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SumoIndex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A placeholder to use SUMO&amp;rsquo;s 




&lt;a href=&#34;https://sumo.dlr.de/docs/TraCI/Object_Context_Subscription.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;context subscription&lt;/a&gt; to provide surrounding vehicles. In our testings this is performant for small scenarios but has some bottleneck when many vehicles are simulated simultaneously.&lt;/td&gt;
&lt;td&gt;n.a.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Traffic Lights&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TrafficLightMap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An index using a hash map to store traffic lights. This will be sufficient for most cases, as traffic lights are inherently static (i.e., non-moving) objects, so that no position updates are necessary.&lt;/td&gt;
&lt;td&gt;n.a.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Traffic Lights&lt;/td&gt;
&lt;td&gt;&lt;code&gt;TrafficLightTree&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An index using a KD-tree to store traffic lights. Adds minimal overhead but should accelerate retrieving traffic lights in large scenarios immensely.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bucketSize&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Building Walls&lt;/td&gt;
&lt;td&gt;&lt;code&gt;WallIndex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;An index using a KD-tree to store building walls. Note, that in order for walls to be retrievable they have to be added to the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/road_traffic/&#34;&gt;scenario database&lt;/a&gt;.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bucketSize&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Below is an example of a &lt;code&gt;application_config.json&lt;/code&gt; on how to configure the perception using a grid index for vehicles&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;and the trivial index for traffic lights.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;perceptionConfiguration&amp;quot;: {
        &amp;quot;vehicleIndex&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;VehicleGrid&amp;quot;,
            &amp;quot;cellWidth&amp;quot;: &amp;quot;5m&amp;quot;,
            &amp;quot;cellHeight&amp;quot;: &amp;quot;5m&amp;quot;
        },
        &amp;quot;trafficLightIndex&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;TrafficLightMap&amp;quot;
        },
        &amp;quot;wallIndex&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;WallTree&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;If no index is configured, perception for the respective units is disabled.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For more information on choosing a backend for your scenario see 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/extending_mosaic/perception_deep_dive/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application Configuration&lt;/strong&gt;&lt;br&gt;
In order to use the perception module from your application it has to be enabled first. Viewing angles can be defined between 0° and 360°,
while the range has to be larger than 0.
Configuration works analogously to the AdHoc- and Cell- Communication-Modules and is usually done at startup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private final static VIEWING_ANGLE = 120; // [degree]
private final static VIEWING_RANGE = 100; // [meter]

@Override
public void onStartup() {
    // set up the configuration for the perception module
    SimplePerceptionConfiguration perceptionModuleConfiguration = 
        new SimplePerceptionConfiguration(VIEWING_ANGLE, VIEWING_RANGE);
    // enable the perception module using the defined configuration
    getOs().getPerceptionModule().enable(perceptionModuleConfiguration);  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Vehicles&lt;/strong&gt;&lt;br&gt;
To get a list of vehicles in perception range the &lt;code&gt;getPerceivedVehicles()&lt;/code&gt;-method is called:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// get list of vehicles in perception range
List&amp;lt;VehicleObject&amp;gt; perceivedVehicles = getOs().getPerceptionModule().getPerceivedVehicles();
// log the list of perceived vehicle IDs
getLog().infoSimTime(this, &amp;quot;Perceived vehicles: {}&amp;quot;,
        perceivedVehicles.stream().map(VehicleObject::getId).collect(Collectors.toList()));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;VehicleObject&lt;/code&gt;-class contains information about the perceived vehicles&#39; position, speed, and heading, as well as its dimensions
(length, width, height).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Traffic Lights&lt;/strong&gt;&lt;br&gt;
Retrieving all traffic lights in perception range is achieved using the &lt;code&gt;getPerceivedTrafficLights()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// get list of traffic lights in perception range
List&amp;lt;TrafficLightObject&amp;gt; perceivedTrafficLights = getOs().getPerceptionModule().getPerceivedTrafficLights();
// log the list of perceived traffic light IDs
getLog().infoSimTime(this, &amp;quot;Perceived traffic lights: {}&amp;quot;,
        perceivedTrafficLights.stream().map(TrafficLightObject::getId).collect(Collectors.toList()));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;TrafficLightObject&lt;/code&gt;-class contains information about the perceived traffic lights&#39; position, state (i.e., green, red, &amp;hellip;), and
the incoming and outgoing lanes that are controlled by the individual signal.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;The perception of traffic lights uses the position of the stop lines at the intersection, and this is the only&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;perception-modifiers&#34;&gt;Perception Modifiers&lt;/h2&gt;
&lt;p&gt;The perception module can be configured with different &lt;code&gt;PerceptionModifier&lt;/code&gt;s, which can be used
to emulate occlusion, false negatives, position areas, etc.
MOSAIC already implements three modifiers, &lt;code&gt;SimpleOcclusionModifier&lt;/code&gt;, &lt;code&gt;WallOcclusionModifier&lt;/code&gt;, &lt;code&gt;DistanceModifier&lt;/code&gt; and &lt;code&gt;PositionErrorModifier&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Modifier&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Image&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SimpleOcclusionModifier&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Emulates occlusion in a simplified manner by comparing angles between perceived vehicles and requiring a minimum angle between all other perceived vehicles.&lt;/td&gt;
&lt;td&gt;














&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/occlusion_modifier.svg&#34; &gt;


  &lt;img src=&#34;../images/occlusion_modifier.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WallOcclusionModifier&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Emulates occlusion of vehicles by buildings. Requires building information in the scenario database, which can be imported to the database using the &lt;code&gt;--import-buildings&lt;/code&gt; option in scenario-convert.&lt;/td&gt;
&lt;td&gt;














&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/wall_occlusion_modifier.svg&#34; &gt;


  &lt;img src=&#34;../images/wall_occlusion_modifier.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DistanceModifier&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Stochastic modifier that reduces perception probability with the distance to the ego vehicle.&lt;/td&gt;
&lt;td&gt;














&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/distance_modifier.svg&#34; &gt;


  &lt;img src=&#34;../images/distance_modifier.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PositionErrorModifier&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Applies a gaussian error to lateral and longitudinal distances of perceived vehicles.&lt;/td&gt;
&lt;td&gt;














&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/position_modifier.svg&#34; &gt;


  &lt;img src=&#34;../images/position_modifier.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;



&lt;/figure&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To configure modifiers they have to be passed to the &lt;code&gt;PerceptionModuleConfiguration&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void enablePerceptionModule() {
    // filter to emulate occlusion
    SimpleOcclusionModifier simpleOcclusionModifier = new SimpleOcclusionModifier(3, 5);
    // filter to emulate occlusion by buildings
    WallOcclusionModifier wallOcclusionModifier = new WallOcclusionModifier();
    // filter to reduce perception probability based on distance to ego vehicle
    DistanceModifier distanceModifier = new DistanceModifier(getRandom(), 0.0);
    // filter adding noise to longitudinal and lateral
    PositionErrorModifier positionErrorModifier = new PositionErrorModifier(getRandom());

    SimplePerceptionConfiguration perceptionModuleConfiguration = new SimplePerceptionConfiguration(
            VIEWING_ANGLE, VIEWING_RANGE,
            simpleOcclusionModifier, wallOcclusionModifier, distanceModifier, positionErrorModifier
    );
    getOs().getPerceptionModule().enable(perceptionModuleConfiguration);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All configured modifiers will be executed in order of configuration.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Note: Evaluating perception modifiers requires many list operations, which is costly in terms of performance. Depending on the size
of your scenario you may want to limit usage.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Delay Models</title>
      <link>https://www.eclipse.dev/mosaic/docs/extending_mosaic/delay_models/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/extending_mosaic/delay_models/</guid>
      <description>&lt;p&gt;MOSAIC has different types of delays implemented for different use cases. This page will
give a short introduction into the types and their usages, as well as example configurations,
which are used throughout MOSAIC. The implementations can be
found in the package &lt;code&gt;org.eclipse.mosaic.lib.model.delay&lt;/code&gt;.
Note prior to the release of MOSAIC delay values were configured using Milliseconds as unit,
this has been refactored to Nanoseconds. Alternatively you can specify delay values using
a String with a unit (eg &lt;code&gt;&amp;quot;delay&amp;quot;: &amp;quot;20 ms&amp;quot;&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&#34;delay-models&#34;&gt;Delay Models&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Delay&lt;/code&gt; class represents an implementation for a specific delay model. The following model implementation exist:&lt;/p&gt;
&lt;h3 id=&#34;constantdelay&#34;&gt;ConstantDelay&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ConstantDelay&lt;/code&gt;-class is arguably the simplest implementation of &lt;code&gt;Delay&lt;/code&gt;. This model is configured with a single
field &lt;code&gt;delay&lt;/code&gt;, which the &lt;code&gt;generateDelay(...)&lt;/code&gt;-method will simply return.&lt;br&gt;
While this delay doesn&amp;rsquo;t provide realistic behaviour in most cases it is optimal for testing purposes as it
can easily be retraced.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configuration:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;delay&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;ConstantDelay&amp;quot;,
    &amp;quot;delay&amp;quot;: &amp;quot;20 ms&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;simplerandomdelay&#34;&gt;SimpleRandomDelay&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;SimpleRandomDelay&lt;/code&gt; model allows for the generated delays to be randomly distributed between a &lt;code&gt;minDelay&lt;/code&gt; and a &lt;code&gt;maxDelay&lt;/code&gt;.
Additionally, the &lt;code&gt;steps&lt;/code&gt; field is used to limit the amount of different delays, by equally separating the interval into
the amount of steps specified. This delay provides a simple and performant way to randomize and thereby more realistically reflect real-world delays.&lt;/p&gt;
&lt;p&gt;For example, with the configuration below, one of the following delays is randomly chosen: &lt;code&gt;[0.4, 0.9, 1.4, 1.9, 2.4] ms&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configuration:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;delay&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;SimpleRandomDelay&amp;quot;,
    &amp;quot;steps&amp;quot;: 5,
    &amp;quot;minDelay&amp;quot;: &amp;quot;0.4 ms&amp;quot;,
    &amp;quot;maxDelay&amp;quot;: &amp;quot;2.4 ms&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;gamma-delays&#34;&gt;Gamma Delays&lt;/h3&gt;
&lt;p&gt;MOSAIC provides two types of delays using a Gamma-distribution to sample values, namely &lt;code&gt;GammaRandomDelay&lt;/code&gt; and &lt;code&gt;GammaSpeedDelay&lt;/code&gt;.
The parameters for the used Gamma-distribution have been determined experimentally. The &lt;code&gt;GammaSpeedDelay&lt;/code&gt; extends the &lt;code&gt;GammaRandomDelay&lt;/code&gt;
by a speed penalty. Both delay-types aim to provide more realistic solution, than the previous models, but come with the downside of complexity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configurations:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;delay&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;GammaRandomDelay&amp;quot;,
    &amp;quot;minDelay&amp;quot;: &amp;quot;10 ms&amp;quot;,
    &amp;quot;expDelay&amp;quot;: &amp;quot;30 ms&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;delay&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;GammaSpeedDelay&amp;quot;,
    &amp;quot;minDelay&amp;quot;: &amp;quot;10 ms&amp;quot;,
    &amp;quot;expDelay&amp;quot;: &amp;quot;30 ms&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Network Simulator Cell</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_cell/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/network_simulator_cell/</guid>
      <description>&lt;p&gt;The built-in Eclipse MOSAIC Cell Simulator enables the applications to use cellular network communication.
The simulation of cellular communication in Eclipse MOSAIC consists of two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Cellular Simulator itself and&lt;/li&gt;
&lt;li&gt;The applications that can communicate over cellular networks in the Application Simulator&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These changes are done in a generic way, making the cellular simulator exchangeable. Users interested
in a different kind of simulation of cellular communication may use other simulators and develop
ambassadors connecting them to Eclipse MOSAIC.&lt;/p&gt;
&lt;p&gt;The Cellular Simulator in the current state consists of three main modules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UplinkModule&lt;/li&gt;
&lt;li&gt;GeocasterModule&lt;/li&gt;
&lt;li&gt;DownlinkModule&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Geocaster module simulates a mandatory component for ITS communication. It is inspired by
the several architectures from research projects as simTD or CONVERGE to enable ITS use cases over
cellular networks. It mainly takes over the task of an addressing and routing component with geographic
knowledge to support geo-addressing. However, it also supports regular topological addressing.
The Uplink and DownlinkModule are responsible for the transmission simulation. They account for the
aspects of transmission delays, packet losses and available data rates. In this context,Uplink and Downlink
always refer to the direction towards respectively from the Geocaster. For instance, a transmission
from an Internet-based server towards a vehicle would include an Uplink between the server and the
Geocaster and a Downlink between the Geocaster and the vehicle. While the Uplink direction only allows
point-to-point communication (Unicast), the Downlink supports point-to-point (Unicast) as well as
point-to-multipoint (Multicast).&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;This simulator does not need to be installed. It is delivered as part of the Eclipse MOSAIC-installation package.&lt;/p&gt;
&lt;h3 id=&#34;cellambassador-folder-structure&#34;&gt;CellAmbassador folder structure&lt;/h3&gt;
&lt;p&gt;The Eclipse MOSAIC Cell simulator can be configured via three distinct configuration files, which can be
found within the scenarios&#39; folder structure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   └─ cell
      ├─ cell_config.json ................. Cell ambassador configuration file
      ├─ network.json ..................... Network configuration file
      └─ regions.json ..................... Regions configuration file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The network and regions configuration files are referenced in the cellular ambassador configuration
file.&lt;/p&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Read the detailed documentation of the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/cell_network_config/&#34;&gt;Network&lt;/a&gt; and 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/cell_region_config/&#34;&gt;Regions Configuration&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;We provide a cellular configuration file in the example scenarios of Tiergarten and Barnim. Please note
that in the default configuration of this scenario the Cellular Simulator is deactivated. To activate the
cellular simulator just enable the &lt;code&gt;cell&lt;/code&gt; federate in the &lt;code&gt;scenario_config.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;federates&amp;quot;: {
    ...
    &amp;quot;cell&amp;quot;: true,
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The central configuration for the cellular simulator in the file
&lt;code&gt;&amp;lt;scenarioName&amp;gt;/cell/cell_config.json&lt;/code&gt; could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Json&#34;&gt;{
    &amp;quot;debugGeocasting&amp;quot;: false,
    &amp;quot;visualizeRegions&amp;quot;: true,
    &amp;quot;networkConfigurationFile&amp;quot;: &amp;quot;network.json &amp;quot;,
    &amp;quot;regionConfigurationFile&amp;quot;: &amp;quot;regions.json &amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;visualizeRegions&lt;/code&gt; option from the &lt;code&gt;cell_config.json&lt;/code&gt; is used to write a KML-file that visualizes the
used cell regions. Google Earth can be used to display it.&lt;/p&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Read the detailed documentations of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/cell_network_config/&#34;&gt;Cell Network Configuration&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/cell_region_config/&#34;&gt;Cell Region Configuration&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;The configuration for the global network in the cellular simulator in the file
&lt;code&gt;&amp;lt;scenarioName&amp;gt;/cell/network.json&lt;/code&gt; could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;globalNetwork&amp;quot;: {
        &amp;quot;uplink&amp;quot;: {
            &amp;quot;delay&amp;quot;: {
                &amp;quot;type&amp;quot;: &amp;quot;ConstantDelay&amp;quot;,
                &amp;quot;delay&amp;quot;: &amp;quot;100 ms&amp;quot;
            },
            &amp;quot;transmission&amp;quot;: {
                &amp;quot;lossProbability&amp;quot;: 0.0,
                &amp;quot;maxRetries&amp;quot;: 2
            },
            &amp;quot;capacity&amp;quot;: 28000000
        },
        &amp;quot;downlink&amp;quot;: {
            &amp;quot;unicast&amp;quot;: {
                &amp;quot;delay&amp;quot;: {
                    &amp;quot;type&amp;quot;: &amp;quot;ConstantDelay&amp;quot;,
                    &amp;quot;delay&amp;quot;: &amp;quot;50 ms&amp;quot;
                },
                &amp;quot;transmission&amp;quot;: {
                    &amp;quot;lossProbability&amp;quot;: 0.0,
                    &amp;quot;maxRetries&amp;quot;: 2
                }
            },
            &amp;quot;multicast&amp;quot;: {
                &amp;quot;delay&amp;quot;: {
                    &amp;quot;type&amp;quot;: &amp;quot;ConstantDelay&amp;quot;,
                    &amp;quot;delay&amp;quot;: &amp;quot;100 ms&amp;quot;
                },
                &amp;quot;transmission&amp;quot;: {
                    &amp;quot;lossProbability&amp;quot;: 0.0
                },
                &amp;quot;usableCapacity&amp;quot;: 0.6
            },
            &amp;quot;capacity&amp;quot;: 42200000
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;network.json&lt;/code&gt; also allows setting the fields &lt;code&gt;defaultDownlinkCapacity&lt;/code&gt; and &lt;code&gt;defaultUplinkCapacity&lt;/code&gt;,
which are used if you don&amp;rsquo;t specify any bitrates in your &lt;code&gt;CellConfiguration&lt;/code&gt;s inside your applications.
These values are set to 100 Gigabit by default, so if you aren&amp;rsquo;t interested in capacity/bandwidth observations you can
probably just leave them as is.&lt;/p&gt;
&lt;h3 id=&#34;server-configuration&#34;&gt;Server configuration&lt;/h3&gt;
&lt;p&gt;MOSAIC supports a type of simulation units, called servers. Traffic Management Centers are a specialised type of server.
What differentiates servers from other units is, that
they are treated as having no geographical location and instead are located &amp;ldquo;inside the internet.&amp;rdquo;. This concept omits prior shortcoming,
where one would have to configure RSU&amp;rsquo;s as servers.&lt;br&gt;
Servers are also configured in the &lt;code&gt;network.json&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;defaultDownlinkCapacity&amp;quot;: &amp;quot;10 Gbps&amp;quot;,
    &amp;quot;defaultUplinkCapacity&amp;quot;: &amp;quot;10 Gbps&amp;quot;,
    &amp;quot;globalNetwork&amp;quot;: {
           [...]
    },
    &amp;quot;servers&amp;quot;: {
        {
            &amp;quot;id&amp;quot;: &amp;quot;TestServer&amp;quot;,
            &amp;quot;uplink&amp;quot;: {
                &amp;quot;delay&amp;quot;: {
                    &amp;quot;type&amp;quot;: &amp;quot;ConstantDelay&amp;quot;,
                    &amp;quot;delay&amp;quot;: &amp;quot;200 ms&amp;quot;
                },
                &amp;quot;transmission&amp;quot;: {
                    &amp;quot;lossProbability&amp;quot;: 0.5,
                    &amp;quot;maxRetries&amp;quot;: 2
                }
            },
            &amp;quot;downlink&amp;quot;: {
                &amp;quot;unicast&amp;quot;: {
                    &amp;quot;delay&amp;quot;: {
                        &amp;quot;type&amp;quot;: &amp;quot;SimpleRandomDelay&amp;quot;,
                        &amp;quot;steps&amp;quot;: 5,
                        &amp;quot;minDelay&amp;quot;: &amp;quot;100 ms&amp;quot;,
                        &amp;quot;maxDelay&amp;quot;: &amp;quot;200 ms&amp;quot;
                    },
                    &amp;quot;transmission&amp;quot;: {
                        &amp;quot;lossProbability&amp;quot;: 0.1,
                        &amp;quot;maxRetries&amp;quot;: 2
                    }
                }
            }
        },
        {
            [...]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;The fields &lt;code&gt;defaultDownlinkCapacity&lt;/code&gt;, &lt;code&gt;defaultUplinkCapacity&lt;/code&gt; are used if you don&amp;rsquo;t define any bitrates for your cell configurations
their default values are 100 Gigabit, so you usually don&amp;rsquo;t need to set them.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Servers get their configuration for the delay and retransmission models from the &lt;code&gt;network.json&lt;/code&gt; and the configuration for the
capacity-model has to be made from within an application, by activating the &lt;code&gt;CellModule&lt;/code&gt; and properly setting the bit rates.
This could look as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;        getOs().getCellModule().enable(
                new CellModuleConfiguration()
                        .maxUlBitrate(10000)
                        .maxDlBitrate(10000)
        );

        // Alternatively using default values from network.json
        getOs().getCellModule().enable();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the CellAmbassador to be able to recognize servers, the &lt;code&gt;group&lt;/code&gt;-field in the mapping must match the &lt;code&gt;id&lt;/code&gt;-field in the &lt;code&gt;network.json&lt;/code&gt;,
this also allows for multiple servers to utilize the same configuration. A &lt;code&gt;mapping_config.json&lt;/code&gt; using the configuration from
above could look as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    ...,
    &amp;quot;tmcs&amp;quot;: [
        {
            &amp;quot;group&amp;quot;: &amp;quot;TestServer&amp;quot;,
            &amp;quot;applications&amp;quot;: [ &amp;quot;TestApplication&amp;quot; ],
            &amp;quot;inductionLoops&amp;quot;: [ ],
            &amp;quot;laneAreaDetectors&amp;quot;: [ ]
        }
    ],    
    &amp;quot;servers&amp;quot;: [
        {
            &amp;quot;group&amp;quot;: &amp;quot;TestServer&amp;quot;,
            &amp;quot;applications&amp;quot;: [ &amp;quot;TestApplication&amp;quot; ]
        }
    ],
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Note that all bandwidths are given in bit per second and all delays in nanoseconds, unless explicitly defined differently.
Also, every json configuration goes through a minifier, so comments are allowed in the configuration files. An example
would be the comment before the &lt;code&gt;globalNetwork&lt;/code&gt; option.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;delay-regions&#34;&gt;Delay regions&lt;/h3&gt;
&lt;p&gt;Additionally, the user has the option to define regions with individual delays. This can be used to simulate
areas with bad reception, crowded areas etc.&lt;/p&gt;
&lt;p&gt;The regions should be stored in &lt;code&gt;&amp;lt;scenarioName&amp;gt;/cell/regions.json&lt;/code&gt;. An
example definition for a single region called &lt;code&gt;Ernst-Reuter-Platz&lt;/code&gt; could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Json&#34;&gt;{
    &amp;quot;regions&amp;quot;:[
        {
            &amp;quot;id&amp;quot;: &amp;quot;Ernst-Reuter-Platz&amp;quot;,
            &amp;quot;area&amp;quot;: {
                &amp;quot;nw&amp;quot;: { &amp;quot;lon&amp;quot;:13.3249, &amp;quot;lat&amp;quot;:52.5131 },
                &amp;quot;se&amp;quot;: { &amp;quot;lon&amp;quot;:13.3273, &amp;quot;lat&amp;quot;:52.5125 }
            },
            &amp;quot;uplink&amp;quot;: {
                &amp;quot;delay&amp;quot;: {
                    &amp;quot;type&amp;quot;:         &amp;quot;SimpleRandomDelay&amp;quot;,
                    &amp;quot;steps&amp;quot;:        4,
                    &amp;quot;minDelay&amp;quot;:     &amp;quot;50 ms&amp;quot;,
                    &amp;quot;maxDelay&amp;quot;:     &amp;quot;200 ms&amp;quot;
                },
                 &amp;quot;transmission&amp;quot;: {
                     &amp;quot;lossProbability&amp;quot;: 0.8,
                     &amp;quot;maxRetries&amp;quot;: 2
                },
                &amp;quot;capacity&amp;quot;:         28000000
            },
            &amp;quot;downlink&amp;quot;: {
                &amp;quot;unicast&amp;quot;: {
                    &amp;quot;delay&amp;quot;: {
                        &amp;quot;type&amp;quot;:         &amp;quot;SimpleRandomDelay&amp;quot;,
                        &amp;quot;steps&amp;quot;:        3,
                        &amp;quot;minDelay&amp;quot;:     &amp;quot;100 ms&amp;quot;,
                        &amp;quot;maxDelay&amp;quot;:     &amp;quot;200 ms&amp;quot;
                    },
                    &amp;quot;transmission&amp;quot;: {
                        &amp;quot;maxRetries&amp;quot;: 2
                    }
                },
                &amp;quot;multicast&amp;quot;: {
                    &amp;quot;delay&amp;quot;: {
                        &amp;quot;type&amp;quot;:         &amp;quot;SimpleRandomDelay&amp;quot;,
                        &amp;quot;steps&amp;quot;:        3,
                        &amp;quot;minDelay&amp;quot;:     &amp;quot;120 ms&amp;quot;,
                        &amp;quot;maxDelay&amp;quot;:     &amp;quot;220 ms&amp;quot;
                    },
                    &amp;quot;transmission&amp;quot;: {
                        &amp;quot;lossProbability&amp;quot;: 0.8
                    },
                    &amp;quot;usableCapacity&amp;quot;:   0.6
                },
                &amp;quot;capacity&amp;quot;:             42200000
            }
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Note that &lt;code&gt;nw&lt;/code&gt; represents the upper-left (north-west) point of the rectangle and &lt;code&gt;se&lt;/code&gt; the lower-right (southeast).
For further information about the possible options, please refer to the Eclipse MOSAIC API documentation.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The actual configuration of the uplink and the downlink modules for each region exhibits the identical
format as configuration of the globalNetwork in the &lt;code&gt;network.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When no regions are found, or if a node (a vehicle) is not within a specified region, the globalNetwork
defined in the &lt;code&gt;network.json&lt;/code&gt;-File will be used as the delay model.&lt;/p&gt;
&lt;h2 id=&#34;transmission-simulation&#34;&gt;Transmission simulation&lt;/h2&gt;
&lt;p&gt;One of the most important feature of the cellular simulator is an estimation of the delay experienced
through the transport over the cellular network.&lt;/p&gt;
&lt;p&gt;The cellular simulator offers various modes to estimate the delay of the transmissions. The type of
estimation is specified with by &lt;code&gt;delayType&lt;/code&gt; for the uplink and downlink for each region. You may also refer to the






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/extending_mosaic/delay_models/&#34;&gt;Delay-Chapter&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;delay.type = ’ConstantDelay’&lt;/code&gt;: The message is transmitted with the latency being exactly equal to delay.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delay.type = ’SimpleRandomDelay’&lt;/code&gt;: The latency can assume different (randomly generated and uniformly distributed) values between
&lt;code&gt;minDelay&lt;/code&gt; and &lt;code&gt;maxDelay&lt;/code&gt;. The number of different values is determined by &lt;code&gt;steps&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delay.type = ’GammaRandomDelay’&lt;/code&gt;: A gamma distribution is used to estimate the latency, with $ \alpha $ = 2 and  $ \beta $= 2. The
minimal delay &lt;code&gt;minDelay&lt;/code&gt; is added to the result. The curve is fitted so that the maximum likelihood for the delay is exactly equal to
&lt;code&gt;expDelay&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delay.type = ’GammaSpeedDelay’&lt;/code&gt;: This mode closely resembles the GammaRandomDelay. Additionally, a penalty for the velocity with which
the node is moving is calculated. This penalty is then added to the original delay. The GammaRandomDelay and the GammaSpeedDelay are
derived from a measurement campaign during a research project at the DCAITI.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The two different modes for the downlink are &lt;code&gt;unicast&lt;/code&gt; and &lt;code&gt;multicast&lt;/code&gt; which are configured separately. Multicast aims to simulate the
features of Multimedia Broadcast Multicast Service (MBMS). The main difference in terms of the transmission for unicast and multicast
is the handling of undeliverable messages. For unicast, the options &lt;code&gt;lossProbability&lt;/code&gt; and &lt;code&gt;maxRetries&lt;/code&gt; are used. Pr is short for
packet retransmit and denotes the probability for a failed delivery and a subsequent retransmit. The maximum number of retries
for the retransmission is configured through the &lt;code&gt;maxRetries&lt;/code&gt;-option. The probability of a successful
retransmit is recalculated on every try.&lt;/p&gt;
&lt;p&gt;In case of multicast the &lt;code&gt;lossProbability&lt;/code&gt; is used as packet loss rate. The value is factored into the delay calculation.
In contrast to the unicast, just one transmission attempt is made for multicast.&lt;/p&gt;
&lt;h2 id=&#34;operation&#34;&gt;Operation&lt;/h2&gt;
&lt;p&gt;Beside the transmission simulation, the Addressing and Routing is the other important aspect of the Cellular Simulator. This task is enabled
by the Geocaster.&lt;/p&gt;
&lt;p&gt;The Geocaster evaluates the message headers for cellular messages, which are created by the communicating applications in the
Application Simulator.&lt;/p&gt;
&lt;p&gt;It supports the following addressing and casting schemes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/communication/#cellular-topocast&#34;&gt;CellTopocast&lt;/a&gt;&lt;/strong&gt; is the normal unicast, where the Geocaster simply resolves
the single receiver via theIPResolver. Hence, the CellTopocast directly routes the message further. Currently, Topocast doesn&amp;rsquo;t allow
broadcast or anycast addresses, but any transmission protocols (tcp, udp).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/communication/#cellular-geocast&#34;&gt;CellGeoUnicast&lt;/a&gt;&lt;/strong&gt; addresses every node in the destination area individually.
In this way it takes a geographic address and results in a loop to generate multiple unicasts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/communication/#cellular-geobroadcast&#34;&gt;CellGeoBroadcast&lt;/a&gt;&lt;/strong&gt;, which is basically MBMS, uses one broadcast to all
nodes in the destined regions.The MBMS uses the different transmission mode of multicast in the downlink. CellGeoUnicast as well as
CellGeoBroadcast require broadcast, but don’t allow tcp (as ack for broadcasts is denied).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deep Dive Perception Module</title>
      <link>https://www.eclipse.dev/mosaic/docs/extending_mosaic/perception_deep_dive/</link>
      <pubDate>Tue, 07 Jun 2022 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/extending_mosaic/perception_deep_dive/</guid>
      <description>&lt;p&gt;This page aims to give details into the concepts of MOSAICs perception module, for information on the usage view the
documentation 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/#perception&#34;&gt;here&lt;/a&gt;.
Perception in MOSAIC is evaluated in a two-step process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First a spatial search, using a spatial index, is performed to get a pre-selection of relevant vehicles&lt;/li&gt;
&lt;li&gt;Second a Field-Of-View Filter is used to get a list of actually perceived vehicles&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spatial-search--spatial-indexes&#34;&gt;Spatial Search &amp;amp; Spatial indexes&lt;/h3&gt;
&lt;p&gt;A spatial index is a data structure representing simulation entities on a 2D-plane allowing for fast spatial searches.
For our purpose this means, that we create a minimum bounding rectangle for a vehicles&#39; perception range and perform a
spatial search for entities in that rectangle.
To allow every vehicle to access the spatial index we opted for a global implementation in the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_simulator/#eclipse-mosaic-application-simulator&#34;&gt;Application Simulator&lt;/a&gt;, which is only updated when some vehicle
requests a spatial search (lazy loading).
MOSAIC provides three implementations for the spatial index: &lt;code&gt;Trivial&lt;/code&gt;, &lt;code&gt;QuadTree&lt;/code&gt; and &lt;code&gt;Grid&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;trivial&#34;&gt;Trivial&lt;/h4&gt;
&lt;p&gt;The trivial index doesn&amp;rsquo;t implement any index data-structure and just iterates over all entities in a for loop.
This is sufficient for small scenarios with limited amount of vehicles.&lt;/p&gt;
&lt;h4 id=&#34;quad-tree&#34;&gt;Quad-Tree&lt;/h4&gt;
&lt;p&gt;The Quad-Tree index represents entities in a tree data structure, that stores entities in a node up to a &lt;code&gt;splitSize&lt;/code&gt; amount.
Every node strictly has &lt;em&gt;no&lt;/em&gt; or &lt;em&gt;four&lt;/em&gt; children. The four children divide the space into four equally sized quadrants.
Additionally, a &lt;code&gt;joinSize&lt;/code&gt; and a &lt;code&gt;maxDepth&lt;/code&gt; are configured, that control, when four children are joined back to one node and
the maximum depth of the tree respectively.&lt;/p&gt;















&lt;figure id=&#34;figure-visualization-of-spatial-search-in-a-quad-tree&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/spatial-search-quadtree.png&#34; data-caption=&#34;Visualization of Spatial Search in a Quad-Tree&#34;&gt;


  &lt;img src=&#34;../images/spatial-search-quadtree.png&#34; alt=&#34;&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Visualization of Spatial Search in a Quad-Tree
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The Quad-Tree has the advantage of dynamically separating the space according to the utilization of the map.
However, in practise we measured slightly worse performance compared to the grid.&lt;/p&gt;
&lt;h4 id=&#34;grid&#34;&gt;Grid&lt;/h4&gt;
&lt;p&gt;The grid is a simple data-structure that divides the space into equally sized cells with configured &lt;code&gt;cellWidth&lt;/code&gt;s and &lt;code&gt;cellHeight&lt;/code&gt;s.
Entities positions are converted to grid-coordinates and stored in a map.
When doing a spatial search the pre-selection of vehicles happens by returning all entities in cells, that overlap with the search area.&lt;/p&gt;















&lt;figure id=&#34;figure-visualization-of-spatial-search-in-a-grid&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/spatial-search-grid.png&#34; data-caption=&#34;Visualization of Spatial Search in a Grid&#34;&gt;


  &lt;img src=&#34;../images/spatial-search-grid.png&#34; alt=&#34;&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Visualization of Spatial Search in a Grid
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;While showing slightly better performance than the Quad-Tree, the grid requires the memory allocation of all cells at start-up,
which can lead to large memory consumption in big scenarios.
Additionally, the optimal grid size depends on the viewing ranges of your entities. In the best case scenario a maximum of four grid-cells
have to be queried. This is the case if the &lt;code&gt;cellWidth&lt;/code&gt; and &lt;code&gt;cellHeight&lt;/code&gt; are at least the size of your longest viewing range.&lt;/p&gt;
&lt;h3 id=&#34;field-of-view-filter&#34;&gt;Field-Of-View Filter&lt;/h3&gt;
&lt;p&gt;After a pre-selection of entities has been made using the spatial index we have to evaluate if vehicles are actually in the field-of-view
of the ego vehicle.
The field-of-view boils down to the sector of a circle, which is defined by its two bounding vectors $\overrightarrow{b}$
and $\overrightarrow{c}$ and the radius/sight distance $h$.
Using the dot product, we can figure out if an object lies to the right or the left of a vector. Combining this with a check if the distance
is smaller than $h$ allows us to determine whether an object $\overrightarrow{m}$ lies within the perception range.&lt;/p&gt;
&lt;p style=&#34;align-content: center; font-size: 20px&#34;&gt;
$$
\begin{align}
  &amp;\text{1. }\overrightarrow{c} \cdot \overrightarrow{m} \geq 0 \\
  &amp;\text{2. }\overrightarrow{m} \cdot \overrightarrow{b} \geq 0 \\
  &amp;\text{3. }|\overrightarrow{m}| \leq h
\end{align}
$$
&lt;/p&gt;
&lt;p&gt;














&lt;figure id=&#34;figure-field-of-view-calculation&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/field-of-view.png&#34; data-caption=&#34;Field-Of-View Calculation&#34;&gt;


  &lt;img src=&#34;../images/field-of-view.png&#34; alt=&#34;&#34; width=&#34;80%&#34; &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Field-Of-View Calculation
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;strong&gt;Left&lt;/strong&gt;: Minimum Bounding Rectangle spanned by left and right bounding vectors $\overrightarrow{b}$ &amp;amp; $\overrightarrow{c}$ with length $h$,
the &lt;em&gt;origin&lt;/em&gt; () and, all cardinal direction vectors $\overrightarrow{a}_0$ to $\overrightarrow{a}_3$ contained within the viewing anlge $\gamma$.&lt;br/&gt;
&lt;strong&gt;Right&lt;/strong&gt;: Field-Of-View evaluation ($\overrightarrow{m}$ is within range, $\overrightarrow{n}$ is not)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scenario Database</title>
      <link>https://www.eclipse.dev/mosaic/docs/develop_applications/road_traffic/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/develop_applications/road_traffic/</guid>
      <description>&lt;p&gt;Each scenario to be simulated with Eclipse MOSAIC requires a database which contains information about the road infrastructure and routes the
vehicles drive on. This information is used by various federates. For example, the SUMO federate needs to know initial routes for vehicles,
and the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_simulator/&#34;&gt;Application Simulator&lt;/a&gt; requires detailed information about the road
infrastructure to provide applications with methods for route calculation. For this purpose, an embedded SQLite database is
used which is placed in the &lt;code&gt;application&lt;/code&gt; folder of the scenario. This database consists of the following tables:&lt;/p&gt;
&lt;h3 id=&#34;database-tables&#34;&gt;Database tables&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Database Name&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Contains all Nodes of the road network such as junctions and nodes describing the geometry of a road. Each node is identified by an unique ID (long).(refer to &lt;a href=&#34;http://wiki.openstreetmap.org/wiki/Node&#34; target=&#34;_blank&#34;&gt;http://wiki.openstreetmap.org/wiki/Node&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Way&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Provides various properties for each way of the road network.(refer to &lt;a href=&#34;http://wiki.openstreetmap.org/wiki/Way&#34; target=&#34;_blank&#34;&gt;http://wiki.openstreetmap.org/wiki/Way&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;WayConsistsOf&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Provides a list of nodes for each way of the road network.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Contains a list of all connections of the road network including the way it originally is part of. Each connection describes an &lt;em&gt;directed&lt;/em&gt; edge between two junctions in the road network.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ConnectionConsistsOf&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Provides a list of nodes each connection consists of.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Restriction&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Provides information about turn restrictions. Each turn restriction is described by a from-connection, a via-node, and a to-connection. This data is used for route calculation purposes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Roundabouts&lt;/code&gt;&lt;br&gt;&lt;code&gt;RoundaboutConsistsOf&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Contains information about connections belonging to roundabouts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Route&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Contains a list of all routes known for the simulation scenario. All routes referenced in the &lt;code&gt;Mapping&lt;/code&gt; configuration must be presentin this table.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Building&lt;/code&gt; &lt;br&gt;&lt;code&gt;BuildingCorner&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Provides information about buildings alongside the road network, e.g. for visualization purposes, 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/develop_applications/perception/&#34;&gt;occlusion models&lt;/a&gt;, or sophisticated communication simulation models.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Properties&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Contains the version of the Eclipse MOSAIC installation which was initially used to create the database.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;road-network-model&#34;&gt;Road network model&lt;/h3&gt;
&lt;p&gt;This section describes the model of the road network used by various components of Eclipse MOSAIC. In the next figure various nodes
and connections can be seen. A &lt;code&gt;node&lt;/code&gt; is either a junction or describes the geometry of a road. A &lt;code&gt;connection&lt;/code&gt; is a directed edge
between two junction nodes. That also means, that two separate connections exists for a road segment which can be traversed in both
directions. Each connection consists of at least two nodes (start and end junction node). Between those nodes, other nodes can exist
which describe the curvature of the road segment. Furthermore, each connection has a reference to its originating &lt;code&gt;way&lt;/code&gt;, which may
consist of various connections. A way contains further properties, such as the maximum speed or the type of the road.&lt;/p&gt;















&lt;figure id=&#34;figure-nodes-and-connections-of-the-road-network&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/node-connections.jpeg&#34; data-caption=&#34;Nodes and connections of the road network&#34;&gt;


  &lt;img src=&#34;../images/node-connections.jpeg&#34; alt=&#34;&#34; width=&#34;50%&#34; &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Nodes and connections of the road network
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Nodes and ways are identified by unique IDs derived from the base OSM network file. Connections, however, are not part of the OSM standard
and their identifiers are generated during the import. Each connection ID consists of three parts (using the string pattern &lt;code&gt;aaa_bbb_ccc&lt;/code&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aaa&lt;/code&gt; - ID of the originating way&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bbb&lt;/code&gt; - ID of the node the connection starts at.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ccc&lt;/code&gt; - ID of the node the connection ends in.&lt;/li&gt;
&lt;/ul&gt;















&lt;figure id=&#34;figure-id-of-connection-in-road-network&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/connections.jpeg&#34; data-caption=&#34;ID of connection in road network&#34;&gt;


  &lt;img src=&#34;../images/connections.jpeg&#34; alt=&#34;&#34; width=&#34;50%&#34; &gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    ID of connection in road network
  &lt;/figcaption&gt;


&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Environment Simulator</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/environment_simulator/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/environment_simulator/</guid>
      <description>&lt;p&gt;This ambassador can be configured with a configuration file. The specific path is &lt;code&gt;mosaic/scenarios/&amp;lt;scenarioName&amp;gt;/environment/environment_config.json&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   └─ environment
      └─ environment_config.json ..................... Environment ambassador configuration file
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;This simulator does not need to be installed. It is delivered as part of the Eclipse MOSAIC-installation package.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;div class=&#34;alert alert-tip&#34;&gt;
  &lt;div&gt;
&lt;p&gt;Read the detailed documentation of the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/mosaic_configuration/environment_config/&#34;&gt;Environment Configuration&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The root node of the configuration is a list of environment events. Each event require the type of the event, a rectangle area, a
strength and the time window. The following example shows the configuration of an &amp;ldquo;Obstacle&amp;rdquo; event which is valid in the
designated area (Rectangle) during the simulation time between 0 to 2000 seconds:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;events&amp;quot; : [
        {
            &amp;quot;type&amp;quot;: {
                &amp;quot;sensorType&amp;quot;: &amp;quot;OBSTACLE&amp;quot;,
                &amp;quot;value&amp;quot;: 1
            },
            &amp;quot;location&amp;quot;: {
                &amp;quot;area&amp;quot;: {
                    &amp;quot;type&amp;quot;: &amp;quot;Rectangle&amp;quot;,
                    &amp;quot;a&amp;quot;: {
                        &amp;quot;latitude&amp;quot;: 52.53654,
                        &amp;quot;longitude&amp;quot;: 13.42116
                    },
                    &amp;quot;b&amp;quot;: {
                        &amp;quot;latitude&amp;quot;: 52.53435,
                        &amp;quot;longitude&amp;quot;: 13.42366
                    }
                }
            },
            &amp;quot;time&amp;quot;: {
                &amp;quot;start&amp;quot;: &amp;quot;0 s&amp;quot;,
                &amp;quot;end&amp;quot;: &amp;quot;2000 s&amp;quot;
            }
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>MOSAIC Battery Simulator</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/emobility_simulator_battery/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/emobility_simulator_battery/</guid>
      <description>&lt;p&gt;For simulation of electric vehicles, the &lt;strong&gt;Battery Simulator&lt;/strong&gt; handles the actual processes of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discharging&lt;/li&gt;
&lt;li&gt;Charging (in connection with a 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/emobility_simulator_charging/&#34;&gt;charging station&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Recuperation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;The &lt;strong&gt;Charging Station and Battery Simulators&lt;/strong&gt; are part of 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;In order for a vehicle to move the drive train has to overcome the forces of resistance on the vehicle. Additionally, the energy of
consumers that run of the electric motor has to be generated. These forces plus the consumed energy minus the recuperation energy
build a balance that will be calculated by the battery simulator. Below is an illustration of all the forces at hand.&lt;/p&gt;















&lt;figure id=&#34;figure-simplified-model-on-applied-forces-on-vehicles&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/electric_vehicle_forces.png&#34; data-caption=&#34;Simplified model on applied forces on vehicles&#34;&gt;


  &lt;img src=&#34;../images/electric_vehicle_forces.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Simplified model on applied forces on vehicles
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;To provide for different electric vehicle types the Battery Simulator takes environment, vehicle characteristics and battery attributes into
account. One of the main features of the battery ambassador is that it can utilize dynamic class loading to use custom models, tailored to
the user&amp;rsquo;s needs. The Battery Simulator comes bundled with some basic but powerful models for






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/emobility_simulator_battery/#vehicle-model&#34;&gt;vehicles&lt;/a&gt;, 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/emobility_simulator_battery/#environment-model&#34;&gt;environment&lt;/a&gt; and the






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/emobility_simulator_battery/#battery-model&#34;&gt;battery&lt;/a&gt;. These will be explained in the following paragraphs.&lt;/p&gt;















&lt;figure id=&#34;figure-simple-overview-of-class-relations-for-the-battery-simulator&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/BatterySimulator_ClassDiagram.svg&#34; data-caption=&#34;Simple overview of class relations for the Battery Simulator&#34;&gt;


  &lt;img src=&#34;../images/BatterySimulator_ClassDiagram.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Simple overview of class relations for the Battery Simulator
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   └─ battery
      └─ battery_config.json ................. Battery ambassador configuration file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The prior discussed configuration for different models for vehicles, batteries and the environment happens in the &lt;code&gt;battery_config.json&lt;/code&gt;. For
the vehicle and battery model it is possible to define separate models per vehicle prototype and default models. Whenever an electric
vehicle is added and no models for the prototype were defined the Battery Simulator defaults to those default models. Currently, the
environment model is statically defined for all vehicles and the entire scenario.&lt;/p&gt;
&lt;h3 id=&#34;vehicle-model&#34;&gt;Vehicle model&lt;/h3&gt;
&lt;p&gt;The vehicle model holds the general properties of a vehicle influencing the battery consumption. Examples would be the weight of the vehicle, and the voltage at which the
electric engine operates. As with the other models, the provided class for the vehicle model directly affects what can be
configured here. If other properties are needed for the vehicle, this is the right place to put them. It is possible to define
separate consumers like the AC or radio, which will also have an effect on the discharging of the battery. Additionally, the recuperation support of a vehicle could be configured.&lt;/p&gt;
&lt;p&gt;To implement an own vehicle, the class &lt;code&gt;AbstractVehicleModel&lt;/code&gt; has to be extended.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bundled Model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The bundled vehicle model just allows to statically set all parameters necessary for the calculation of employed forces. It comes
pre-configured with attributes oriented on an Electric Smart. In a real-world scenario however many of these attributes are dynamic, the
weight for example changes with the amount of passengers and carried cargo.&lt;/p&gt;
&lt;h3 id=&#34;battery-model&#34;&gt;Battery model&lt;/h3&gt;
&lt;p&gt;The battery model defines the battery used by the vehicle and especially handles (dis)charging characteristics. Important properties would be the number of cells and their capacity.&lt;/p&gt;
&lt;p&gt;To implement an own battery model, the class &lt;code&gt;AbstractBatteryModel&lt;/code&gt;
needs to be extended.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bundled Models&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Battery Simulator comes bundled with two battery models, namely the &lt;code&gt;SimpleBatteryModel&lt;/code&gt; and the &lt;code&gt;LithiumIonBatteryModel&lt;/code&gt;. While the
simple model just linearly charges, discharges and recuperates energy, the lithium battery model employs a more sophisticated emulation of
the behaviors observed in real-world lithium-ion batteries. This for example includes reduced charging speeds at higher battery capacities.&lt;/p&gt;
&lt;h3 id=&#34;environment-model&#34;&gt;Environment model&lt;/h3&gt;
&lt;p&gt;Environmental factors like rolling resistance of the given underground or air drag go into this section. At the current state, a basic environment model is bundled with the Battery Simulator. To implement a custom environment
model, &lt;code&gt;AbstractEnvironmentModel&lt;/code&gt; has to be extended.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bundled Model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The bundled model includes basic environmental constants, which can deviate slightly with different altitudes, weather conditions and the
likes. However, for most applications static definitions should be sufficient.&lt;/p&gt;
&lt;h3 id=&#34;example-configuration&#34;&gt;Example configuration&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;defaultVehicleModel&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;SimpleVehicleModel&amp;quot;,
        &amp;quot;vehicleMass&amp;quot;: &amp;quot;1060 kg&amp;quot;,
        &amp;quot;referenceArea&amp;quot;: 1.95,
        &amp;quot;dragCoefficient&amp;quot;: 0.375,
        &amp;quot;tankToWheelEfficiency&amp;quot;: 0.7,
        &amp;quot;electricMotorOperatingVoltage&amp;quot;: &amp;quot;350 V&amp;quot;,
        &amp;quot;consumerOperatingVoltage&amp;quot;: &amp;quot;12 V&amp;quot;,
        &amp;quot;recuperationEfficiency&amp;quot;: 1.0,
        &amp;quot;maxRecuperationPower&amp;quot;: 60e3,
        &amp;quot;electricConsumers&amp;quot;: [
            { &amp;quot;Radio&amp;quot;: 10 },
            { &amp;quot;HeadLight&amp;quot;: 100 }
        ]
    },
    &amp;quot;defaultBatteryModel&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;SimpleBatteryModel&amp;quot;,
        &amp;quot;cells&amp;quot;: 100,
        &amp;quot;cellVoltage&amp;quot;: &amp;quot;5 V&amp;quot;,
        &amp;quot;cellCapacity&amp;quot;: &amp;quot;100 Ah&amp;quot;,
        &amp;quot;chargingEfficiency&amp;quot;: 0.8,
        &amp;quot;minStateOfCharge&amp;quot;: 1,
        &amp;quot;maxStateOfCharge&amp;quot;: 1
    },
    &amp;quot;vehicleModelMap&amp;quot;: {
        &amp;quot;prototype_1&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;SimpleVehicleModel&amp;quot;,
            &amp;quot;vehicleMass&amp;quot;: &amp;quot;1060 kg&amp;quot;,
            &amp;quot;referenceArea&amp;quot;: 1.95,
            &amp;quot;dragCoefficient&amp;quot;: 0.375,
            &amp;quot;tankToWheelEfficiency&amp;quot;: 0.7,
            &amp;quot;electricMotorOperatingVoltage&amp;quot;: &amp;quot;350 V&amp;quot;,
            &amp;quot;consumerOperatingVoltage&amp;quot;: &amp;quot;12 V&amp;quot;,
            &amp;quot;recuperationEfficiency&amp;quot;: 1.0,
            &amp;quot;maxRecuperationPower&amp;quot;: 60e3,
            &amp;quot;electricConsumers&amp;quot;: [
                { &amp;quot;Radio&amp;quot;: 10 },
                { &amp;quot;HeadLight&amp;quot;: 100 }
            ]
        }
    },
    &amp;quot;batteryModelMap&amp;quot;: {
        &amp;quot;prototype_1&amp;quot;: {
            &amp;quot;type&amp;quot;: &amp;quot;SimpleBatteryModel&amp;quot;,
            &amp;quot;cells&amp;quot;: 100,
            &amp;quot;cellVoltage&amp;quot;: &amp;quot;5 V&amp;quot;,
            &amp;quot;cellCapacity&amp;quot;: &amp;quot;100 Ah&amp;quot;,
            &amp;quot;chargingEfficiency&amp;quot;: 0.8,
            &amp;quot;minStateOfCharge&amp;quot;: 1,
            &amp;quot;maxStateOfCharge&amp;quot;: 1
        }
    },
    &amp;quot;environmentModel&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;DefaultEnvironmentModel&amp;quot;,
        &amp;quot;fluidDensity&amp;quot;: 1.293,
        &amp;quot;rollingResistanceCoefficient&amp;quot;: 0.01,
        &amp;quot;gravitationalAcceleration&amp;quot;: 9.81
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This listing shows how the vehicle, environment and battery model classes for the bundled models are configured.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Charging Station Simulator</title>
      <link>https://www.eclipse.dev/mosaic/docs/simulators/emobility_simulator_charging/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://www.eclipse.dev/mosaic/docs/simulators/emobility_simulator_charging/</guid>
      <description>&lt;p&gt;With the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/emobility_simulator_battery/&#34;&gt;Battery Simulator&lt;/a&gt;, MOSAIC Extended offers advanced simulation for the processes of discharging and recuperation. For holistic scenarios, the &lt;strong&gt;Charging Station Simulator&lt;/strong&gt; extends the modeling characteristics of electric vehicles as it validates charging requests from vehicles to control re-charging. An overview of how the simulators interact (and the used interactions) can be seen below.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;div class=&#34;alert alert-extended&#34;&gt;
  &lt;span class=&#34;extended-icon&#34; style=&#34;background-image: url(/mosaic/img/alert-extended.svg)&#34;&gt;&lt;/span&gt;
  &lt;div&gt;
&lt;p&gt;The &lt;strong&gt;Charging Station and Battery Simulators&lt;/strong&gt; are part of 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/#overview&#34;&gt;MOSAIC Extended&lt;/a&gt;.&lt;br&gt;
For further information on licenses, feel free to contact us via &lt;strong&gt;





  
  

&lt;a href=&#34;mailto:mosaic@fokus.fraunhofer.de&#34;&gt;mosaic@fokus.fraunhofer.de&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;















&lt;figure id=&#34;figure-overview-of-battery--charging-station-simulator-interaction&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;../images/ChargingStation_Battery_InteractionFlowChart.svg&#34; data-caption=&#34;Overview of Battery &amp;amp; Charging Station Simulator interaction&#34;&gt;


  &lt;img src=&#34;../images/ChargingStation_Battery_InteractionFlowChart.svg&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Overview of Battery &amp;amp; Charging Station Simulator interaction
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;As can be seen from the interaction-chart above, the Charging Station Simulator is receiving and processing the
&lt;code&gt;VehicleChargingStartRequest&lt;/code&gt;-interactions. This involves checking if requested charging stations have available spaces, the vehicle is in
charging range and some additional constraints. Furthermore, if a vehicle moves out of charging range or is removed from simulation it will
automatically stop being charged. If a &lt;code&gt;VehicleChargingStartRequest&lt;/code&gt; is successfully validated, a &lt;code&gt;BatteryChargingStart&lt;/code&gt;-interaction is
forwarded to the Battery simulator. Additionally, whenever a charging station is updated (vehicle un-/docked) the ambassador sends a
&lt;code&gt;ChargingStationUpdate&lt;/code&gt;-interaction to all subscribed simulators.&lt;/p&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;└─ &amp;lt;scenario_name&amp;gt;
   └─ charging
      └─ charging_config.json ................. Charging Station ambassador configuration file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration of actual charging stations happens in the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_mapping/#entities&#34;&gt;Mapping configuration&lt;/a&gt;. The only parameter
configured in the &lt;em&gt;charging_config.json&lt;/em&gt; is a global parameter for the maximum range of a charging station. This allows for abstract
modeling of charging stations, without the need of being super accurate with the stop positions of vehicles.&lt;/p&gt;
&lt;h3 id=&#34;example-configuration&#34;&gt;Example configuration&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;chargingStationRange&amp;quot;: &amp;quot;20m&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2023 Spring Release of Eclipse MOSAIC</title>
      <link>https://www.eclipse.dev/mosaic/post/release-23-0/</link>
      <pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/post/release-23-0/</guid>
      <description>&lt;p&gt;&lt;strong&gt;The autumn release of Eclipse MOSAIC is here! The committer team from Fraunhofer FOKUS and DCAITI is proud to present Eclipse MOSAIC 23.0 to the open source community.
This new version improves the recently introduced perception facilities in the Application simulator and brings better handling of the traffic simulation SUMO.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can find the new version in our 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/&#34;&gt;Download section&lt;/a&gt;, and in our 




&lt;a href=&#34;https://github.com/eclipse/mosaic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;release-date&#34;&gt;Release Date&lt;/h3&gt;
&lt;p&gt;2023-04-20&lt;/p&gt;
&lt;h3 id=&#34;changelog&#34;&gt;Changelog&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[A+] Perceived objects provide dimension information (length, width, height).
[A+] The perception module can now detect traffic lights and their current states.
[A+] Vehicles and other units are finally able to send V2X messages during their shutdown procedure.
[A-] Resolved issues in perception module, e.g., when multiple apps used perception modifiers simultaneously.
[M+] The RTI now detects the OS type of the local host by itself.
[M-] Fixed minor bugs in RTI, Logging, and JSON-Scheme files.
[S+] Scenario-Convert is now able to import building information to an existing scenario database.
[T+] Improved handling of vehicles which are teleported by SUMO.
[T+] Several data related to trains can now be read from SUMO.
[T+] Now supports SUMO 1.16.0
[X+] Introduced OpenDRIVE support for PHABMACS (Extended).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;⭐ A huge thanks to all users who contributed to this release:





&lt;a href=&#34;https://github.com/fhlig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; fhlig&lt;/a&gt;,





&lt;a href=&#34;https://github.com/FunKuchen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; FunKuchen&lt;/a&gt;,





&lt;a href=&#34;https://github.com/kschrab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; kschrab&lt;/a&gt;,





&lt;a href=&#34;https://github.com/schwepmo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; schwepmo&lt;/a&gt;,





&lt;a href=&#34;https://github.com/rprotzmann&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; rprotzmann&lt;/a&gt;, and





&lt;a href=&#34;https://github.com/thonag&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; thonag&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Changelog Legend&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[M]&lt;/code&gt; &lt;em&gt;Eclipse MOSAIC&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[X]&lt;/code&gt; &lt;em&gt;MOSAIC Extended&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[A]&lt;/code&gt; &lt;em&gt;Application simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[C]&lt;/code&gt; &lt;em&gt;Communication simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[E]&lt;/code&gt; &lt;em&gt;Environment simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[N]&lt;/code&gt; &lt;em&gt;Navigation component&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[S]&lt;/code&gt; &lt;em&gt;Scenario-convert&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[T]&lt;/code&gt; &lt;em&gt;Traffic simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[+/-]&lt;/code&gt; &lt;em&gt;new Feature/Bugfix&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>2022 Autumn Release of Eclipse MOSAIC</title>
      <link>https://www.eclipse.dev/mosaic/post/release-22-1/</link>
      <pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/post/release-22-1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;The autumn release of Eclipse MOSAIC is here! The committer team from Fraunhofer FOKUS and DCAITI is proud to present Eclipse MOSAIC 22.1 to the open source community.
This new version extends the recently introduced perception facilities in the Application simulator and upgrades the ns-3 simulator coupling.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can find the new version in our 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/&#34;&gt;Download section&lt;/a&gt;, and in our 




&lt;a href=&#34;https://github.com/eclipse/mosaic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;release-date&#34;&gt;Release Date&lt;/h3&gt;
&lt;p&gt;2022-10-19&lt;/p&gt;
&lt;h3 id=&#34;changelog&#34;&gt;Changelog&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[A+] Perception module is now working with viewing angles larger than 180 degrees.
[A+] Introducing perception modifiers, such as occlusion or simple error models.
[A+] Improved API of vehicle operating system; action methods (e.g., change speed) now accept nanoseconds.
[M+] Improved handling of priorities when processing time advance requests.
[M+] Allow parallel execution of federates based on same Docker image (e.g., when running simulations in parallel).
[M+] Added configuration option to configure decimal separator in file output generator.
[C+] Upgraded ns-3 federate to support ns3-36.1.
[C+] Improved default logging of OMNeT++ and ns-3 simulations to be less verbose.
[C-] Fixed a bug in OMneT++ federate using the wrong `omnetpp.ini`.
[S+] Added import of building information from OSM, e.g., for wall occlusion in perception module. 
[T+] Improved coupling of traffic simulator SUMO with vehicle simulators (e.g., PHABMACS or Carla).
[T+] Now supports SUMO 1.14.1
[T+] Released Berlin SUMO Traffic (BeST) scenario at https://github.com/mosaic-addons/best-scenario
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;⭐ A huge thanks to all users who contributed to this release:





&lt;a href=&#34;https://github.com/fabmax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; fabmax&lt;/a&gt;,





&lt;a href=&#34;https://github.com/felixlutz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; felixlutz&lt;/a&gt;,





&lt;a href=&#34;https://github.com/fhlig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; fhlig&lt;/a&gt;,





&lt;a href=&#34;https://github.com/FunKuchen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; FunKuchen&lt;/a&gt;,





&lt;a href=&#34;https://github.com/kschrab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; kschrab&lt;/a&gt;,





&lt;a href=&#34;https://github.com/schwepmo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; schwepmo&lt;/a&gt;,





&lt;a href=&#34;https://github.com/realmaxneu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; realmaxneu&lt;/a&gt;,





&lt;a href=&#34;https://github.com/rprotzmann&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; rprotzmann&lt;/a&gt;, and





&lt;a href=&#34;https://github.com/thonag&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; thonag&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Changelog Legend&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[M]&lt;/code&gt; &lt;em&gt;Eclipse MOSAIC&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[X]&lt;/code&gt; &lt;em&gt;MOSAIC Extended&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[A]&lt;/code&gt; &lt;em&gt;Application simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[C]&lt;/code&gt; &lt;em&gt;Communication simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[E]&lt;/code&gt; &lt;em&gt;Environment simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[N]&lt;/code&gt; &lt;em&gt;Navigation component&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[S]&lt;/code&gt; &lt;em&gt;Scenario-convert&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[T]&lt;/code&gt; &lt;em&gt;Traffic simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[+/-]&lt;/code&gt; &lt;em&gt;new Feature/Bugfix&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Introducing the BeST Scenario</title>
      <link>https://www.eclipse.dev/mosaic/post/best-scenario-short/</link>
      <pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/post/best-scenario-short/</guid>
      <description>




  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.eclipse.dev/mosaic/mosaic/post/best-scenario-short/header_hu859dec11bd9ab75b8225e25d86466795_974599_2000x2000_fit_q90_lanczos.jpg&#34; &gt;


  &lt;img data-src=&#34;https://www.eclipse.dev/mosaic/mosaic/post/best-scenario-short/header_hu859dec11bd9ab75b8225e25d86466795_974599_2000x2000_fit_q90_lanczos.jpg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;60%&#34; height=&#34;1064&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;We present a large-scale traffic scenario of Berlin for the Evaluation of Smart Mobility Applications. This scenario provides 24 hours of motorized private traffic, including almost 2,25 million individual trips. The Berlin SUMO Traffic (BeST) scenario is open-source and prepared to be compatible with Eclipse MOSAIC.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;During the last two years, we spend much time on preparing this scenario for our own purposes.
We now want to share the result with researchers worldwide to enable assessment of smart mobility applications on a large scale.
For that purpose, we offer a MOSAIC compatible simulation scenario which contains configuration files for a traffic scenario for Eclipse SUMO.
This scenario covers motorized private traffic for 24 hours in the area of Berlin.
With MOSAIC, vehicles can be equipped with any kind of application, including simulation of communication among vehicles or server applications to model ITS.&lt;/p&gt;
&lt;p&gt;We presented the scenario on 




&lt;a href=&#34;https://csum.civ.uth.gr/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSUM 2022&lt;/a&gt; (taking place 31 August - 2 September 2022) and also prepared a paper presenting our methodology on creating the scenario.
The paper will be published soon in the conference proceedings via Springer Link.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Our paper about the BeST scenario won the Best Paper / Young Researcher Award at CSUM 2022!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can freely use the scenario which is available on GitHub: 




&lt;a href=&#34;https://github.com/mosaic-addons/best-scenario&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; https://github.com/mosaic-addons/best-scenario&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Virtual Testing of Touring Solutions for Vehicle Fleets</title>
      <link>https://www.eclipse.dev/mosaic/post/tour-management/</link>
      <pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/post/tour-management/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Courier-, Express- &amp;amp; Parcel-providers (CEP-Providers) play an evermore important role in the daily lives of many people. To
guarantee timely deliveries and customer satisfaction, these providers rely on sophisticated algorithms to manage the disposition of their
fleets. In the course of the eBaseCamp-project, Eclipse MOSAIC has been utilized and extended to model a delivery service leveraged by
e-mobility and a Base Camp infrastructure.&lt;/strong&gt;&lt;/p&gt;















&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./ebasecamp_system_overview.svg&#34; &gt;


  &lt;img src=&#34;./ebasecamp_system_overview.svg&#34; alt=&#34;&#34; width=&#34;75%&#34; &gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The aim of the research project 




&lt;a href=&#34;https://www.digitale-technologien.de/DT/Redaktion/DE/Standardartikel/IKT-EM/IKT-Projekte/ikt-III-projekt-eBaseCamp.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBaseCamp&lt;/a&gt; was to replace the emission- and fuel-hungry Diesel fleets of CEP-providers with
clean emissionless electric vehicles and evaluate the economical and ecological impact.
To achieve this goal a Base Camp infrastructure is proposed, providing parking spaces, charging spots, and further facilities for electric fleets.
To measure potential emission and fuel savings, an entire day of deliveries in Berlin was modeled,
complete with realistic background traffic, and configurable delivery positions &amp;amp; fleet sizes.
In a first step the logistic applications were developed and tested on an excerpt of the map covering Charlottenburg (district of Berlin).&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-left-osm-map-of-charlottenburg-right-sumo-simulation-at-800am-of-charlottenburg&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.eclipse.dev/mosaic/mosaic/post/tour-management/charlottenburg_combined_hufee6e8d88046ca53a5659a90c51234db_1402627_2000x2000_fit_q90_lanczos.jpg&#34; data-caption=&#34;Left: OSM-Map of Charlottenburg Right: SUMO Simulation at 8:00am of Charlottenburg&#34;&gt;


  &lt;img data-src=&#34;https://www.eclipse.dev/mosaic/mosaic/post/tour-management/charlottenburg_combined_hufee6e8d88046ca53a5659a90c51234db_1402627_2000x2000_fit_q90_lanczos.jpg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;75%&#34; height=&#34;1200&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;strong&gt;Left&lt;/strong&gt;: OSM-Map of Charlottenburg &lt;strong&gt;Right&lt;/strong&gt;: SUMO Simulation at 8:00am of Charlottenburg
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Utilizing &lt;strong&gt;Eclipse MOSAIC&lt;/strong&gt;s Application Simulator a system has been developed, that allows for remote tour planning and vehicle routing
requests.
This system enables drivers to request new deliveries on demand while not having to worry about finding the fastest routes themselves.
On the server-side state-of-the-art libraries are used to solve Shortest Path and the Vehicle Routing Problem (VRP) to provide drivers with optimal tours.&lt;/p&gt;
&lt;h3 id=&#34;the-simulation-setup&#34;&gt;The Simulation Setup&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Infrastructure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Initially, the infrastructure for the Base Camps and delivery bases had to be modeled.
We extended the road network with SUMO parking areas as shown in the picture below, which allows for variable locations
and easy integration with &lt;strong&gt;Eclipse MOSAIC&lt;/strong&gt;.
For each parking spot in the Base Camp a Charging Spot was configured using the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/emobility_simulator_charging/&#34;&gt;Charging Simulator (MOSAIC Extended)&lt;/a&gt;, which delivery vehicles can dock on to.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-left-modeled-base-camp-right-modeled-delivery-base&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.eclipse.dev/mosaic/mosaic/post/tour-management/basecamp_hu35996ea52cc3b8f14031f9e7e4a97a22_229864_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Left: Modeled Base Camp Right: Modeled Delivery Base&#34;&gt;


  &lt;img data-src=&#34;https://www.eclipse.dev/mosaic/mosaic/post/tour-management/basecamp_hu35996ea52cc3b8f14031f9e7e4a97a22_229864_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;75%&#34; height=&#34;740&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;strong&gt;Left&lt;/strong&gt;: Modeled Base Camp &lt;strong&gt;Right&lt;/strong&gt;: Modeled Delivery Base
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Day Plans&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In a second step we analyzed the typical day plans of delivery drivers and evaluated how these will change with
the integration of a Base Camp Infrastructure (see image below).
Additionally, we developed a tool which uniformly distributes Delivery Stops with variable times in configured areas.
Together with configurable timings for loading and unloading and variable starting hours, the general evaluation setup was ready.&lt;/p&gt;















&lt;figure id=&#34;figure-left-classical-day-plan-of-delivery-drivers-right-day-plan-with-the-integration-of-a-base-camp-infrastructure&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./day_plans.svg&#34; data-caption=&#34;Left: Classical day plan of delivery drivers Right: day plan with the integration of a Base Camp Infrastructure&#34;&gt;


  &lt;img src=&#34;./day_plans.svg&#34; alt=&#34;&#34; width=&#34;75%&#34; &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    &lt;strong&gt;Left:&lt;/strong&gt; Classical day plan of delivery drivers &lt;strong&gt;Right:&lt;/strong&gt; day plan with the integration of a Base Camp Infrastructure
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Battery Simulator&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to achieve convincing results for the energy demand of electronic vehicles we revamped the






  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/emobility_simulator_battery/&#34;&gt;Battery Simulator (MOSAIC Extended)&lt;/a&gt;, introducing a new WLTC-validated
Lithium-Ion Battery Model and capabilities for DC-Charging.
Furthermore, we realistically modeled the Mercedes eSprinter for the &lt;strong&gt;Battery Simulator&lt;/strong&gt; to run the simulations with.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-comparison-of-the-soc-values-of-a-validated-battery-model-left-and-the-new-eclipse-mosaic-lithium-ion-battery-model-right&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.eclipse.dev/mosaic/mosaic/post/tour-management/battery_models_hua43c8868f8600358ef03ae318854d6cf_113472_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Comparison of the SOC-values of a validated Battery Model (left) and the new Eclipse MOSAIC Lithium-Ion Battery Model (right)&#34;&gt;


  &lt;img data-src=&#34;https://www.eclipse.dev/mosaic/mosaic/post/tour-management/battery_models_hua43c8868f8600358ef03ae318854d6cf_113472_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;75%&#34; height=&#34;482&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Comparison of the SOC-values of a validated Battery Model (&lt;strong&gt;left&lt;/strong&gt;) and the new Eclipse MOSAIC Lithium-Ion Battery Model (&lt;strong&gt;right&lt;/strong&gt;)
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p style=&#34;font-size:9px&#34;&gt;[1] Han, Wang, Filev. „Optimized Design of Multi-Speed Transmissions for Battery Electric Vehicles”, 2019&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Touring&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally, with all prerequisites fulfilled implementation of the &lt;strong&gt;ITS&lt;/strong&gt;-Application could begin.
Vehicles will programmatically follow their day plans, with delivery stops and routes being requested from a remote server,
once the previous delivery is finished. This allows the Touring-Server to intelligently plan the execution of all existing stops.
Algorithmically this means that the Vehicle Routing Problem (VRP) has to be solved. The Server-Application has bindings for
the state-of-the-art libraries 




&lt;a href=&#34;https://jsprit.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jsprit&lt;/a&gt; and 




&lt;a href=&#34;https://developers.google.com/optimization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OR-Tools&lt;/a&gt;, and can
be configured with one or the other.&lt;/p&gt;
&lt;p&gt;View the short video demonstration below to get an overview on the complete system in function!&lt;/p&gt;
&lt;video controls style=&#34;width:50%&#34;&gt;
  &lt;source src=&#34;https://owncloud.fokus.fraunhofer.de/index.php/s/WYotnZCfWisLppV/download&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;h3 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next?&lt;/h3&gt;
&lt;p&gt;Alongside the touring solutions, we developed a Floating Car Data (FCD) based system for Traffic State Estimation.
This system enables vehicles of the fleet to periodically send data including their positions, speeds and heading
to a central server. The server uses the combined FCD-packages to estimate the current traffic state in an
edge-based manner using a clustering approach.&lt;/p&gt;
&lt;p&gt;In the future we aim to couple our solutions to work hand-in-hand by considering the traffic state for tour planning and also
using tour planning to provide better traffic state estimation, by allowing small detours to improve data quality for less frequented
roads.
We call this approach Data-Routing and hope to enable stable traffic state estimation while lowering the rate of equipped vehicles.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;




&lt;a href=&#34;https://www.digitale-technologien.de/DT/Redaktion/DE/Standardartikel/IKT-EM/IKT-Projekte/ikt-III-projekt-eBaseCamp.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;ebasecamp.png&#34; alt=&#34;eBaseCamp&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This work was part of the 




&lt;a href=&#34;https://www.digitale-technologien.de/DT/Redaktion/DE/Standardartikel/IKT-EM/IKT-Projekte/ikt-III-projekt-eBaseCamp.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBaseCamp&lt;/a&gt; project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2022 Spring Release of Eclipse MOSAIC</title>
      <link>https://www.eclipse.dev/mosaic/post/release-22-0/</link>
      <pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/post/release-22-0/</guid>
      <description>&lt;p&gt;&lt;strong&gt;The spring release of Eclipse MOSAIC has arrived! The committer team from Fraunhofer FOKUS and DCAITI is proud to present Eclipse MOSAIC 22.0 to the open source community.
This new version introduces perception facilities to the Application simulator and improved the integration of the traffic simulator SUMO.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can find the new version in our 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/&#34;&gt;Download section&lt;/a&gt;, and in our 




&lt;a href=&#34;https://github.com/eclipse/mosaic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;release-date&#34;&gt;Release Date&lt;/h3&gt;
&lt;p&gt;2022-05-04&lt;/p&gt;
&lt;h3 id=&#34;changelog&#34;&gt;Changelog&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[A+] A perception module has been added. Vehicles can now perceive other vehicles in their field of view.
[A+] Adjusted tutorial application WeatherServerApp to use server entity.
[A+] Improved map matching of start and end points for routing.
[A-] Fixed a bug in payload deserialization.
[M+] Added Quad-tree and Grid index for fast search of surrounding entities.
[M+] Allow configuration of a connection id as departure position of a vehicle.
[M-] Refactored and unified matrix implementations in mosaic-utils.
[T+] Improved LibSumo coupling interface.
[T+] Enhanced interface to SUMO to use context subscriptions in certain situations.
[T+] Now supports SUMO 1.13.0
[T-] Fixed wrong position problem of parked vehicles.
[X+] Introduced new physics engine in PHABMACS based on PhysX (Extended).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;⭐ A huge thanks to all contributors who participated in this release:





&lt;a href=&#34;https://github.com/fabmax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; fabmax&lt;/a&gt;,





&lt;a href=&#34;https://github.com/felixlutz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; felixlutz&lt;/a&gt;,





&lt;a href=&#34;https://github.com/kschrab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; kschrab&lt;/a&gt;,





&lt;a href=&#34;https://github.com/ninabohm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; ninabohm&lt;/a&gt;,





&lt;a href=&#34;https://github.com/schwepmo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; schwepmo&lt;/a&gt;, and





&lt;a href=&#34;https://github.com/rprotzmann&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; rprotzmann&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Changelog Legend&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[M]&lt;/code&gt; &lt;em&gt;Eclipse MOSAIC&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[X]&lt;/code&gt; &lt;em&gt;MOSAIC Extended&lt;/em&gt;\
&lt;code&gt;[A]&lt;/code&gt; &lt;em&gt;Application simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[C]&lt;/code&gt; &lt;em&gt;Communication simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[E]&lt;/code&gt; &lt;em&gt;Environment simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[N]&lt;/code&gt; &lt;em&gt;Navigation component&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[S]&lt;/code&gt; &lt;em&gt;Scenario-convert&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[T]&lt;/code&gt; &lt;em&gt;Traffic simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[+/-]&lt;/code&gt; &lt;em&gt;new Feature/Bugfix&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Evaluating Cooperative LiDAR Data Fusion for VRU Safety with MOSAIC Extended</title>
      <link>https://www.eclipse.dev/mosaic/post/cooperative-lidar-vru-safety/</link>
      <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/post/cooperative-lidar-vru-safety/</guid>
      <description>&lt;p&gt;&lt;strong&gt;People traveling by bike, on foot or e-scooters are little protected in the event of a collision and therefore known as Vulnerable Road Users (VRUs). Modern sensor systems for automated driving such as LiDAR are able to detect VRUs, thus facilitate warnings and safety. Yet, in certain situations, local blind spots could occur. Data fusion from different vehicles could solve this issue - as it is shown with PHABMACS and MOSAIC Extended.&lt;/strong&gt;&lt;/p&gt;





  
  











&lt;figure &gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.eclipse.dev/mosaic/mosaic/post/cooperative-lidar-vru-safety/header_hu96876ddb8b25fac64874ea85d049bd00_928574_2000x2000_fit_lanczos_2.png&#34; &gt;


  &lt;img data-src=&#34;https://www.eclipse.dev/mosaic/mosaic/post/cooperative-lidar-vru-safety/header_hu96876ddb8b25fac64874ea85d049bd00_928574_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;70%&#34; height=&#34;795&#34;&gt;
&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;During the research project &lt;strong&gt;




&lt;a href=&#34;https://reallab-hamburg.de/projekte/vernetzte-vulnerable-road-users/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RealLabor Hamburg&lt;/a&gt;&lt;/strong&gt;, we used MOSAIC to create a complex traffic situation for investigating the general benefit of LiDAR based object detection and the effectiveness of merging the LiDAR sensor data (point clouds) from multiple vehicles before applying object detection. In this case, the LiDAR data would not be processed locally on the vehicles but communicated to a server (possibly in the Mobile Edge Cloud) and processed there - accordingly it results in a Cooperative LiDAR Data Fusion.&lt;/p&gt;
&lt;h2 id=&#34;scenario-for-data-collection&#34;&gt;Scenario for Data Collection&lt;/h2&gt;
&lt;p&gt;As a first step, we set up a simulation scenario at the Sievekingplatz in Hamburg.
At the chosen road section, complicated traffic situations can arise due to the multi-lane road, the parallel bike lane, and the bus stop.
To simulate such a situation, we added a halting bus, a bike riding along the bike lane, and three passenger cars driving in a row.
With the &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_mapping/&#34;&gt;Mapping&lt;/a&gt;&lt;/strong&gt; configuration file, the vehicles are timed such that the second vehicle in the row can not perceive the bike when passing the bus, even in the safety-relevant close range.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-frame-of-the-sievekingplatz-scenario-the-trajectories-of-the-vehicles-are-marked-in-yellow&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.eclipse.dev/mosaic/mosaic/post/cooperative-lidar-vru-safety/scenario_screenshot_huba8ebc700f8573edde0ea3a9a508d1cb_464271_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Frame of the Sievekingplatz scenario. The trajectories of the vehicles are marked in yellow.&#34;&gt;


  &lt;img data-src=&#34;https://www.eclipse.dev/mosaic/mosaic/post/cooperative-lidar-vru-safety/scenario_screenshot_huba8ebc700f8573edde0ea3a9a508d1cb_464271_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;80%&#34; height=&#34;426&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Frame of the Sievekingplatz scenario. The trajectories of the vehicles are marked in yellow.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The simulation of LiDAR sensors is implemented in the &lt;strong&gt;PHABMACS&lt;/strong&gt; vehicle simulator, which is integrated in &lt;strong&gt;MOSAIC Extended&lt;/strong&gt;.
With the &lt;code&gt;phabmacs_config.json&lt;/code&gt; file it is possible to configure LiDAR sensors according to real products. In this case we configured it according to the Velodyne HDL-64E.&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_simulator/&#34;&gt;Application Simulator&lt;/a&gt;&lt;/strong&gt;, each of the passenger cars is equipped with a LiDAR sensor which scans the environment and creates a 3D point cloud at a rate of 10 Hz.
To pool the LiDAR data from the passenger vehicles together at a server, we mapped a &lt;code&gt;LidarTransmissionApp&lt;/code&gt; on each vehicle, forwarding the LiDAR point cloud to the server, using the &lt;code&gt;PointCloudMessages&lt;/code&gt;.
Additionally, all simulated vehicles (cars, bus and bike) are mapped with a &lt;code&gt;ReportingApp&lt;/code&gt;, using the &lt;code&gt;ReportMessages&lt;/code&gt; to report vehicle information such as e.g., position and heading. These data are the ground truth for original location information, used in the later accuracy comparison.
On the server, a &lt;code&gt;DataManagementApp&lt;/code&gt; handles all received messages for the cooperative data fusion and exports data to log files, using the &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/visualization/filevis/&#34;&gt;Output Generator&lt;/a&gt;&lt;/strong&gt;.
The &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_cell/&#34;&gt;Cell Simulator&lt;/a&gt;&lt;/strong&gt; models the message transmission between the mobile entities and the server. An overview of all components can be seen below.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-scenario-components-overview&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.eclipse.dev/mosaic/mosaic/post/cooperative-lidar-vru-safety/scenario_overview_hude024dadbf4b3a5d490057146ad8304b_45033_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Scenario components overview&#34;&gt;


  &lt;img data-src=&#34;https://www.eclipse.dev/mosaic/mosaic/post/cooperative-lidar-vru-safety/scenario_overview_hude024dadbf4b3a5d490057146ad8304b_45033_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;80%&#34; height=&#34;458&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Scenario components overview
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;evaluation-of-lidar-data-processing&#34;&gt;Evaluation of LiDAR Data Processing&lt;/h2&gt;
&lt;p&gt;Based on the data collected from the simulation, we evaluated the effectiveness of merging sensor data before object detection.
We specifically focused on the detectability of the bike based on the point cloud data.
For this purpose, we estimated object detection results by filtering the LiDAR hits on the bike, using locational vehicle data gained from the &lt;code&gt;ReportMessages&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In FIGURE 3, the number of LiDAR hits on the bike at each sampling step are displayed.
As there are always some LiDAR hits, we can conclude that at all times the bike is visible from at least one perspective.
Though at certain frames some passenger cars could not perceive the bike, as it was occluded by the bus from their perspective.
Especially when &lt;code&gt;car_2&lt;/code&gt; is passing the bike, there are some frames (~16.8-17.8s) at which the general visibility of the bike is very limited.
In these frames an object detection could profit a lot from merging the individual point clouds, as it would increase the overall amount of LiDAR hits and therefore the detection of an object could be more likely.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-total-amount-of-lidar-hits-on-the-car-from-each-lidar-and-the-sum-of-all-lidar-hits&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.eclipse.dev/mosaic/mosaic/post/cooperative-lidar-vru-safety/LidarHits_huf4cfe39e38ce308d65f0c0bd8a082301_71957_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;The total amount of LiDAR hits on the car from each LiDAR and the sum of all LiDAR hits.&#34;&gt;


  &lt;img data-src=&#34;https://www.eclipse.dev/mosaic/mosaic/post/cooperative-lidar-vru-safety/LidarHits_huf4cfe39e38ce308d65f0c0bd8a082301_71957_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;46%&#34; height=&#34;480&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    The total amount of LiDAR hits on the car from each LiDAR and the sum of all LiDAR hits.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;To further evaluate the merging of point clouds we compared it with the merging of objects.
For the &lt;em&gt;PointCloudMerge&lt;/em&gt;, the latest point cloud from all vehicles with a LiDAR sensor are unified, resulting in one large global point cloud. This point cloud is then used to derive a bounding box for the bike.
For the &lt;em&gt;ObjectMerge&lt;/em&gt; a bounding box for each individual point cloud is derived. From all these bounding boxes, the one which is dimensionally most similar to the actual bounding box of the bike, is selected as final result.
To compare the results of both processing methods the &lt;em&gt;Bounding Box RMSE&lt;/em&gt; was used as a metric.
This metric represents the relation between the bounding box calculated from the point clouds and the actual bounding box of the bike, considering width and length of the bounding boxes.
A value of &lt;code&gt;0.0&lt;/code&gt; corresponds to no error and therefore a perfect match of the bounding boxes.&lt;/p&gt;
&lt;p&gt;In FIGURE 4 the results of both merging methods can be seen.
The results show that the bounding boxes are more accurate in many time steps when applying the &lt;em&gt;PointCloudMerge&lt;/em&gt; method.
Also, some peaks in the metric observable with the &lt;em&gt;ObjectMerge&lt;/em&gt; method could be averted.
The often more accurate bounding boxes with &lt;em&gt;PointCloudMerge&lt;/em&gt; could lead to an overall more stable object detection and more accurate labeling, which is important to correctly estimate behavior of objects in an autonomous driving context.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure--comparison-of-different-data-merging-methods-with-the-boundingbox-rmse-metric&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.eclipse.dev/mosaic/mosaic/post/cooperative-lidar-vru-safety/PointCloudMerge_vs_ObjectMerge_hue0c3c11dd13aa5205121fc5b5b78d64a_63185_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;: Comparison of different data merging methods with the BoundingBox RMSE metric.&#34;&gt;


  &lt;img data-src=&#34;https://www.eclipse.dev/mosaic/mosaic/post/cooperative-lidar-vru-safety/PointCloudMerge_vs_ObjectMerge_hue0c3c11dd13aa5205121fc5b5b78d64a_63185_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;46%&#34; height=&#34;480&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    : Comparison of different data merging methods with the &lt;em&gt;BoundingBox RMSE&lt;/em&gt; metric.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We created a complex traffic situation collecting LiDAR sensor data for the preliminary evaluation of a system for merging 3D point clouds before applying object detection.&lt;/p&gt;
&lt;p&gt;MOSAICs &lt;strong&gt;Multi-Domain&lt;/strong&gt; aspect was utilized as the evaluated system including moving vehicles, a bus and a bike, dedicated applications for reporting and data processing, as well as the communication link for data transmission was modelled with the simulators PHABMACS, Application Simulator and Cell Simulator. Especially PHABMACS can model high-resolution LiDAR sensors and precise driving maneuvers - just according to MOSAICs &lt;strong&gt;Multi-Scale&lt;/strong&gt; aspect. On top, the Output Generator supported with formatted data recording for post-processing of simulation results.&lt;/p&gt;
&lt;p&gt;The results show that merging point clouds is indeed a processing method for LiDAR data worth to investigate further, as it could increase the likelihood of detecting an object and increase the accuracy of the labeling.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Further information about RealLabHH and the use case of protecting VRUs: &lt;a href=&#34;https://reallab-hamburg.de/projekte/vernetzte-vulnerable-road-users/&#34;&gt;https://reallab-hamburg.de/projekte/vernetzte-vulnerable-road-users/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RealLabHH was completed in December 2021 after 1.5 years. It was funded by the German Federal Ministry of Transport and Digital Infrastructure (BMVI).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2021 Autumn Release of Eclipse MOSAIC</title>
      <link>https://www.eclipse.dev/mosaic/post/release-21-1/</link>
      <pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/post/release-21-1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;A new release of Eclipse MOSAIC is here! The committer team from Fraunhofer FOKUS and DCAITI is proud to present Eclipse MOSAIC 21.1 to the open source community.
This new version focuses on a better usage of communication simulators SNS, OMNeT++, and ns-3, and allows to use a much faster integration of the traffic simulator SUMO.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can find the new version in our 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/&#34;&gt;Download section&lt;/a&gt;, and in our 




&lt;a href=&#34;https://github.com/eclipse/mosaic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;release-date&#34;&gt;Release Date&lt;/h3&gt;
&lt;p&gt;2021-10-07&lt;/p&gt;
&lt;h3 id=&#34;changelog&#34;&gt;Changelog&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[A+] Server units are now able to access the central navigation component for routing purposes.
[A+] The stop mode has been revised, allowing vehicles to park in parking areas (SUMO).
[M-] WebVisualizer now removes vehicles correctly and shows V2X indicators longer.
[M-] Fixed a bug in matrix mappers configuration in mapping.
[C+] Upgraded ns-3 federate to support ns3-34.
[C+] Major improvement of logging for SNS, OMNeT++, and ns-3.
[C-] Fixed a bug in polygon intersection test used by reachability check in mosaic-cell.
[S+] Improved scenario-convert for faster and more reliable import of SUMO net files.
[T+] You can now use LibSumo as an alternative to TraCI (experimental).
[T+] Now supports SUMO 1.10.0
[X+] Major overhaul of battery and charging station simulation (Extended).
[X+] Added new consumption model for Li-Ion based batteries (Extended).
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;⭐ A huge thanks to all contributors who participated in this release:





&lt;a href=&#34;https://github.com/felixlutz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; felixlutz&lt;/a&gt;,





&lt;a href=&#34;https://github.com/realmaxneu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; realmaxneu&lt;/a&gt;,





&lt;a href=&#34;https://github.com/fhilg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; fhilg&lt;/a&gt;,





&lt;a href=&#34;https://github.com/kschrab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; kschrab&lt;/a&gt;,





&lt;a href=&#34;https://github.com/paguos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; paguos&lt;/a&gt;,





&lt;a href=&#34;https://github.com/schwepmo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; schwepmo&lt;/a&gt;, and





&lt;a href=&#34;https://github.com/vogtfa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; vogtva&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Changelog Legend&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[M]&lt;/code&gt; &lt;em&gt;Eclipse MOSAIC&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[X]&lt;/code&gt; &lt;em&gt;MOSAIC Extended&lt;/em&gt;\
&lt;code&gt;[A]&lt;/code&gt; &lt;em&gt;Application simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[C]&lt;/code&gt; &lt;em&gt;Communication simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[E]&lt;/code&gt; &lt;em&gt;Environment simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[N]&lt;/code&gt; &lt;em&gt;Navigation component&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[S]&lt;/code&gt; &lt;em&gt;Scenario-convert&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[T]&lt;/code&gt; &lt;em&gt;Traffic simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[+/-]&lt;/code&gt; &lt;em&gt;new Feature/Bugfix&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Testing Remote-Operated Driving virtually with Eclipse MOSAIC</title>
      <link>https://www.eclipse.dev/mosaic/post/remote-operated-driving/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/post/remote-operated-driving/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;overview.png&#34; alt=&#34;alternative text for search engines&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remote-Operated Driving&lt;/strong&gt; is the bridge technology from human towards fully automated driving.
In situations outside the driving domain of a highly-automated vehicle, e.g. if data is missing, or the autonomous function is unsure to
make a certain decision, remote-operation is the key. Also, in other use-cases, remote-operated driving is a helpful
technique, e.g. for driving electric car-sharing vehicles to their charging stations, or maneuvering vehicles remotely through
a parking garage.&lt;/p&gt;
&lt;p&gt;In all those use-cases, a human operator would &amp;ldquo;steer&amp;rdquo; the vehicle remotely. All sensor information would be sent over the 5G network
to the operator who can then decide on the action or trajectory the vehicle should follow. The information the operator
receives could be any sensor data from the vehicle, such as camera data, LiDAR data,
or already compiled information like detected objects and free space.
With Mobile Edge Computing and sensor fusion, the information could be enriched by other vehicles or stationary sensors.&lt;/p&gt;
&lt;p&gt;Virtual Testing with MOSAIC helps to dive deeper into this topic. This study bases on LiDAR data for presentation of the operator view,
which allows selecting different viewing angles as well as sensor fusion of different perspectives from other vehicles for a
holistic environment model. The final result can be seen in the video below.&lt;/p&gt;
&lt;p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/KC5ZTy1CDz8&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;a title=&#34;Watch &#39;Simulating Remote Operated Driving | FOKUS Smart Mobility&#39; on YouTube&#34; href=&#34;https://www.youtube.com/watch?v=KC5ZTy1CDz8&#34;&gt;
&lt;i class=&#34;fab fa-youtube&#34;&gt;&lt;/i&gt; Watch &amp;ldquo;Simulating Remote Operated Driving | FOKUS Smart Mobility&amp;rdquo; on YouTube
&lt;/a&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;Eclipse MOSAIC has been used to couple the vehicle simulator PHABMACS with the MOSAIC Application
simulator, in which a custom application has been deployed providing the operator view.
The vehicle simulator PHABMACS is responsible for vehicle dynamics and sensor data, in this case LiDAR data.
The message exchange of LiDAR as well as vehicle control data has been simulated by integrating the MOSAIC Cell simulator.
In this way, we could analyze the influence of communication properties, e.g. latencies and
different connection qualities such as low capacities or packet losses, on the application.
For the hybrid test setup with virtual world and real application for the human operators,
the whole simulation has to run in real time, which is possible with Eclipse MOSAIC (see parameter &lt;code&gt;--realtime-brake 1&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;overview_mosaic.png&#34; alt=&#34;Tele-Operated Driving Simulation with Eclipse MOSAIC&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2021 Spring Release of Eclipse MOSAIC</title>
      <link>https://www.eclipse.dev/mosaic/post/release-21-0/</link>
      <pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/post/release-21-0/</guid>
      <description>&lt;p&gt;&lt;strong&gt;The spring release has arrived! The committer team from Fraunhofer FOKUS and DCAITI is proud to present Eclipse MOSAIC 21.0 to the open source community.
This new version focuses on a much better integration of SUMO configurations, and introduces a new Server entity to the Application Simulator.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can find the new version in our 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/download/&#34;&gt;Download section&lt;/a&gt;, and in our 




&lt;a href=&#34;https://github.com/eclipse/mosaic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please note our 





  
  

&lt;a href=&#34;#migration-guide&#34;&gt;Migration Guide&lt;/a&gt; below when updating Eclipse MOSAIC.&lt;/p&gt;
&lt;h3 id=&#34;release-date&#34;&gt;Release Date&lt;/h3&gt;
&lt;p&gt;2021-03-10&lt;/p&gt;
&lt;h3 id=&#34;changelog&#34;&gt;Changelog&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[T+] It is now possible to map applications on vehicles which are defined in SUMO configurations. 
[T+] Simplified the internal road network model for a better integration of existing SUMO scenarios.
[C+] Implemented much faster reachability check in SNS.
[A+] Added the possibility to map an application on all existing traffic lights at once.   
[A+] New simulation entity for Server applications. 
[M-] Fixes a minor bug in the contains check of polygons
[M+] Added complete documentation for most configuration files to the website.
[M+] Added a new tutorial showcasing the integration of existing SUMO configurations.
[T+] Now supports SUMO 1.8.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;⭐ A huge thanks to all contributors who participated in this release:





&lt;a href=&#34;https://github.com/fabmax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; fabmax&lt;/a&gt;,





&lt;a href=&#34;https://github.com/kschrab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; kschrab&lt;/a&gt;,





&lt;a href=&#34;https://github.com/paguos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; paguos&lt;/a&gt;,





&lt;a href=&#34;https://github.com/schwepmo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; schwepmo&lt;/a&gt;, and





&lt;a href=&#34;https://github.com/vogtfa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; &lt;i class=&#34;fab fa-github&#34;&gt;&lt;/i&gt; vogtva&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;migration-guide&#34;&gt;Migration Guide&lt;/h3&gt;
&lt;p&gt;With the improved integration of SUMO scenarios it is now possible to create a MOSAIC scenario based on any
existing SUMO scenario (&lt;code&gt;*.sumocfg&lt;/code&gt;, &lt;code&gt;*.net.xml&lt;/code&gt;, and &lt;code&gt;*.rou.xml&lt;/code&gt;). To achieve, we had to adjust our
road network model in a way that it matches better the network representation of SUMO.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This adjustment, however, affects all existing MOSAIC scenarios.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following steps should be followed if you want to migrate your already existing MOSAIC scenario to the latest version:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the newest version of 




&lt;a href=&#34;https://www.dcaiti.tu-berlin.de/research/simulation/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;scenario-convert&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;scenario-convert --update -d path/to/database.db&lt;/code&gt; to update the database file of your scenario.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;scenario-convert --db2sumo -d path/to/database.db&lt;/code&gt; to generate a new SUMO network.&lt;/li&gt;
&lt;li&gt;Move the generated &lt;code&gt;*.net.xml&lt;/code&gt; file to the &lt;code&gt;sumo&lt;/code&gt; directory of your scenario and replace the existing one with it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you need further advice, please head over to our all new 




&lt;a href=&#34;https://github.com/eclipse/mosaic/discussions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;discussion board&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Changelog Legend&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[M]&lt;/code&gt; &lt;em&gt;Eclipse MOSAIC&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[A]&lt;/code&gt; &lt;em&gt;Application simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[B]&lt;/code&gt; &lt;em&gt;Battery simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[C]&lt;/code&gt; &lt;em&gt;Communication simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[E]&lt;/code&gt; &lt;em&gt;Environment simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[N]&lt;/code&gt; &lt;em&gt;Navigation component&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[S]&lt;/code&gt; &lt;em&gt;Scenario-convert&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[T]&lt;/code&gt; &lt;em&gt;Traffic simulator&lt;/em&gt;&lt;br&gt;
&lt;code&gt;[+/-]&lt;/code&gt; &lt;em&gt;new Feature/Bugfix&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Studying Traffic Control Algorithms in MOSAIC</title>
      <link>https://www.eclipse.dev/mosaic/post/traffic-control/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/post/traffic-control/</guid>
      <description>&lt;p&gt;&lt;strong&gt;The simulative investigation of communication-based Traffic Management solutions requires combining models from different domains. Eclipse MOSAIC suits very well for this purpose as it couples multiple simulators to model vehicle movement pattern, infrastructure sensors, (variable) traffic signs, as well as different communication links (ITS-G5, 4G/5G) between vehicles and backends, and the application logic in entities like vehicles and a Traffic Management Center.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;featured.png&#34; alt=&#34;Inframix System Overview&#34;&gt;&lt;/p&gt;
&lt;p&gt;In a recent study, we analyzed future traffic estimation and control algorithms towards their use on highways
with special focus on mixed traffic of conventional vehicles, connected vehicles, and autonomous vehicles. Connected
vehicles share telematic information with a Traffic Management Center (TMC) which can then estimate the traffic state
and initiate control mechanisms to improve traffic efficiency either via variable message signs as part of the infrastructure, or via V2X communication directly addressing connected vehicles in order to share
speed and lane change advices with the vehicles on the road (e.g. via ETSI IVI message). In a further step,
dynamic lane assignments have been established, which dedicate lanes to autonomous vehicles only to enable
efficient platooning maneuvers. The individual highlights of Eclipse MOSAIC for simulating such a traffic management system are visualized in the video.&lt;/p&gt;
&lt;video controls style=&#34;width:55%&#34;&gt;
  &lt;source src=&#34;https://owncloud.fokus.fraunhofer.de/index.php/s/LclLTzGQ0BdziIn/download&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;p&gt;With &lt;strong&gt;Eclipse MOSAIC&lt;/strong&gt; this system has been modelled and simulated with all its various aspects in order to analyze
efficiency improvements of such estimation and control algorithms. As traffic simulator, we employed
&lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/traffic_simulator_sumo/&#34;&gt;Eclipse SUMO&lt;/a&gt;&lt;/strong&gt;, which already provides a basic
model for variable &lt;em&gt;speed&lt;/em&gt; signs. However, the preferred 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/vms_simulator/&#34;&gt;MOSAIC VMS Simulator&lt;/a&gt;
realizes a more flexible concept with the dynamic control of the VMS during simulation runtime, including &lt;em&gt;arbitrary sign semantics&lt;/em&gt; additional
to &lt;em&gt;speed&lt;/em&gt; and featuring a visibility range. The interplay of information from infrastructure elements as well as communicated information
has been modelled in detail with applications covering realistic behavior of human drivers and autonomous vehicles. Additionally,
real estimation and control algorithms from external suppliers have been integrated into the simulation to
provide a software-in-the-loop environment. The &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_mapping/&#34;&gt;MOSAIC Mapping&lt;/a&gt;&lt;/strong&gt;
allowed for a comprehensive configuration of the different application components to the simulated entities (variously equipped vehicles, RSUs and a TMC cloud server).&lt;/p&gt;
&lt;p&gt;The final result was a complex simulation scenario for Eclipse MOSAIC,
including a calibrated traffic model, various application and behavior models for automated, connected and conventional vehicles,
different communication links via ITS-G5 and cellular communication, infrastructure models for sensors and variable message signs, and
a new evaluation component in order to gain statistics out of a simulation.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Requirement&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/traffic_simulator_sumo/&#34;&gt;SUMO&lt;/a&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_simulator/&#34;&gt;MOSAIC Application&lt;/a&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_cell/&#34;&gt;MOSAIC Cell&lt;/a&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_sns/&#34;&gt;MOSAIC SNS&lt;/a&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/vms_simulator/&#34;&gt;MOSAIC VMS&lt;/a&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/visualization/statistics/&#34;&gt;MOSAIC Output&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Simulate Vehicle Traffic on Highways&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Measure Traffic Properties (Flow, Density)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Control Traffic dynamically via VMS&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;(X)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Exchange V2X Messages via ITS-G5 and 4G/5G&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Include Vehicle Functions which react on IVIM&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Model Traffic Management Center Facilities&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Integrate real TMC algorithms in Simulation&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Include Roadside Units with custom Functionality&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Generate aggregated Statistics from the Simulation&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Generated Detailed Simulation Logs&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;(X)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;the-simulation-setup&#34;&gt;The Simulation Setup&lt;/h3&gt;
&lt;p&gt;The traffic model in this scenario has been created using real toll-data for the highway AP7 in northern Spain, provided
by the Spanish toll road management (




&lt;a href=&#34;https://www.abertis.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Abertis Infraestructuras, S.A.&lt;/a&gt;). Based on this data, traffic has been
generated in Eclipse SUMO and calibrated in a way,
that the simulated traffic resembles the original toll data as close as possible. This procedure has been done for the
complete highway AP7 and resulted in more than 500.000 vehicles per day in the simulation. However, it would not make real sense
to analyze a whole highway stretch, as the control algorithms under test apply very local changes. Therefore, we decided to extract
a reduced traffic scenario from the calibrated one by measuring the vehicle movements within a smaller area only. Based on those
measurements we were able to create a realistic traffic model on a stretch of 25 kilometers length near Girona.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-the-test-site-modelled-in-eclipse-mosaic&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.eclipse.dev/mosaic/mosaic/post/traffic-control/test-site_huc9e68466259c66b25b58dd1cb0735621_545645_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;The test site modelled in Eclipse MOSAIC&#34;&gt;


  &lt;img data-src=&#34;https://www.eclipse.dev/mosaic/mosaic/post/traffic-control/test-site_huc9e68466259c66b25b58dd1cb0735621_545645_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;45%&#34; height=&#34;551&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    The test site modelled in Eclipse MOSAIC
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;For modelling the infrastructure, the highway has been divided into so-called segments. Each segment, roughly 500m in length, contains
spot sensors at the entry of each segment to measure traffic flow, lane area detectors which model cameras to measure traffic density, and
Variable Message Signs (VMS) displaying speed limits and lane assignments. Modelling VMS was achieved by the new
simulator &lt;strong&gt;MOSAIC VMS&lt;/strong&gt;, which let vehicles &amp;ldquo;see&amp;rdquo; oncoming traffic signs showing speed limits or lane assignments. An additional
behavior model for vehicles implemented in the MOSAIC Application Simulator could react on those instructions accordingly.&lt;/p&gt;
&lt;p&gt;The segmentation of the highway was very important for the traffic estimation and control algorithms which have been integrated into the scenario. Those
algorithms, provided by the 




&lt;a href=&#34;https://www.pem.tuc.gr/index.php?id=5257&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Technical University of Crete&lt;/a&gt;, can
estimate the traffic volume on highways using traditional sensors, but also by receiving CAM messages of connected vehicles. Based on the
traffic estimation, additional algorithms can control the traffic by setting speed limits on VMS, or by sending V2X messages (e.g. ETSI IVI messages)
with speed recommendations or lane change advices to individual vehicles. The control algorithms were written in C++ and have already been used in real
traffic management centers. For this study, we integrated them into the 





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_simulator/&#34;&gt;MOSAIC Application&lt;/a&gt;
Simulator using the Java Native Interface (JNI).&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-integration-of-traffic-control-algorithms-into-mosaic-application-using-jni&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.eclipse.dev/mosaic/mosaic/post/traffic-control/teac-jni_hu8eedbfac73273995571fbc96a05c851b_31297_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Integration of Traffic Control Algorithms into MOSAIC Application using JNI&#34;&gt;


  &lt;img data-src=&#34;https://www.eclipse.dev/mosaic/mosaic/post/traffic-control/teac-jni_hu8eedbfac73273995571fbc96a05c851b_31297_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;45%&#34; height=&#34;632&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Integration of Traffic Control Algorithms into MOSAIC Application using JNI
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;The estimation algorithms rely on information from vehicles and control algorithms are able to send back advices. Therefore, communication
links are required to exchange V2X messages. To achieve this, two separate communications links have been modelled by integrating
the &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_sns/&#34;&gt;MOSAIC Simple Network Simulator&lt;/a&gt;&lt;/strong&gt; for ITS-G5 communication,
and the  &lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/network_simulator_cell/&#34;&gt;MOSAIC Cell Simulator&lt;/a&gt;&lt;/strong&gt; for cellular communication (e.g. 5G or LTE-V2X).
In the former case, vehicles exchanged message with Road Side Units along the road, which then forwarded the information to the Traffic Management
Center (TMC). In the latter case, vehicles were directly connected to the TMC.&lt;/p&gt;
&lt;p&gt;Finally, application models for connected and automated vehicles have been integrated by using the
&lt;strong&gt;





  
  

    

    
    
      
      
      
      
    

    
    

    
  

&lt;a href=&#34;https://www.eclipse.dev/mosaic/mosaic/docs/simulators/application_simulator/&#34;&gt;MOSAIC Application Simulator&lt;/a&gt;&lt;/strong&gt;. With the help of these applications
vehicles could react on advices sent by the TMC. Depending on the SAE level of the vehicle in the simulation, the vehicles
would execute a certain advice immediately after some safety checks (fully automated vehicle) or with a certain delay
(connected vehicle with a human driver reacting on a lane-change advice).&lt;/p&gt;
&lt;h3 id=&#34;evaluations&#34;&gt;Evaluations&lt;/h3&gt;
&lt;p&gt;In a first study, we took a closer look onto the main traffic flow control (MTFC) in general. This algorithm measures the traffic volume
on the highway and adjusts the speed limits shown on VMS based on the current flow and density. In many cases, traffic collapses
near on-ramps when traffic flow on the highway is already high and additional vehicles are entering, resulting in a capacity drop
on the highway and thereby congestion further upstream. To avoid this from happening, the controller reduces the average speed
of the main flow resulting in more capacity available at the bottleneck. This effect could be shown in MOSAIC with the setup described
above as well, as shown in the Figure below. Here you can see, that the congestion which arises at the bottleneck near segment 30 can
be reduced by activating the controller.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-speed-over-time-on-the-highway-left-no-control-enabled-right-control-algorithm-active&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.eclipse.dev/mosaic/mosaic/post/traffic-control/teac-no-control-vs-control_hu3f36ae42f5012c9c73c42f4df7e25b4b_269788_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;Speed over time on the highway. Left no control enabled, right control algorithm active.&#34;&gt;


  &lt;img data-src=&#34;https://www.eclipse.dev/mosaic/mosaic/post/traffic-control/teac-no-control-vs-control_hu3f36ae42f5012c9c73c42f4df7e25b4b_269788_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;70%&#34; height=&#34;400&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    Speed over time on the highway. Left no control enabled, right control algorithm active.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;In the previous case, the controller adjusted the speed limit shown on VMS along the highway. Those VMS were placed virtually every
500m along the highway, which would be very expensive to implement on real highways. Therefore, we reduced the number of
VMS placed along the highway and tested the algorithm again. VMS were now placed at strategic positions rather than equidistant. To be more
precisely, five VMS were placed between two consecutive on-ramps, having one VMS to control the speed near the bottleneck, three safety VMS which reduce
the speed stepwise further upstream, and one VMS after the on-ramp to release the vehicles from the control area. As a result, we
could spare over 60% of the VMS placed along the specific highway stretch without seeing much difference in the results.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-in-the-left-case-vms-are-placed-every-500m-in-the-right-case-only-few-vms-at-strategic-locations&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.eclipse.dev/mosaic/mosaic/post/traffic-control/teac-full-vms-vs-few-vms_hu3f36ae42f5012c9c73c42f4df7e25b4b_266372_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;In the left case, VMS are placed every 500m. In the right case only few VMS at strategic locations.&#34;&gt;


  &lt;img data-src=&#34;https://www.eclipse.dev/mosaic/mosaic/post/traffic-control/teac-full-vms-vs-few-vms_hu3f36ae42f5012c9c73c42f4df7e25b4b_266372_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;70%&#34; height=&#34;400&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    In the left case, VMS are placed every 500m. In the right case only few VMS at strategic locations.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;In addition to controlling the traffic by setting VMS, vehicles do receive speed limits or speed advices via communication using IVI messages.
Those messages contain control decisions for each segment and are spread to the vehicles using ITS-G5 adhoc communication. For this purpose,
the simulation scenario is modelled in a way, that a road side unit is placed at each segment entry. Equipped vehicles adjust their speeds and
therefore control the traffic flow as a whole, as other vehicles (e.g. their followers) are forced to adjust their speeds as well. With this fact
given, we did another experiment in which we eliminated all VMS completely and sent speed limits only via V2X communication to
equipped vehicles. This, on one hand, already works with rather low penetration rates of 15 percent equipped vehicles, as shown in the Figure
below. Furthermore, the higher the penetration rate is, the better the controller works. For high penetration rates, this technique even surpasses the classic
approach via VMS slightly, as connected vehicles can react and controlled more precisely.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-in-the-left-case-traffic-is-controlled-via-vms-in-the-right-case-only-v2x-messages-are-utilized&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://www.eclipse.dev/mosaic/mosaic/post/traffic-control/teac-full-vms-vs-ivim_hu3f36ae42f5012c9c73c42f4df7e25b4b_269336_2000x2000_fit_lanczos_2.png&#34; data-caption=&#34;In the left case traffic is controlled via VMS. In the right case, only V2X messages are utilized.&#34;&gt;


  &lt;img data-src=&#34;https://www.eclipse.dev/mosaic/mosaic/post/traffic-control/teac-full-vms-vs-ivim_hu3f36ae42f5012c9c73c42f4df7e25b4b_269336_2000x2000_fit_lanczos_2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;70%&#34; height=&#34;400&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption data-pre=&#34;Figure &#34; data-post=&#34;:&#34; class=&#34;numbered&#34;&gt;
    In the left case traffic is controlled via VMS. In the right case, only V2X messages are utilized.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;We modelled complex traffic scenarios including road infrastructures (sensors, dynamic traffic signs, road side units), individual driving
behavior for different SAE levels. Furthermore, we integrated real algorithms for traffic estimation and control into MOSAIC Application
enabling software-in-the-loop tests. By creating and calibrating a highway scenario using real toll data, we could test different
traffic control techniques which showed that traffic flow on highways could be improved, even with novel approaches which do not
rely on classic infrastructure such as road sensors and Variable Message Signs, but almost solely on V2X communication.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;




&lt;a href=&#34;https://www.inframix.eu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;inframix.png&#34; alt=&#34;INFRAMIX EU&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This work was part of the 




&lt;a href=&#34;https://www.inframix.eu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;INFRAMIX&lt;/a&gt; project. INFRAMIX has received funding from
the European Union&amp;rsquo;s Horizon 2020 research and innovation programme under grant
agreement no 723016.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Release of Eclipse MOSAIC</title>
      <link>https://www.eclipse.dev/mosaic/post/release-20-0/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/post/release-20-0/</guid>
      <description>&lt;p&gt;&lt;strong&gt;The initial contribution is accomplished! With the autumn version, the committer team from Fraunhofer FOKUS and DCAITI is proud to release Eclipse MOSAIC 20.0 to the open source community. With the runtime infrastructure, core libraries and various implementations of simulators or couplings to existing ones, Eclipse MOSAIC includes the essential feature collection for simulation and virtual testing of connected and automated mobility solutions.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;release-date&#34;&gt;Release Date&lt;/h3&gt;
&lt;p&gt;2020-10-19&lt;/p&gt;
&lt;h3 id=&#34;changelog&#34;&gt;Changelog&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[M+] Moved main code to new public repository github-com/eclipse-mosaic
[M+] Changed license to EPL 2.0
[M+] Revised and refactored all public code.
[M+] Significantly improved and extended the documentation, including new tutorials
[M-] Replaced dependencies which are incompatible with EPL.
[M+] Major overhaul of configuration files, e.g.
     * vsimrti/vsimrti_config.xml -&amp;gt; scenario_config.json
     * etc/defaults.xml -&amp;gt; etc/runtime.json
[A+] Mapping configuration has been extended with new features (e.g. typeDistributions, parameter variations).
[A+] New API for traffic light applications
[C+] SNS supports most important Geo-Routing features for ad-hoc multihop communication
[T+] Now supports SUMO 1.7.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Changelog (Features and Bugfixes) Legend:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;[M]&lt;/code&gt; Eclipse MOSAIC&lt;br&gt;
&lt;code&gt;[A]&lt;/code&gt; Application simulator&lt;br&gt;
&lt;code&gt;[B]&lt;/code&gt; Battery simulator&lt;br&gt;
&lt;code&gt;[C]&lt;/code&gt; Communication simulator&lt;br&gt;
&lt;code&gt;[E]&lt;/code&gt; Environment simulator&lt;br&gt;
&lt;code&gt;[N]&lt;/code&gt; Navigation component&lt;br&gt;
&lt;code&gt;[S]&lt;/code&gt; Scenario-convert&lt;br&gt;
&lt;code&gt;[T]&lt;/code&gt; Traffic simulator&lt;br&gt;
&lt;code&gt;[+/-]&lt;/code&gt; new Feature/Bugfix&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing mobility scenarios with the Open-Source simulation environment Eclipse MOSAIC</title>
      <link>https://www.eclipse.dev/mosaic/post/eclipse-mosaic/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/post/eclipse-mosaic/</guid>
      <description>&lt;p&gt;&lt;strong&gt;On the occasion of EclipseCon 2020, Fraunhofer FOKUS launches its simulation environment Eclipse MOSAIC. This solution is based on VSimRTI (Vehicle-2-X Simulation Runtime Infrastructure), which has been developed over the last 15 years in close cooperation with the DCAITI of the TU Berlin and has already been used by more than 600 partners to test mobility services and traffic scenarios. Eclipse MOSAIC is now partially available as open-source.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Whether dynamic lane assignment or traffic light phase assistant, new mobility services are designed to increase safety, efficiency, comfort, and facilitate environmentally friendly transport. The Eclipse MOSAIC simulation environment allows to explore how this can be achieved, before the services are tested in field trials on the road. Eclipse MOSAIC can also be used for testing driver assistance systems and to optimize the entire traffic.&lt;/p&gt;
&lt;h2 id=&#34;flexible-coupling-of-simulators&#34;&gt;Flexible coupling of simulators&lt;/h2&gt;
&lt;p&gt;Eclipse MOSAIC integrates, depending on the simulation scenario, different aspects like individual building blocks into a holistic system, e.g., traffic congestion, battery charging of electric cars, or communication between other road users and a central cloud. The level of detail for individual aspects is variable: from a rough mobility scenario for an entire city to detailed individual driving maneuvers.&lt;/p&gt;
&lt;p&gt;The open-source version of Eclipse MOSAIC already includes several simulators, e.g., Eclipse SUMO for traffic and OMNeT++ and ns-3 for communication. Further simulators can be coupled, e.g., Fraunhofer FOKUS offers the simulator PHABMACS for the realistic modeling of autonomous vehicles.&lt;/p&gt;
&lt;p&gt;In addition to the simulator coupling, Eclipse MOSAIC manages the following tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Federation: Individual simulators are interchangeable within a scenario.&lt;/li&gt;
&lt;li&gt;Interaction: Information from one simulator is also taken into account by others.&lt;/li&gt;
&lt;li&gt;Time: All simulators run synchronously.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, Eclipse MOSAIC offers several tools for evaluation and visualization of the results, which are also included in the open-source package.&lt;/p&gt;
&lt;p&gt;In the recently completed EU project INFRAMIX, Eclipse MOSAIC was used to test scenarios for the future road that allow mixed traffic between conventional and automated vehicles.&lt;/p&gt;
&lt;p&gt;Fraunhofer FOKUS has been a strategic development member of the Eclipse Foundation since May of this year and works in close cooperation with the partners of the working groups OpenMobility and openADx (Open Source for Autonomous Driving).&lt;/p&gt;
&lt;p&gt;Further information about Eclipse MOSAIC:
&lt;a href=&#34;https://www.eclipse.dev/mosaic&#34;&gt;https://www.eclipse.dev/mosaic&lt;/a&gt;
&lt;a href=&#34;https://github.com/eclipse/mosaic&#34;&gt;https://github.com/eclipse/mosaic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Further information about INFRAMIX:
&lt;a href=&#34;https://www.fokus.fraunhofer.de/de/fokus/news/inframix-projekt_2020_08&#34;&gt;https://www.fokus.fraunhofer.de/de/fokus/news/inframix-projekt_2020_08&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Further information about EclipseCon:
&lt;a href=&#34;https://www.eclipsecon.org/2020&#34;&gt;https://www.eclipsecon.org/2020&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.eclipse.dev/mosaic/about/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://www.eclipse.dev/mosaic/get_in_contact/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/get_in_contact/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Contribution to Eclipse MOSAIC</title>
      <link>https://www.eclipse.dev/mosaic/contribution/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/contribution/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Download</title>
      <link>https://www.eclipse.dev/mosaic/download/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/download/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Eclipse MOSAIC Community</title>
      <link>https://www.eclipse.dev/mosaic/community/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/community/</guid>
      <description></description>
    </item>
    
    <item>
      <title>News</title>
      <link>https://www.eclipse.dev/mosaic/news/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/news/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Publications</title>
      <link>https://www.eclipse.dev/mosaic/publications/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://www.eclipse.dev/mosaic/publications/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
